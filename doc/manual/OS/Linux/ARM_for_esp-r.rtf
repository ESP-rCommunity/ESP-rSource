{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf200
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fswiss\fcharset0 Helvetica-Bold;\f2\froman\fcharset0 Times-Roman;
\f3\froman\fcharset0 TimesNewRomanPSMT;\f4\fmodern\fcharset0 Courier;\f5\fmodern\fcharset0 Courier-Bold;
\f6\fswiss\fcharset0 Helvetica-BoldOblique;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}}
\paperw11904\paperh16836\margl1440\margr1440\vieww21740\viewh13300\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardeftab720\qc\partightenfactor0

\f1\b \cf0 Setting up ARM computers for use with ESP-r13
\f2\b0 \

\f1\b 15 March 2019
\f2\b0 \

\f1\b ESRU, Glasgow, Scotland
\f2\b0 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardeftab720\partightenfactor0

\f0 \cf0 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardeftab720\partightenfactor0

\f1\b\fs22 \cf0 Introduction
\f2\b0\fs24 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardeftab720\partightenfactor0

\f0\fs20 \cf0 \
ESP-r works on a range of computers from desktops to enterprise servers.  This document discusses how to implement an ESP-r distribution on a computers at the other extreme - the Raspberry Pi, Odroid-C2 or XU-4 and even a rooted Android tablet. These match-box sized single board computers (which draw ~2-6W) none-the-less supports a range of simulation tasks one might expect in training workshops where models of limited complexity or as part of embedded experiments.
\f2\fs24  
\f0\fs20 These notes are based on the standard Linux setup as well as the standard scripting environments that come with Linux. This document focuses on the adaptations needed for the memory and disk limitations that apply to these computers. \
\
You can run a the single board computers headless (via a SSH session from another computer) or by connecting a monitor and/or TV, mouse and keyboard.  Your choice.  Similarly, you can run ESP-r in either graphic or pure-text mode.  \

\f1\b \
Before you start
\f0\b0 \
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardeftab720\partightenfactor0

\f2\fs24 \cf0 If possible use the fastest storage device offered - an emmc is preferable to a SDHC card. 
\f0\fs20 A class 10 16/32GB SD card is recommended.
\f2\fs24  You will also need to increase the swop space allocated. Two methods are presented. 
\f0\fs20 To accomplish development or simulation tasks you will need to use a command window.  If you are logging in remotely you have the choice of working with a text-only command window or using graphics (typically via forwarding X11 graphics via ssh). If you stay in the initial text display you can issue commands for applications that do not use graphics. 
\f2\fs24 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardeftab720\partightenfactor0

\f0\fs20 \cf0 \
Linux OS based on Debian use apt-get (a command line tool) to install new software packages.  For example, to install the helper tool xfig the syntax would be:
\f2\fs24 \

\f0\fs20 \
  
\f1\b sudo apt-get install name-of-package
\f2\b0\fs24 \

\f0\fs20 \
which will temporarily give you administrative privileges and locate name-of-package and also list and acquire its dependencies.  Apt-get has other commands to remove packages, upgrade packages.  There are also commands for finding available packages via:
\f2\fs24 \

\f0\fs20 \
  
\f1\b apt-cache search
\f0\b0  
\f1\b "text-to-look-for"
\f2\b0\fs24 \

\f0\fs20 \
Note: after running the update facility in raspi-config to get a newer version of raspi-config there may be other
\f2\fs24 \

\f0\fs20 package updates found but not acted upon.  To enable the other packages issue the command:
\f2\fs24 \

\f0\fs20 \
  
\f1\b sudo apt-get update
\f2\b0\fs24 \

\f1\b\fs20   sudo apt-get dist-upgrade
\f2\b0\fs24 \

\f0\fs20 \
 
\f2\fs24 \

\f0\fs20 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardeftab720\partightenfactor0

\f1\b\fs22 \cf0 Before you start - Raspberry Pi
\f2\b0\fs24 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardeftab720\partightenfactor0

\f0\fs20 \cf0 \
Review the Raspberry Pi WIKI <en.wikipedia.org/wiki/Raspberry_Pi> as well as <www.raspberrypi.org> for further guidance.   Follow the recommendations for downloading the OS image and merging it onto a SDHC card. 
\f2\fs24 \

\f0\fs20 \
The first time you power up a Pi run the configuration tool (you can also do this later to tweak the Pi). The configuration tool does not need graphics to run so you can do this prior to starting a window manager. Available options:
\f2\fs24 \
\pard\tx940\tx1440\tx1853\tx2420\tx2987\tx3554\tx4121\tx4688\tx5255\tx5822\tx6389\tx6956\tx7523\pardeftab720\li720\fi-720\ri-2\partightenfactor0
\ls1\ilvl0
\f3 \cf0  \'95	
\f0\fs20 Use the expand-to-fill facility to grow the initial OS to fill the SD card.  
\f2\fs24 \
\ls1\ilvl0
\f3  \'95	
\f0\fs20 Use the keyboard setup utility it makes subsequent tasks easier even if you later run the Pi headless.  
\f2\fs24 \
\ls1\ilvl0
\f3  \'95	
\f0\fs20 Set a password and remember it.
\f2\fs24 \
\ls1\ilvl0
\f3  \'95	
\f0\fs20 Set the local - choose something like en-gb or en-usa which use a '.' for a decimal place.  
\f2\fs24 \
\ls1\ilvl0
\f3  \'95	
\f0\fs20 Set the memory split between the CPU and GPU.  You want to maximise CPU memory so choose 32 or 64MB for the GPU.
\f2\fs24 \
\ls1\ilvl0
\f3  \'95	
\f0\fs20 Leave the boot option as non-gui so you have maximum flexibility.
\f2\fs24 \
\ls1\ilvl0
\f3  \'95	
\f0\fs20 Select the raspberry-config update (this will scan the repository and download and install recent software changes).
\f2\fs24 \
\ls1\ilvl0
\f3  \'95	
\f0\fs20 Set your time-zone.
\f2\fs24 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardeftab720\partightenfactor0

\f0\fs20 \cf0 \
When you select <finish> it will undertake the pending tasks and reboot the Pi.  If you want to re-visit the facility give the command:
\f2\fs24 \

\f0\fs20   
\f1\b sudo raspi-config
\f0\b0   
\f2\fs24 \

\f0\fs20 \
Your next step is to increase the swap space (virtual memory).  The initial setting is a 100MB swop file.  For ESP-r compiling and use you will want between 600MB-1GB.  A discussion of the process can be found at <raspberrypi.stackexchange.com>.  You need to edit the file /etc/dphys-swapfile.  Use sudo nano or your favourite text editor and change the CONF_SWAPSIZE= value in the file.  To record this change give the following commands in a text or graphic command window (see below):
\f2\fs24 \

\f1\b\fs20 sudo  /etc/init.d/dphys-swapfile stop
\f2\b0\fs24 \

\f1\b\fs20 sudo  /etc/init.d/dphys-swapfile start
\f0\b0  
\f2\fs24 \

\f0\fs20 \
If you stay in the initial text display you can issue commands for applications that do not use graphics (such as the ones listed below).  To start up the window manager give the command
\f2\fs24 \

\f0\fs20 \
  
\f1\b startx
\f2\b0\fs24 \

\f0\fs20 \
which will start a graphical interface with the potential for an application/widget dock at the bottom and a number of icons on the left.  One of them is marked LXTerminal.  Click on that icon and a graphic command window will open (you could start more than one if you wanted to).  In the LXTerminal you can type in commands to run applications which are either text based or graphical in nature.
\f2\fs24 \

\f0\fs20 \

\f1\b Creating swop space
\f2\b0\fs24 \

\f0\fs20 \
The limited memory on some ARM distributions requires the creation of swap space (1000MB of virtual memory) so that ESP-r can be compiled and run. Below is an alternative method from that used by the Raspberry Pi. Issue the following commands to create a 1GB swop:
\f4\fs26 \
\pard\pardeftab720\partightenfactor0
\cf0  
\f1\b\fs20 sudo mkdir -p /var/cache/swap/   
\f2\b0\fs24 \

\f1\b\fs20   sudo dd if=/dev/zero of=/var/cache/swap/swapfile bs=1M count=1024
\f2\b0\fs24 \

\f1\b\fs20   sudo chmod 0600 /var/cache/swap/swapfile 
\f2\b0\fs24 \

\f1\b\fs20   sudo mkswap /var/cache/swap/swapfile 
\f2\b0\fs24 \

\f1\b\fs20   sudo swapon /var/cache/swap/swapfile
\f2\b0\fs24 \
\pard\pardeftab720\partightenfactor0

\f5\b\fs20 \cf0 \
\pard\pardeftab720\partightenfactor0

\f0\b0 \cf0 Then use a text editor to add the following to the /etc/fstab file so that swap is used every time you boot up.
\f2\fs24 \

\f0\fs20 \
\pard\pardeftab720\partightenfactor0

\f4\fs26 \cf0  
\f1\b\fs20 /var/cache/swap/swapfile    none    swap    sw    0   0
\f2\b0\fs24 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardeftab720\partightenfactor0

\f0\fs20 \cf0 \

\f1\b Before you start - Odroid-C2 or XU-4\
The Odroid-C2 
\f0\b0 is a quad-core ARMv7l process with 2GB of memory and the option for a emmc on-board disk. The XU-4 is a octacore and 2GB of memory and the option of emac or SDHC but it also has a faster network and USB3. With this specification it is no longer necessary to use the [\'97small] directive when building ESP-r and disk access is less of an issue. Note that swap is not part of the initial state of the Odroid, creating a swap as in the prior section. In other respects the setup follows the other ARM computers.
\f2\fs24 \

\f0\fs20 \
\

\f1\b Before you start - Android
\f2\b0\fs24 \

\f1\b\fs20 \

\f0\b0 Many Android tablets have dual or quad-core ARMv7l processors with 1-2GB of memory and 8 or more GB of internal disk. There are a number of projects to host Linux on Android, e.g. Linux Deploy, typically as a disk image running in a so-called loop-back.  This requires rooting the device. ESP-r has been seen to work with Linux Deploy running Debian in conjunction with an App for SSH access and VNC.  Once setup the usual commands for apt-get can be used to install the dependencies.  ESP-r compiled on other ARMv7l devices run.  For Android devices with limited free memory be sure to use executables built with constrained arrays.
\f2\fs24 \

\f0\fs20 \
User interaction is a constraint of Android are simulation use. The standard pop-up keyboard lacks the control and arrow keys so an alternative App needs to be sourced. A bluetooth keyboard is recommended.  Finger movements substitute for a mouse. The X11 interface can, however be driven by keystrokes so it may have an advantage over the GTK interface. Screens may have high resolution, but are physically small and difficult to see.  Some users may prefer to use ESP-r in text mode via a ssh shell access rather than a full desk top display. Also Andorid and Linux are both active and there may be limited memory available. 
\f2\fs24 \

\f0\fs20 \
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardeftab720\partightenfactor0

\f1\b\fs22 \cf0 Software needed to build ESP-r
\f2\b0\fs24 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardeftab720\partightenfactor0

\f0\fs20 \cf0 \
To compile ESP-r you are going to need to install a number of tools and libraries.  These are similar to those included in a Ubuntu machine setup. In the list below are packages which you will need, they may already be included, in which case nothing happens. The list also includes helper applications that ESP-r expects to find. Install requests can be one at a time or you can also combine commands, for example:
\f2\fs24 \

\f0\fs20 \
  
\f1\b sudo apt-get install build-essential console-tools-dev expect-dev
\f2\b0\fs24 \

\f0\fs20   
\f2\fs24 \

\f0\fs20 Development:  build-essential, g++, gcc, gfortran, gdb, libtool, subversion, libxml2, libxml2-dev, libxml2-utils libxslt1-dev libxslt1-dbg
\f2\fs24 \

\f0\fs20 \
Graphics: imagemagick (screen grab & display)  libxft2 libxft-dev xfig transfig
\f2\fs24 \

\f0\fs20 Libraries:  libx11-dev,
\f2\fs24 \

\f0\fs20 Networking:  openssh-server, ssh
\f2\fs24 \

\f0\fs20 Shells:  csh
\f2\fs24 \

\f0\fs20 Word processing:  enscript, psutils nedit nano
\f2\fs24 \

\f0\fs20 \
For GTK development selecting the libgtk2.0-dev package will identify most of the dependencies you are likely to need. To assist with debugging also ask for the -dbg versions of the libraries such as:
\f2\fs24 \

\f0\fs20 libfontconfig1-dbg, libcairo2-dbg, libpixman-1-0-dbg, libgtk2.0-0-dbg
\f2\fs24 \

\f0\fs20 \
To find out about the compilers (gcc g++ and gfortran) use:
\f2\fs24 \

\f1\b\fs20   which gcc
\f2\b0\fs24 \

\f1\b\fs20   gcc --version
\f2\b0\fs24 \

\f1\b\fs20   which gfortran
\f2\b0\fs24 \

\f1\b\fs20   gfortran --version
\f2\b0\fs24 \

\f0\fs20 \
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardeftab720\partightenfactor0

\f1\b\fs22 \cf0 Setting up your account and folders
\f2\b0\fs24 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardeftab720\partightenfactor0

\f0\fs20 \cf0 \
The initial user account e.g. \'92pi' or \'91odroid\'92 can be used for all tasks.  You may prefer to have a separate 'training' account for casual users.
\f2\fs24 \

\f0\fs20 \
To simplify other tasks, create a 'bin' folder within each user HOME folder (e.g. /home/fred/bin) at a later stage there are some ESP-r related scripts to copy into this bin folder.
\f2\fs24 \

\f0\fs20 \
 
\f1\b  cd
\f2\b0\fs24 \

\f1\b\fs20   mkdir bin
\f2\b0\fs24 \

\f1\b\fs20 \

\f0\b0 Create a folder for your simulation models (ones that you create and/or for exemplar models that you wish to explore.
\f2\fs24 \

\f0\fs20 \

\f1\b   cd
\f2\b0\fs24 \

\f1\b\fs20   mkdir Models
\f2\b0\fs24 \

\f1\b\fs20 \

\f0\b0 Now is a good time to reboot the Raspberry Pi to ensure that fonts and environment variables are registered. How might you do this? The command is:
\f2\fs24 \

\f0\fs20 \
  
\f1\b sudo reboot
\f2\b0\fs24 \

\f1\b\fs20 \

\f0\b0 If you want to shut down the Raspberry Pi use the following command (before you disconnect the power):
\f2\fs24 \

\f0\fs20 \
  
\f1\b sudo halt
\f2\b0\fs24 \

\f1\b\fs20 \

\f0\b0 \
ESP-r uses a custom Install script instead of  the usual automake based system used in many Linux packages.  To account for limited memory you will likely have to include \'97small in the Install script command line but with an Odroid you may be able to use \'97medium.
\f2\fs24   
\f0\fs20 The ESP-r distribution is traditionally placed in /opt/esp-r. The ESP-r Install script supports this via command line directives.  Create a folder for the standard distribution and take ownership of it via: 
\f2\fs24 \

\f0\fs20 \
\pard\tx560\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardeftab720\partightenfactor0

\f1\b \cf0   sudo mkdir /opt/esp-r
\f2\b0\fs24 \

\f1\b\fs20   sudo chown pi /opt/esp-r\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardeftab720\partightenfactor0

\f0\b0 \cf0 \
Create a folder structure for Source code in your home folder, download the current source distribution from the ESRU web site <https://www.strath.ac.uk/research/energysystemsresearchunit/applications/>. Use the Install script to build the distribution in the folder /opt/esp-r with the GCC version 4/5/6/7 compilers:
\f2\fs24 \

\f0\fs20 \
\pard\tx560\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardeftab720\partightenfactor0

\f1\b \cf0   cd
\f2\b0\fs24 \

\f1\b\fs20   mkdir Src
\f2\b0\fs24 \

\f1\b\fs20   mkdir Src/esp-r
\f2\b0\fs24 \

\f1\b\fs20   cd Src/esp-r
\f2\b0\fs24 \

\f1\b\fs20   
\f6\i \
\pard\tx560\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardeftab720\partightenfactor0

\f0\i0\b0 \cf0 copy the source distribution to this folder.
\f2\fs24 \
\pard\tx560\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardeftab720\partightenfactor0

\f1\b\fs20 \cf0 \
\pard\tx560\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardeftab720\partightenfactor0

\f0\b0 \cf0 To ensure that ESP-r can compile and run on machines with constrained memory you need to include \'97small in the directive you give with the Install.  ARM based computers respond well to compiler optimisation. It takes longer to compile but ESP-r modules can run more than twice as fast if you use the \'97opt1 or \'97opt2.  The compile process is as follows:
\f2\fs24 \
\pard\tx560\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardeftab720\partightenfactor0

\f1\b\fs20 \cf0 \
  ./Install -d /opt/esru --gcc4 --debug \'97small \'97X11 \'97opt2
\f2\b0\fs24 \
\pard\tx560\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardeftab720\partightenfactor0

\f0\fs20 \cf0 \
Say yes to databases and yes to example models and say yes to debug.  You have the option to compile for three different ESP-r interfaces.  The pure-text option is suitable for automated production work as all tasks are carried out via keyboard commands. The X11 interface is the [traditional] interface form.  The GTK interface uses a different graphic library and looks like the Native Windows version of ESP-r.  
\f2\fs24 \

\f0\fs20 \
You can compile more than one interface, just be sure that the executables are located in separate folders (e.g. /opt/esru/esp-r/bin_text  /opt/esp-r/binX11 /opt/esp-r/binGTK. Of course, once you have installed the databases and exemplar models there is no need to repeat this for the other interface types. 
\f2\fs24 \

\f0\fs20 \
One way to do this is to use the standard Install command and then use the operating system to copy the executables e.g.:
\f2\fs24 \

\f0\fs20    <run the compile script for pure-text>
\f2\fs24 \
\pard\tx560\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardeftab720\partightenfactor0

\f1\b\fs20 \cf0   cd /opt/esp-r
\f2\b0\fs24 \

\f1\b\fs20   mkdir bin_text
\f2\b0\fs24 \

\f1\b\fs20   cd bin
\f2\b0\fs24 \

\f1\b\fs20   cp * ../bin_text
\f2\b0\fs24 \
\pard\tx560\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardeftab720\partightenfactor0

\f0\fs20 \cf0   <go back to the development_branch/src>
\f2\fs24 \
\pard\tx560\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardeftab720\partightenfactor0

\f1\b\fs20 \cf0   make clean
\f2\b0\fs24 \
\pard\tx560\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardeftab720\partightenfactor0

\f0\fs20 \cf0   <run the install script for X11>
\f2\fs24 \
\pard\tx560\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardeftab720\partightenfactor0

\f1\b\fs20 \cf0   cd /opt/esp-r
\f2\b0\fs24 \

\f1\b\fs20   mkdir binX11
\f2\b0\fs24 \

\f1\b\fs20   cd bin
\f2\b0\fs24 \

\f1\b\fs20   cp * ../binX11
\f2\b0\fs24 \
\pard\tx560\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardeftab720\partightenfactor0

\f0\fs20 \cf0 \
You can switch between these different ESP-r interfaces by going into the home/pi/bin folder and running the link_to script with the alternative path-to-executable e.g.:
\f2\fs24 \
\pard\tx560\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardeftab720\partightenfactor0

\f1\b\fs20 \cf0   cd
\f2\b0\fs24 \

\f1\b\fs20   cd bin
\f2\b0\fs24 \

\f1\b\fs20   link_to /opt/esp-r/binX11
\f2\b0\fs24 \
\pard\tx560\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardeftab720\partightenfactor0

\f0\fs20 \cf0 \
After you have installed the databases and exemplar models there is no need to do this for subsequent Install sessions (unless the databases or exemplar models have been updated).
\f2\fs24 \

\f0\fs20 \
The compile process is 
\f6\i\b much slower 
\f0\i0\b0 than on desktop machines.  Expect an hour for the complete Install cycle.
\f2\fs24 \
\pard\tx560\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardeftab720\partightenfactor0

\f1\b\fs20 \cf0 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardeftab720\partightenfactor0

\f0\b0 \cf0 The PATH environment variable is usually defined in the ./profile file in your home folder. You might find a line which includes   
\f1\b PATH="$HOME/bin:$PATH"
\f2\b0\fs24 \

\f0\fs20 \
This instruction includes the /home/username/bin folder in the standard PATH environment variable. You could use a text editor to alter this line:  
\f1\b PATH="$HOME/bin:/opt/esp-r/bin:$PATH"
\f2\b0\fs24 \

\f0\fs20 \
Or, copy the link_to and link_to_bash scripts in the /opt/esru/esp-r/scripts folder into you $HOME/bin folder via the following commands:
\f2\fs24 \

\f0\fs20 \

\f1\b   cd 
\f2\b0\fs24 \

\f1\b\fs20   mkdir bin
\f2\b0\fs24 \

\f1\b\fs20   cp /opt/esp-r/scripts/link_to ~/bin
\f2\b0\fs24 \

\f1\b\fs20   cp /opt/esp-r/scripts/link_to_bash ~/bin
\f2\b0\fs24 \

\f1\b\fs20   cd bin
\f2\b0\fs24 \

\f1\b\fs20   ./link_to /opt/esp-r/bin
\f2\b0\fs24 \

\f1\b\fs20   cd
\f2\b0\fs24 \

\f1\b\fs20   source .profile
\f2\b0\fs24 \

\f1\b\fs20   which prj
\f2\b0\fs24 \

\f0\fs20 \
If the 'which prj' commands returns a location the ESP-r executables and libraries are now known.  
\f2\fs24 \

\f0\fs20 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardeftab720\partightenfactor0

\f1\b\fs22 \cf0 Using ESP-r
\f2\b0\fs24 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardeftab720\partightenfactor0

\f0\fs20 \cf0 \
Remember when you log into your account on the Raspberry Pi that you need to issue the following command to re-fresh the system knowledge of where ESP-r lives:
\f2\fs24 \

\f0\fs20 \

\f1\b   cd
\f2\b0\fs24 \

\f1\b\fs20   source .profile
\f2\b0\fs24 \

\f0\fs20 \
ESP-r has a large number of exemplar models.  These are located in the ESP-r distribution and the ESP-r Project Manager (prj) will access them and ask you where you want to copy them so that you can explore them and evolve them without messing up the originals.  One strategy is to create a Models subfolder of your home e.g. /home/pi/Models.  When prj asks you where you want to place a model change the suggested /home/pi to /home/pi/Models.  If you want to revisit and open it again you can use a command sequence in the following form (lets assume that the model folder is named small_house and the model cfg file is named small_house.cfg)
\f2\fs24 \

\f0\fs20 \

\f1\b   cd
\f2\b0\fs24 \

\f1\b\fs20   cd Models/small_house/cfg
\f2\b0\fs24 \

\f1\b\fs20   prj -file small_house.cfg
\f2\b0\fs24 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\partightenfactor0

\f0\fs20 \cf0 \
The ESRU download web pages have documents related to managing source code, working with the subversion source code control environment as well as the ESP-r Cookbook which discusses the design of simulation models and working practices with ESP-r.  You may also find some useful materials in the folder src/manual/OS.
\f2\fs24 \

\f0\fs20 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\partightenfactor0

\f1\b\fs22 \cf0 Shutting down an ARM computer
\f2\b0\fs24 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\partightenfactor0

\f0\fs20 \cf0 \
There is no off switch on most ARM computers  To properly stop it issue one of the the following commands:
\f2\fs24 \

\f0\fs20 \
  
\f1\b sudo shutdown -h now
\f2\b0\fs24 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\partightenfactor0

\f1\b\fs20 \cf0 \
  sudo halt
\f2\b0\fs24 \

\f1\b\fs20 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\partightenfactor0

\f0\b0 \cf0 \
\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardeftab720\partightenfactor0

\fs24 \cf0 \
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardeftab720\partightenfactor0

\f2 \cf0 \
}