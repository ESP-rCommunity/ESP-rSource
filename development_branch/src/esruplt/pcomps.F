C This file is part of the ESP-r system.
C Copyright Energy Systems Research Unit, University of
C Strathclyde, Glasgow Scotland, 2001.

C ESP-r is free software.  You can redistribute it and/or
C modify it under the terms of the GNU General Public
C License as published by the Free Software Foundation
C (version 2 orlater).

C ESP-r is distributed in the hope that it will be useful
C but WITHOUT ANY WARRANTY; without even the implied
C warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
C PURPOSE. See the GNU General Public License for more
C details.

C You should have received a copy of the GNU General Public
C License along with ESP-r. If not, write to the Free
C Software Foundation, Inc., 59 Temple Place, Suite 330,
C Boston, MA 02111-1307 USA.

C This file contains the following routines:
C      MZSDAT
C      CMP01S   1 node (ISV=21) AC  converging 2-leg junction
C      CMP02S   1 node (ISV=21) AC  humidifier adiabatic
C      CMP03S   1 node (ISV=21) AC  fan
C      CMP04S   1 node (ISV=21) AC  cooling coil & flux control
C      CMP05S   1 node (ISV=21) AC  heating coil & flux control
C      CMP06S   1 node (ISV=21) AC  duct & condensation ?
C      CMP07S   1 node (ISV=21) AC  damper & flow ratio control
C      CMP08S   1 node (ISV=21) AC  flow diversion damper
C      CMP09S   1 node (ISV=21) AC  counterflow cooling coil &
C                                   water mass flow rate control
C                                   (Q calculated by TRNSYS type32)
C      CMP10S   1 node (ISV=21) AC  counterflow cooling coil &
C                                   water mass flow rate control
C      CMP11S   1 node (ISV=21) AC  counterflow heating coil &
C                                   water mass flow rate control
C      CMP12S   2 node (ISV=21) AC  plate heat exchanger
C      CMP14S   2 node (ISV=21) Cooling tower model
C      CMP15S   1 node (ISV=21) AC  fan mass flow rate control
C      CMP20S   1 node (ISV=20) WCH boiler
C      CMP21S   2 node (ISV=20) WCH radiator
C      CMP22S   1 node (ISV=20) WCH pipe
C      CMP23S   1 node (ISV=20) WCH converging 2-leg junction
C      CMP24S   1 node (ISV=20) WCH pump
C      CMP25S   2 node (ISV=20) WCH boiler with on/off control
C      CMP26S   2 node (ISV=20) WCH boiler with aquastat control
C      CMP27S   8 node (ISV=20) WCH radiator
C      CMP28S   1 node (ISV=29) Oil-filled electric panel radiator
C      CMP29S   1 node (ISV=20) WCH flow control valve
C      CMP30S   1 node (ISV=20) Water cooler with flux control.
C      CMP31S   2 node (ISV=20) WCH calorifier.
C      CMP32S   2 node (ISV=20) WCH generic liquid/liquid heat exchanger
C      CMP33S   2 node (ISV=20) WCH generic gas/liquid heat exchanger
C      CMP34S   3 node (ISV>19) WCH heated water storage
C      CMP35S   2 node (ISV>19) WCH basic radiator
C      CMP36S   2 node (ISV>19) WCH reversible heat pump
C      CMP37S   1 node (ISV>19) WCH air cooled or evaporative heat 
C                                   rejection device (chiller)
C      CMP38S   1 node (ISV=21) WCH converging multi-leg junction 
C      CMP39S   1 node (ISV>19) WCH pump mass flow rate control
C      CMP40S   3 node (ISV>19) AC  counterflow cooling coil fed
C                                   by WCH system
C      CMP41S   3 node (ISV>19) AC  counterflow heating coil fed
C      CMP42S   2 node (ISV=20) WCH modulating boiler
C      CMP43S   2 node (ISV=20) AC  cooling coil fed
C                                   by WCH system
C      CMP44S   2 node (ISV=20) WCH exponent model radiator
C      CMP45S   1 node (ISV=20) WCH air source heat pump
C      CMP46S   2 node (ISV=20) WCH advanced modulating boiler model
C      CMP50S   1 node (ISV=29) WCH thermostatic valve
C      CMP51S   1 node (ISV=29)     mechanical room thermostat
C      CMP52S   1 node (ISV=29) WCH thermostatic valve (sensor only)
C PP-based components
C      CMP53S   4 node (ISV>19) AC  heat transfer tube with transport delay at water side
C      CMP54S   1 node (ISV=20) Water/steam flow multiplier
C      CMP55S   1 node (ISV=21) AC  air flow multiplier
C      CMP56S   5 node (ISV>19) AC  fan with submerged motor
C      CMP57S   4 node (ISV>19) WCH water pipe with transport delay
C      CMP58S   4 node (ISV>19) AC  air duct with transport delay
C      CMP60S   4 node (ISV>19) AC  air electric heater
C      CMP64S   1 node (ISV=20) Water/steam flow converger
C      CMP65S   3 node (ISV=20) Water/steam flow diverger
C      CMP66S   3 node (ISV=21) AC  moist air flow diverger
C      CMP68S   1 node (ISV=21) AC  moist air flow converger
C PP-based components end
C      CMP67S   3 node (ISV>19) AC  heat transfer tube
C      CMP70S   1 node (ISV=20) Flat plate solar collector (type1)
C      CMP71S   1 node (ISV=20) Solar collector "segment"
C      CMP72S   1 node (ISV=20) Water storage tank layer
C      CMP90S   2 node (ISV>19)     air & water temperature source
C      CMP91S   2 node (ISV>19)     imaginary building-like plant load
C                                   acting on heat and mass balances
C      CMP92S   1 node (ISV=21) AC  fictitious air boundary component
C      CMP93S  10 node (ISV>20) Heat exchanger.
C      CMP94S   3 node (ISV=20) Heat exchanger "segment"
C      CMP98S   1 node (ISV=20) CHP engine component
C      CMP99S   1 node (ISV=20) 3 node small scale a CHP unit
C      FC_static_template  3 node (ISV=21) fuel cell
C      FC_tank_fuel_static_temp  3 node (ISV=20) gas-fired water tank for fuel cell
C      FC_tank_elec_static_temp  1 node (ISV=20) electrically heated water tank for fuel cell
C      AIMS_tank1_fuel_static_temp  3 node (ISV=20) gas-fired water tank for first phase of AIMS work
C      TAC_1_static_template  3 node (ISV=20) first phase thermally activated cooling component
C      TAC_coldtank_static_temp  1 node (ISV=20) cold water storage tank for TAC
C      SOFC_A42_static 7-node (ISV=20) IEA/ECBCS Annex 42 SOFC-cogeneration device
C      simple_solar_coll_static 1 node (ISV=20) simple solar collector 
C      NCHE_static_template 2 node (ISV=20) natural convection heat exchanger (NCHE)
C      stratified_tank_1HX_static 2 node (ISV=20) stratified tank with one immersed coil
C      stratified_tank_2HX_static 3 node (ISV=20) stratified tank with two immersed coil

C ******************** MZSDAT ********************

C MZSDAT calls for each plant component considered, a routine CMP??S
C which establishes for a ?? type component, data derivable from the
C static manufacturers data already read from the database and saves
C it in the static data common block. If appropriate, the user
C specified number of controlled variables is checked
C A CMP??S routine also check whether the number of connections to
C that particular ?? type component is correct and whether the
C connected nodes are of a type as expected by the corresponding
C CMP??C coefficient generator routine

      SUBROUTINE MZSDAT
      USE TCC, ONLY:TCC_static, HCC, ACC, InitializeCosimDataTypes
      USE DLL_Functions, ONLY:SetArraySizes
#include "plant.h"

      COMMON/OUTIN/IUOUT,IUIN

      COMMON/C9/NPCOMP,NCI(MPCOM),CDATA(MPCOM,MMISCD)
      COMMON/C12PS/NPCDAT(MPCOM,9),IPOFS1(MCOEFG),IPOFS2(MCOEFG,MPVAR)

C Number of building zones and constructions.
      integer ncomp,ncon
      common/c1/ncomp,ncon

C Declare local variables to track the number of coupling components to TRNSYS
C that are utilized in the user's model.
      INTEGER :: HCC_S, HCC_R, ACC_S, ACC_R
      INTEGER, DIMENSION(5) :: Sizes
      HCC_S = 1
      HCC_R = 1
      ACC_S = 1
      ACC_R = 1
      
C Initialize the variables that are used in communication with TRNSYS when
C co-simulation is active.      
      call InitializeCosimDataTypes


C Component by component, call routine to deal with relevant type
      DO 10 IPCOMP=1,NPCOMP
      ITYPE=NPCDAT(IPCOMP,4)
      IF(ITYPE.EQ.1) THEN
         CALL CMP01S(IPCOMP)
      ELSE IF(ITYPE.EQ.2) THEN
         CALL CMP02S(IPCOMP)
      ELSE IF(ITYPE.EQ.3) THEN
         CALL CMP03S(IPCOMP)
      ELSE IF(ITYPE.EQ.4) THEN
         CALL CMP04S(IPCOMP)
      ELSE IF(ITYPE.EQ.5) THEN
         CALL CMP05S(IPCOMP)
      ELSE IF(ITYPE.EQ.6) THEN
         CALL CMP06S(IPCOMP)
      ELSE IF(ITYPE.EQ.7) THEN
         CALL CMP07S(IPCOMP)
      ELSE IF(ITYPE.EQ.8) THEN
         CALL CMP08S(IPCOMP)
      ELSE IF(ITYPE.EQ.9) THEN
         CALL CMP09S(IPCOMP)
      ELSE IF(ITYPE.EQ.10) THEN
         CALL CMP10S(IPCOMP)
      ELSE IF(ITYPE.EQ.11) THEN
         CALL CMP11S(IPCOMP)
      ELSE IF(ITYPE.EQ.12) THEN
         CALL CMP12S(IPCOMP)
      ELSE IF(ITYPE.EQ.13) THEN
         CALL CMP13S(IPCOMP)
      ELSE IF(ITYPE.EQ.14) THEN
         CALL CMP14S(IPCOMP)
      ELSE IF(ITYPE.EQ.15) THEN
         CALL CMP15S(IPCOMP)
      ELSE IF(ITYPE.EQ.20) THEN
         CALL CMP20S(IPCOMP)
      ELSE IF(ITYPE.EQ.21) THEN
         CALL CMP21S(IPCOMP)
      ELSE IF(ITYPE.EQ.22) THEN
         CALL CMP22S(IPCOMP)
      ELSE IF(ITYPE.EQ.23) THEN
         CALL CMP23S(IPCOMP)
      ELSE IF(ITYPE.EQ.24) THEN
         CALL CMP24S(IPCOMP)
      ELSE IF(ITYPE.EQ.25) THEN
         CALL CMP25S(IPCOMP)
      ELSE IF(ITYPE.EQ.26) THEN
         CALL CMP26S(IPCOMP)
      ELSE IF(ITYPE.EQ.27) THEN
         CALL CMP27S(IPCOMP)
      ELSE IF(ITYPE.EQ.28) THEN
         CALL CMP28S(IPCOMP)
      ELSE IF(ITYPE.EQ.29) THEN
         CALL CMP29S(IPCOMP)
      ELSE IF(ITYPE.EQ.30) THEN
         CALL CMP30S(IPCOMP)
      ELSE IF(ITYPE.EQ.31) THEN
         CALL CMP31S(IPCOMP)
      ELSE IF(ITYPE.EQ.32) THEN
         CALL CMP32S(IPCOMP)
      ELSE IF(ITYPE.EQ.33) THEN
         CALL CMP33S(IPCOMP)
      ELSE IF(ITYPE.EQ.34) THEN
         CALL CMP34S(IPCOMP)
      ELSE IF(ITYPE.EQ.35) THEN
         CALL CMP35S(IPCOMP)
      ELSE IF(ITYPE.EQ.36) THEN
         CALL CMP36S(IPCOMP)
      ELSE IF(ITYPE.EQ.37) THEN
         CALL CMP37S(IPCOMP)
      ELSE IF(ITYPE.EQ.38) THEN
         CALL CMP38S(IPCOMP)
      ELSE IF(ITYPE.EQ.39) THEN
         CALL CMP39S(IPCOMP)
      ELSE IF(ITYPE.EQ.40) THEN
         CALL CMP40S(IPCOMP)
      ELSE IF(ITYPE.EQ.41) THEN
         CALL CMP41S(IPCOMP)
      ELSE IF(ITYPE.EQ.42) THEN
         CALL CMP42S(IPCOMP)
      ELSE IF(ITYPE.EQ.43) THEN
         CALL CMP43S(IPCOMP)
      ELSE IF(ITYPE.EQ.44) THEN
         CALL CMP44S(IPCOMP)
      ELSE IF(ITYPE.EQ.45) THEN
         CALL CMP45S(IPCOMP)
      ELSE IF(ITYPE.EQ.46) THEN
         CALL CMP46S(IPCOMP)
      ELSE IF(ITYPE.EQ.50) THEN
         CALL CMP50S(IPCOMP)
      ELSE IF(ITYPE.EQ.51) THEN
         CALL CMP51S(IPCOMP)
      ELSE IF(ITYPE.EQ.52) THEN
         CALL CMP52S(IPCOMP)
      ELSE IF(ITYPE.EQ.53) THEN
         CALL CMP53S(IPCOMP)
      ELSE IF(ITYPE.EQ.54) THEN
         CALL CMP54S(IPCOMP)
      ELSE IF(ITYPE.EQ.55) THEN
         CALL CMP55S(IPCOMP)
      ELSE IF(ITYPE.EQ.56) THEN
         CALL CMP56S(IPCOMP)
      ELSE IF(ITYPE.EQ.57) THEN
         CALL CMP57S(IPCOMP)
      ELSE IF(ITYPE.EQ.58) THEN
         CALL CMP58S(IPCOMP)
      ELSE IF(ITYPE.EQ.60) THEN
         CALL CMP60S(IPCOMP)
      ELSE IF(ITYPE.EQ.64) THEN
         CALL CMP64S(IPCOMP)
      ELSE IF(ITYPE.EQ.65) THEN
         CALL CMP65S(IPCOMP)
      ELSE IF(ITYPE.EQ.66) THEN
         CALL CMP66S(IPCOMP)
      ELSE IF(ITYPE.EQ.68) THEN
         CALL CMP68S(IPCOMP)
      ELSE IF(ITYPE.EQ.67) THEN
         CALL CMP67S(IPCOMP)
      ELSE IF(ITYPE.EQ.70) THEN
         CALL CMP70S(IPCOMP)
      ELSE IF(ITYPE.EQ.71) THEN
         CALL CMP71S(IPCOMP)
      ELSE IF(ITYPE.EQ.72) THEN
         CALL CMP72S(IPCOMP)
      ELSE IF(ITYPE.EQ.79) THEN
         CALL CMP79S(IPCOMP)
      ELSE IF(ITYPE.EQ.80) THEN
         CALL FC_static_template(IPCOMP)
      ELSE IF(ITYPE.EQ.81) THEN
         CALL FC_tank_fuel_static_temp(IPCOMP)
      ELSE IF(ITYPE.EQ.82) THEN
         CALL FC_tank_elec_static_temp(IPCOMP)
      ELSE IF(ITYPE.EQ.83) THEN
         CALL AIMS_tank1_fuel_static_temp(IPCOMP)
      ELSE IF(ITYPE.EQ.84) THEN
         CALL TAC_1_static_template(IPCOMP)
      ELSE IF(ITYPE.EQ.85) THEN
         CALL TAC_coldtank_static_temp(IPCOMP)
      ELSE IF(ITYPE.EQ.86) THEN
         CALL PEM_static_template(IPCOMP)
      ELSE IF(ITYPE.EQ.90) THEN
         CALL CMP90S(IPCOMP)
      ELSE IF(ITYPE.EQ.91) THEN
         CALL CMP91S(IPCOMP)
      ELSE IF(ITYPE.EQ.92) THEN
         CALL CMP92S(IPCOMP)
      ELSE IF(ITYPE.EQ.93) THEN
         CALL CMP93S(IPCOMP)
      ELSE IF(ITYPE.EQ.94) THEN
         CALL CMP94S(IPCOMP)
      ELSE IF(ITYPE.EQ.95) THEN
C radiant heating/cooling system
         CALL RadFloor_StaticTemp(IPCOMP)
      ELSE IF(ITYPE.EQ.98) THEN
         CALL CMP98S(IPCOMP)
      ELSE IF(ITYPE.EQ.99) THEN
         CALL CMP99S(IPCOMP)
      ELSE IF(ITYPE.EQ. 87
     &  .OR. ITYPE .EQ. 89
     &  .OR. ITYPE .EQ. 100
     &  .OR. ITYPE .EQ. 101
     &  .OR. ITYPE .EQ. 102
     &  .OR. ITYPE .EQ. 103
     &  .OR. ITYPE .EQ. 105
     &  .OR. ITYPE .EQ. 106
     &  .OR. ITYPE .EQ. 107 
     &  .OR. ITYPE .EQ. 108
     &  .OR. ITYPE .EQ. 109 
     &  .OR. ITYPE .EQ. 110 ) THEN
C Generic syntax checker for coefficient generator
         CALL HVAC_model_static_temp(IPCOMP)
      ELSE IF ( ( iType .eq. 88 ) .or.
     &          ( iType .EQ. 125 ) ) then
C Hydrogen compressor static template
         call H2_comp_static_template (iPComp)
      ELSE IF( ITYPE .EQ. 104 ) THEN
C 3 node electrolyser_model
         CALL H2_electrolyser_static_temp(IPCOMP)
      ELSE IF(ITYPE.EQ.111) THEN
         CALL SOFC_A42_static(IPCOMP)
      ELSE IF(ITYPE.EQ.112) THEN
C 3-node residential SOFC
         CALL FC_static_template(IPCOMP)
C Gas-fired storage tank with 3 connections
      ELSE IF(ITYPE.EQ.113) THEN
         CALL ADS_tank_fuel_static_temp(IPCOMP)
C Electric storage tank with 3 connections
      ELSE IF(ITYPE.EQ.114) THEN
         CALL ADS_tank_elec_static_temp(IPCOMP)
C Adsorption storage unit
      ELSE IF(ITYPE.EQ.115) THEN
         CALL ADS_stg_static_template(IPCOMP)
C Pressurized WCH pipe
      ELSE IF(ITYPE.EQ.116) THEN
         CALL Press_WCH_pipe_static_temp(IPCOMP)
C Pressurized WCH pump
      ELSE IF(ITYPE.EQ.117) THEN
         CALL Press_WCH_pump_static_temp(IPCOMP)
C 1 node simple solar collector model
      ELSE IF(ITYPE.EQ.118) THEN
         CALL simple_solar_coll_static(IPCOMP)
C X node generic TRNSYS type
      ELSE IF(ITYPE.EQ.119) THEN
         CALL trnsys_static_temp(IPCOMP)
      ELSE IF(ITYPE.EQ.120) THEN
C 2-node storage tank with immersed coil
         CALL tank_intank_hx_static(IPCOMP)
      ELSE IF(ITYPE.EQ.121) THEN
C 1-node mains 24-hour flow rate and 12-hour temperature profiles
         CALL mains_temp_draw_profile_static(IPCOMP) 
C 1-node mains 24-hour flow rate profile
      ELSE IF(ITYPE.EQ.122) THEN
         CALL mains_draw_daily_profile_static(IPCOMP)
C 2-node stratified storage tank model
      ELSE IF(ITYPE.EQ.123) THEN
         CALL stratified_tank_static(IPCOMP)
C 2-node NCHE (natural convection heat exchanger) model
      ELSE IF(ITYPE.EQ.124) THEN
         CALL NCHE_static_template(IPCOMP)
C 2-node stratified storage tank model with 1 immersed heat exchanger
      ELSE IF(ITYPE.EQ.126) THEN
         CALL stratified_tank_1HX_static(IPCOMP)
C 3-node stratified storage tank model with 2 immersed heat exchangers
      ELSE IF(ITYPE.EQ.127) THEN
         CALL stratified_tank_2HX_static(IPCOMP)
C Hydronic sending coupling component (HCC-S) for co-simulation with TRNSYS.
      ELSE IF (ITYPE .EQ. 130) THEN
         CALL TCC_static(IPCOMP, HCC_S, HCC, .true.)
         HCC_S = HCC_S+1
C Hydronic receiving coupling component (HCC-R) for co-simulation with TRNSYS.
      ELSE IF (ITYPE .EQ. 131) THEN
         CALL TCC_static(IPCOMP, HCC_R, HCC, .false.)
         HCC_R = HCC_R+1
C Air-based sending coupling component (HCC-S) for co-simulation with TRNSYS.
      ELSE IF (ITYPE .EQ. 132) THEN
         CALL TCC_static(IPCOMP, ACC_S, ACC, .true.)
         ACC_S = ACC_S+1
C Air-based receiving coupling component (HCC-R) for co-simulation with TRNSYS.
      ELSE IF (ITYPE .EQ. 133) THEN
         CALL TCC_static(IPCOMP, ACC_R, ACC, .false.)
         ACC_R = ACC_R+1
      ELSE
        WRITE(IUOUT,*) ' No static template for component ',IPCOMP,ITYPE
        STOP ' MZSDAT: unresolvable error on component type'
      END IF
   10 CONTINUE

C When co-simulation with TRNSYS is active, the Harmonizer needs to know how many of
C each type of coupling there is with TRNSYS. It also needs to know the number of building
C zones in the model.
      Sizes(1) = HCC_S-1
      Sizes(2) = HCC_R-1
      Sizes(3) = ACC_S-1
      Sizes(4) = ACC_R-1
      Sizes(5) = nComp
      call SetArraySizes(Sizes)

      RETURN
      END

C ******************** CMP01S ********************
C
C CMP01S establishes for a plant component with plant db code 10 ie.
C 1 node (ISV=21) AC  converging 2-leg junction
C whether the number of connections to this component is correct
C and whether the connected nodes are of a type as expected by the
C corresponding coefficient generator routine

      SUBROUTINE CMP01S(IPCOMP)
#include "plant.h"
#include "building.h"

      COMMON/OUTIN/IUOUT,IUIN
      COMMON/TC/ITC,ICNT
      COMMON/TRACE/ITCF,ITRACE(MTRACE),IZNTRC(MCOM),ITU

      COMMON/C9/NPCOMP,NCI(MPCOM),CDATA(MPCOM,MMISCD)
      COMMON/PDBDT/ADATA(MPCOM,MADATA),BDATA(MPCOM,MBDATA)
      COMMON/PCOND/CONVAR(MPCON,MCONVR),ICONTP(MPCON),
     &             ICONDX(MPCOM,MNODEC,MPCONC)

C Trace output
      IF(ITC.GT.0.AND.ITRACE(35).NE.0) THEN
         WRITE(ITU,*) ' Component ',IPCOMP,' pre-simulation data for a:'
         WRITE(ITU,*) ' 1 node (ISV=21) AC  converging 2-leg junction'
         NITMS=3
         WRITE(ITU,*) ' ADATA ',(ADATA(IPCOMP,J),J=1,NITMS)
         IF(ITU.EQ.IUOUT) THEN
            IX1=(IPCOMP/5)*5
            IF(IX1.EQ.IPCOMP.OR.IPCOMP.EQ.NPCOMP) call epagew
         END IF
      END IF

C Check user specified number of controlled variables
      NCITM=0
      IF(NCI(IPCOMP).NE.NCITM)
     &   WRITE(ITU,*) ' CMP01S warning: user specified wrong number',
     &                ' of controlled variables'

C Check component has 2 connections only, both to "moist air"
      NCONS=2
      DO 10 IPCONC=1,MPCONC
      IPCON=ICONDX(IPCOMP,1,IPCONC)
      IF(IPCONC.LE.NCONS) THEN
         IF(IPCON.EQ.0) THEN
            GOTO 990
         ELSE IF(ICONTP(IPCON).NE.21) THEN
            GOTO 990
         END IF
      ELSE IF(IPCON.NE.0) THEN
         GOTO 990
      END IF
   10 CONTINUE

      RETURN

C Error handling
  990 WRITE(IUOUT,*) ' CMP01S: connection error for component ',IPCOMP
      WRITE(IUOUT,*) '         should be ',NCONS,' connection(s) to air'
      STOP ' CMP01S: unresolvable error'

      END

C ******************** CMP02S ********************
C CMP02S establishes for a plant component with plant db code 20 ie.
C 1 node (ISV=21) AC  humidifier
C whether the specified number of controlled variables is OK, and also
C whether the number of connections to this component is correct
C and whether the connected nodes are of a type as expected by the
C corresponding coefficient generator routine
C
      SUBROUTINE CMP02S(IPCOMP)
#include "plant.h"
#include "building.h"
C
      COMMON/OUTIN/IUOUT,IUIN
      COMMON/TC/ITC,ICNT
      COMMON/TRACE/ITCF,ITRACE(MTRACE),IZNTRC(MCOM),ITU
C
      COMMON/C9/NPCOMP,NCI(MPCOM),CDATA(MPCOM,MMISCD)
      COMMON/PDBDT/ADATA(MPCOM,MADATA),BDATA(MPCOM,MBDATA)
      COMMON/PCOND/CONVAR(MPCON,MCONVR),ICONTP(MPCON),
     &             ICONDX(MPCOM,MNODEC,MPCONC)
C
C Establish static data derivable from the data read from database
      BDATA(IPCOMP,1)=ADATA(IPCOMP,4)
      BDATA(IPCOMP,2)=ADATA(IPCOMP,5)
      BDATA(IPCOMP,3)=ADATA(IPCOMP,6)
      BDATA(IPCOMP,4)=ADATA(IPCOMP,7)
C Trace output
      IF(ITC.GT.0.AND.ITRACE(35).NE.0) THEN
         WRITE(ITU,*) ' Component ',IPCOMP,' pre-simulation data for a:'
         WRITE(ITU,*) ' 1 node (ISV=21) AC  humidifier adiabatic'
         NITMS=3
         WRITE(ITU,*) ' ADATA ',(ADATA(IPCOMP,J),J=1,NITMS)
         NITMS=4
         WRITE(ITU,*) ' BDATA ',(BDATA(IPCOMP,J),J=1,NITMS)
         NITMS=1
         WRITE(ITU,*) ' CDATA ',(CDATA(IPCOMP,J),J=1,NITMS)
         IF(ITU.EQ.IUOUT) THEN
            IX1=(IPCOMP/5)*5
            IF(IX1.EQ.IPCOMP.OR.IPCOMP.EQ.NPCOMP) call epagew
         END IF
      END IF
C
C Check user specified number of controlled variables
      NCITM=1
      IF(NCI(IPCOMP).NE.NCITM)
     &   WRITE(ITU,*) ' CMP02S warning: user specified wrong number',
     &                ' of controlled variables'
C
C Check component has 1 connection only, to "moist air"
      NCONS=1
      DO 10 IPCONC=1,MPCONC
      IPCON=ICONDX(IPCOMP,1,IPCONC)
      IF(IPCONC.LE.NCONS) THEN
         IF(IPCON.EQ.0) THEN
            GOTO 990
         ELSE IF(ICONTP(IPCON).NE.21) THEN
            GOTO 990
         END IF
      ELSE IF(IPCON.NE.0) THEN
         GOTO 990
      END IF
   10 CONTINUE
C
C
      RETURN
C
C Error handling
  990 WRITE(IUOUT,*) ' CMP02S: connection error for component ',IPCOMP
      WRITE(IUOUT,*) '         should be ',NCONS,' connection(s) to air'
      STOP ' CMP02S: unresolvable error'
C
      END
C
C ******************** CMP03S ********************
C
C CMP03S establishes for a plant component with plant db code 30 ie.
C 1 node (ISV=21) AC  fan
C whether the specified number of controlled variables is OK, and also
C whether the number of connections to this component is correct
C and whether the connected nodes are of a type as expected by the
C corresponding coefficient generator routine
C
      SUBROUTINE CMP03S(IPCOMP)
#include "plant.h"
#include "building.h"
C
      COMMON/OUTIN/IUOUT,IUIN
      COMMON/TC/ITC,ICNT
      COMMON/TRACE/ITCF,ITRACE(MTRACE),IZNTRC(MCOM),ITU
C
      COMMON/C9/NPCOMP,NCI(MPCOM),CDATA(MPCOM,MMISCD)
      COMMON/PDBDT/ADATA(MPCOM,MADATA),BDATA(MPCOM,MBDATA)
      COMMON/PCOND/CONVAR(MPCON,MCONVR),ICONTP(MPCON),
     &             ICONDX(MPCOM,MNODEC,MPCONC)
C
C Establish static data derivable from the data read from database
      BDATA(IPCOMP,1)=ADATA(IPCOMP,4)
      BDATA(IPCOMP,2)=ADATA(IPCOMP,5)
      BDATA(IPCOMP,3)=ADATA(IPCOMP,6)
C
C Trace output
      IF(ITC.GT.0.AND.ITRACE(35).NE.0) THEN
         WRITE(ITU,*) ' Component ',IPCOMP,' pre-simulation data for a:'
         WRITE(ITU,*) ' 1 node (ISV=21) AC  fan'
         NITMS=3
         WRITE(ITU,*) ' ADATA ',(ADATA(IPCOMP,J),J=1,NITMS)
         NITMS=3
         WRITE(ITU,*) ' BDATA ',(BDATA(IPCOMP,J),J=1,NITMS)
         NITMS=1
         WRITE(ITU,*) ' CDATA ',(CDATA(IPCOMP,J),J=1,NITMS)
         IF(ITU.EQ.IUOUT) THEN
            IX1=(IPCOMP/5)*5
            IF(IX1.EQ.IPCOMP.OR.IPCOMP.EQ.NPCOMP) call epagew
         END IF
      END IF
C
C Check user specified number of controlled variables
      NCITM=1
      IF(NCI(IPCOMP).NE.NCITM)
     &   WRITE(ITU,*) ' CMP03S warning: user specified wrong number',
     &                ' of controlled variables'
C
C Check component has 1 connection only, to "moist air"
      NCONS=1
      DO 10 IPCONC=1,MPCONC
      IPCON=ICONDX(IPCOMP,1,IPCONC)
      IF(IPCONC.LE.NCONS) THEN
         IF(IPCON.EQ.0) THEN
            GOTO 990
         ELSE IF(ICONTP(IPCON).NE.21) THEN
            GOTO 990
         END IF
      ELSE IF(IPCON.NE.0) THEN
         GOTO 990
      END IF
   10 CONTINUE
C
C
      RETURN
C
C Error handling
  990 WRITE(IUOUT,*) ' CMP03S: connection error for component ',IPCOMP
      WRITE(IUOUT,*) '         should be ',NCONS,' connection(s) to air'
      STOP ' CMP03S: unresolvable error'
C
      END
C
C ******************** CMP04S ********************
C
C CMP04S establishes for a plant component with plant db code 40 ie.
C 1 node (ISV=21) AC  cooling coil & flux control
C data derivable from the static manufacturers data already read from
C the database and saves it in the static data common block, and also
C whether the specified number of controlled variables is OK, and also
C whether the number of connections to this component is correct
C and whether the connected nodes are of a type as expected by the
C corresponding coefficient generator routine
C
      SUBROUTINE CMP04S(IPCOMP)
#include "plant.h"
#include "building.h"
C
      COMMON/OUTIN/IUOUT,IUIN
      COMMON/TC/ITC,ICNT
      COMMON/TRACE/ITCF,ITRACE(MTRACE),IZNTRC(MCOM),ITU
C
      COMMON/C9/NPCOMP,NCI(MPCOM),CDATA(MPCOM,MMISCD)
      COMMON/PDBDT/ADATA(MPCOM,MADATA),BDATA(MPCOM,MBDATA)
      COMMON/PCOND/CONVAR(MPCON,MCONVR),ICONTP(MPCON),
     &             ICONDX(MPCOM,MNODEC,MPCONC)
C
C Negate CDATA(?,1) as this component is a cooling coil
C and CDATA(?,1) relates to the maximum cooling energy.
      CDATA(IPCOMP,1)=-CDATA(IPCOMP,1)
C
C Trace output
      IF(ITC.GT.0.AND.ITRACE(35).NE.0) THEN
         WRITE(ITU,*) ' Component ',IPCOMP,' pre-simulation data for a:'
         WRITE(ITU,*) ' 1 node (ISV=21) AC  cooling coil &',
     &                ' water mass flow rate control'
         NITMS=3
         WRITE(ITU,*) ' ADATA ',(ADATA(IPCOMP,J),J=1,NITMS)
         NITMS=1
         WRITE(ITU,*) ' CDATA ',(CDATA(IPCOMP,J),J=1,NITMS)
         IF(ITU.EQ.IUOUT) THEN
            IX1=(IPCOMP/5)*5
            IF(IX1.EQ.IPCOMP.OR.IPCOMP.EQ.NPCOMP) call epagew
         END IF
      END IF
C
C Check user specified number of controlled variables
      NCITM=1
      IF(NCI(IPCOMP).NE.NCITM)
     &   WRITE(ITU,*) ' CMP04S warning: user specified wrong number',
     &                ' of controlled variables'
C
C Check component has 1 connection only, to "moist air"
      NCONS=1
      DO 10 IPCONC=1,MPCONC
      IPCON=ICONDX(IPCOMP,1,IPCONC)
      IF(IPCONC.LE.NCONS) THEN
         IF(IPCON.EQ.0) THEN
            GOTO 990
         ELSE IF(ICONTP(IPCON).NE.21) THEN
            GOTO 990
         END IF
      ELSE IF(IPCON.NE.0) THEN
         GOTO 990
      END IF
   10 CONTINUE
C
C
      RETURN
C
C Error handling
  990 WRITE(IUOUT,*) ' CMP04S: connection error for component ',IPCOMP
      WRITE(IUOUT,*) '         should be ',NCONS,' connection(s) to air'
      STOP ' CMP04S: unresolvable error'
C
      END
C
C ******************** CMP05S ********************
C
C CMP05S establishes for a plant component with plant db code 50 ie.
C 1 node (ISV=21) AC  heating coil & flux control
C data derivable from the static manufacturers data already read from
C the database and saves it in the static data common block, and also
C whether the specified number of controlled variables is OK, and also
C whether the number of connections to this component is correct
C and whether the connected nodes are of a type as expected by the
C corresponding coefficient generator routine
C
      SUBROUTINE CMP05S(IPCOMP)
#include "plant.h"
#include "building.h"
C
      COMMON/OUTIN/IUOUT,IUIN
      COMMON/TC/ITC,ICNT
      COMMON/TRACE/ITCF,ITRACE(MTRACE),IZNTRC(MCOM),ITU
C
      COMMON/C9/NPCOMP,NCI(MPCOM),CDATA(MPCOM,MMISCD)
      COMMON/PDBDT/ADATA(MPCOM,MADATA),BDATA(MPCOM,MBDATA)
      COMMON/PCOND/CONVAR(MPCON,MCONVR),ICONTP(MPCON),
     &             ICONDX(MPCOM,MNODEC,MPCONC)
C
C Trace output
      IF(ITC.GT.0.AND.ITRACE(35).NE.0) THEN
         WRITE(ITU,*) ' Component ',IPCOMP,' pre-simulation data for a:'
         WRITE(ITU,*) ' 1 node (ISV=21) AC  heating coil & water',
     &                ' mass flow rate control'
         NITMS=3
         WRITE(ITU,*) ' ADATA ',(ADATA(IPCOMP,J),J=1,NITMS)
         NITMS=1
         WRITE(ITU,*) ' CDATA ',(CDATA(IPCOMP,J),J=1,NITMS)
         IF(ITU.EQ.IUOUT) THEN
            IX1=(IPCOMP/5)*5
            IF(IX1.EQ.IPCOMP.OR.IPCOMP.EQ.NPCOMP) call epagew
         END IF
      END IF
C
C Check user specified number of controlled variables
      NCITM=1
      IF(NCI(IPCOMP).NE.NCITM)
     &   WRITE(ITU,*) ' CMP05S warning: user specified wrong number',
     &                ' of controlled variables'
C
C Check component has 1 connection only, to "moist air"
      NCONS=1
      DO 10 IPCONC=1,MPCONC
      IPCON=ICONDX(IPCOMP,1,IPCONC)
      IF(IPCONC.LE.NCONS) THEN
         IF(IPCON.EQ.0) THEN
            GOTO 990
         ELSE IF(ICONTP(IPCON).NE.21) THEN
            GOTO 990
         END IF
      ELSE IF(IPCON.NE.0) THEN
         GOTO 990
      END IF
   10 CONTINUE
C
C
      RETURN
C
C Error handling
  990 WRITE(IUOUT,*) ' CMP05S: connection error for component ',IPCOMP
      WRITE(IUOUT,*) '         should be ',NCONS,' connection(s) to air'
      STOP ' CMP05S: unresolvable error'
C
      END

C ******************** CMP06S ********************

C CMP06S establishes for a plant component with plant db code 20 ie.
C 1 node (ISV=21) AC  duct & condensation ?
C whether the specified number of controlled variables is OK, and also
C whether the number of connections to this component is correct
C and whether the connected nodes are of a type as expected by the
C corresponding coefficient generator routine

      SUBROUTINE CMP06S(IPCOMP)
#include "plant.h"
#include "building.h"

      COMMON/OUTIN/IUOUT,IUIN
      COMMON/TC/ITC,ICNT
      COMMON/TRACE/ITCF,ITRACE(MTRACE),IZNTRC(MCOM),ITU

      COMMON/C9/NPCOMP,NCI(MPCOM),CDATA(MPCOM,MMISCD)
      COMMON/PDBDT/ADATA(MPCOM,MADATA),BDATA(MPCOM,MBDATA)
      COMMON/PCOND/CONVAR(MPCON,MCONVR),ICONTP(MPCON),
     &             ICONDX(MPCOM,MNODEC,MPCONC)

C Trace output
      IF(ITC.GT.0.AND.ITRACE(35).NE.0) THEN
         WRITE(ITU,*) ' Component ',IPCOMP,' pre-simulation data for a:'
         WRITE(ITU,*) ' 1 node (ISV=21) AC  duct & condensation ?'
         NITMS=6
         WRITE(ITU,*) ' ADATA ',(ADATA(IPCOMP,J),J=1,NITMS)
         IF(ITU.EQ.IUOUT) THEN
            IX1=(IPCOMP/5)*5
            IF(IX1.EQ.IPCOMP.OR.IPCOMP.EQ.NPCOMP) call epagew
         END IF
      END IF

C Check user specified number of controlled variables
      NCITM=0
      IF(NCI(IPCOMP).NE.NCITM)
     &   WRITE(ITU,*) ' CMP06S warning: user specified wrong number',
     &                ' of controlled variables'

C Check component has 1 connection only, to "moist air"
      NCONS=1
      DO 10 IPCONC=1,MPCONC
      IPCON=ICONDX(IPCOMP,1,IPCONC)
      IF(IPCONC.LE.NCONS) THEN
         IF(IPCON.EQ.0) THEN
            GOTO 990
         ELSE IF(ICONTP(IPCON).NE.21) THEN
            GOTO 990
         END IF
      ELSE IF(IPCON.NE.0) THEN
         GOTO 990
      END IF
   10 CONTINUE


      RETURN

C Error handling
  990 WRITE(IUOUT,*) ' CMP06S: connection error for component ',IPCOMP
      WRITE(IUOUT,*) '   should be ',NCONS,' connection(s) to air'
      WRITE(IUOUT,*) '   found ',IPCON,'.'
      STOP ' CMP06S: unresolvable error'

      END

C ******************** CMP07S ********************
C
C CMP07S establishes for a plant component with plant db code 70 ie.
C 1 node (ISV=21) AC  damper & flow ratio control
C whether the specified number of controlled variables is OK, and also
C whether the number of connections to this component is correct
C and whether the connected nodes are of a type as expected by the
C corresponding coefficient generator routine
C
      subroutine cmp07s(ipcomp)
#include "plant.h"
#include "building.h"
C
      COMMON/OUTIN/IUOUT,IUIN
      COMMON/TC/ITC,ICNT
      COMMON/TRACE/ITCF,ITRACE(MTRACE),IZNTRC(MCOM),ITU
C
      COMMON/C9/NPCOMP,NCI(MPCOM),CDATA(MPCOM,MMISCD)
      COMMON/PDBDT/ADATA(MPCOM,MADATA),BDATA(MPCOM,MBDATA)
      COMMON/PCOND/CONVAR(MPCON,MCONVR),ICONTP(MPCON),
     &             ICONDX(MPCOM,MNODEC,MPCONC)
C
C Trace output
      IF(ITC.GT.0.AND.ITRACE(35).NE.0) THEN
         WRITE(ITU,*) ' Component ',IPCOMP,' pre-simulation data for a:'
         WRITE(ITU,*) ' 1 node (ISV=21) AC  damper & flow ratio control'
         NITMS=3
         WRITE(ITU,*) ' ADATA ',(ADATA(IPCOMP,J),J=1,NITMS)
         IF(ITU.EQ.IUOUT) THEN
            IX1=(IPCOMP/5)*5
            IF(IX1.EQ.IPCOMP.OR.IPCOMP.EQ.NPCOMP) call epagew
         END IF
      END IF
C
C Check user specified number of controlled variables
      NCITM=1
      IF(NCI(IPCOMP).NE.NCITM)
     &   WRITE(ITU,*) ' cmp07s warning: user specified wrong number',
     &                ' of controlled variables'
C
C Check component has 1 connection only, to "moist air"
      NCONS=1
      DO 10 IPCONC=1,MPCONC
      IPCON=ICONDX(IPCOMP,1,IPCONC)
      IF(IPCONC.LE.NCONS) THEN
         IF(IPCON.EQ.0) THEN
            GOTO 990
         ELSE IF(ICONTP(IPCON).NE.21) THEN
            GOTO 990
         END IF
      ELSE IF(IPCON.NE.0) THEN
         GOTO 990
      END IF
   10 CONTINUE

C Return to calling module
      RETURN
C Error handling
  990 WRITE(IUOUT,*) ' cmp07s: connection error for component ',IPCOMP
      WRITE(IUOUT,*) '         should be ',NCONS,' connection(s) to air'
      STOP ' cmp07s: unresolvable error'
      END

C ******************** CMP08S ********************
C
C CMP08S establishes for a plant component with plant db code 80 ie.
C 1 node (ISV=21) AC flow diversion damper
C whether the specified number of controlled variables is OK, and also
C whether the number of connections to this component is correct
C and whether the connected nodes are of a type as expected by the
C corresponding coefficient generator routine
C
      subroutine cmp08s(ipcomp)
#include "plant.h"
#include "building.h"
C
      COMMON/OUTIN/IUOUT,IUIN
      COMMON/TC/ITC,ICNT
      COMMON/TRACE/ITCF,ITRACE(MTRACE),IZNTRC(MCOM),ITU
C
      COMMON/C9/NPCOMP,NCI(MPCOM),CDATA(MPCOM,MMISCD)
      COMMON/PDBDT/ADATA(MPCOM,MADATA),BDATA(MPCOM,MBDATA)
      COMMON/PCOND/CONVAR(MPCON,MCONVR),ICONTP(MPCON),
     &             ICONDX(MPCOM,MNODEC,MPCONC)
C
C Trace output
      IF(ITC.GT.0.AND.ITRACE(35).NE.0) THEN
         WRITE(ITU,*) ' Component ',IPCOMP,' pre-simulation data for a:'
         WRITE(ITU,*) ' 1 node (ISV=21) AC  flow diversion damper'
         NITMS=4
         WRITE(ITU,*) ' ADATA ',(ADATA(IPCOMP,J),J=1,NITMS)
         IF(ITU.EQ.IUOUT) THEN
            IX1=(IPCOMP/5)*5
            IF(IX1.EQ.IPCOMP.OR.IPCOMP.EQ.NPCOMP) call epagew
         END IF
      END IF
C
C Check user specified number of controlled variables
      NCITM=1
      IF(NCI(IPCOMP).NE.NCITM)
     &   WRITE(ITU,*) ' cmp08s warning: user specified wrong number',
     &                ' of controlled variables'
C
C Check component has 1 connection only, to "moist air"
      NCONS=1
      DO 10 IPCONC=1,MPCONC
      IPCON=ICONDX(IPCOMP,1,IPCONC)
      IF(IPCONC.LE.NCONS) THEN
         IF(IPCON.EQ.0) THEN
            GOTO 990
         ELSE IF(ICONTP(IPCON).NE.21) THEN
            GOTO 990
         END IF
      ELSE IF(IPCON.NE.0) THEN
         GOTO 990
      END IF
   10 CONTINUE

C Return to calling module
      RETURN
C Error handling
  990 WRITE(IUOUT,*) ' cmp08s: connection error for component ',IPCOMP
      WRITE(IUOUT,*) '         should be ',NCONS,' connection(s) to air'
      STOP ' cmp08s: unresolvable error'
      END
      
C ******************** CMP09S ********************
C
C CMP09S establishes for a plant component with plant db code 90 ie.
C 1 node (ISV=21) AC  cooling coil & water mass flow rate control
C data derivable from the static manufacturers data already read from
C the database and saves it in the static data common block, and also
C whether the specified number of controlled variables is OK, and also
C whether the number of connections to this component is correct
C and whether the connected nodes are of a type as expected by the
C corresponding coefficient generator routine
C
      SUBROUTINE CMP09S(IPCOMP)
#include "plant.h"
#include "building.h"
C
      COMMON/OUTIN/IUOUT,IUIN
      COMMON/TC/ITC,ICNT
      COMMON/TRACE/ITCF,ITRACE(MTRACE),IZNTRC(MCOM),ITU
C
      COMMON/C9/NPCOMP,NCI(MPCOM),CDATA(MPCOM,MMISCD)
      COMMON/PDBDT/ADATA(MPCOM,MADATA),BDATA(MPCOM,MBDATA)
      COMMON/PCOND/CONVAR(MPCON,MCONVR),ICONTP(MPCON),
     &             ICONDX(MPCOM,MNODEC,MPCONC)

C Establish static data derivable from the data read from database
      BDATA(IPCOMP,1)=ADATA(IPCOMP,4)
      BDATA(IPCOMP,2)=ADATA(IPCOMP,5)
      BDATA(IPCOMP,3)=ADATA(IPCOMP,6)
      BDATA(IPCOMP,4)=ADATA(IPCOMP,7)
      BDATA(IPCOMP,5)=ADATA(IPCOMP,8)

C Trace output
      IF(ITC.GT.0.AND.ITRACE(35).NE.0) THEN
         WRITE(ITU,*) ' Component ',IPCOMP,' pre-simulation data for a:'
         WRITE(ITU,*) ' 1 node (ISV=21) AC  cooling coil &',
     &                ' water mass flow rate control'
         NITMS=3
         WRITE(ITU,*) ' ADATA ',(ADATA(IPCOMP,J),J=1,NITMS)
         NITMS=5
         WRITE(ITU,*) ' BDATA ',(BDATA(IPCOMP,J),J=1,NITMS)
         NITMS=1
         WRITE(ITU,*) ' CDATA ',(CDATA(IPCOMP,J),J=1,NITMS)
         IF(ITU.EQ.IUOUT) THEN
            IX1=(IPCOMP/5)*5
            IF(IX1.EQ.IPCOMP.OR.IPCOMP.EQ.NPCOMP) call epagew
         END IF
      END IF

C Check user specified number of controlled variables
      NCITM=1
      IF(NCI(IPCOMP).NE.NCITM)
     &   WRITE(ITU,*) ' CMP09S warning: user specified wrong number',
     &                ' of controlled variables'

C Check component has 1 connection only, to "moist air"
      NCONS=1
      DO 10 IPCONC=1,MPCONC
      IPCON=ICONDX(IPCOMP,1,IPCONC)
      IF(IPCONC.LE.NCONS) THEN
         IF(IPCON.EQ.0) THEN
            GOTO 990
         ELSE IF(ICONTP(IPCON).NE.21) THEN
            GOTO 990
         END IF
      ELSE IF(IPCON.NE.0) THEN
         GOTO 990
      END IF
   10 CONTINUE
      RETURN

C Error handling
  990 WRITE(IUOUT,*) ' CMP09S: connection error for component ',IPCOMP
      WRITE(IUOUT,*) '         should be ',NCONS,' connection(s) to air'
      STOP ' CMP09S: unresolvable error'
      END

C ******************** CMP10S ********************
C
C CMP10S establishes for a plant component with plant db code 100 ie.
C 1 node (ISV=21) AC  cooling coil & water mass flow rate control
C data derivable from the static manufacturers data already read from
C the database and saves it in the static data common block, and also
C whether the specified number of controlled variables is OK, and also
C whether the number of connections to this component is correct
C and whether the connected nodes are of a type as expected by the
C corresponding coefficient generator routine
C
      SUBROUTINE CMP10S(IPCOMP)
#include "plant.h"
#include "building.h"
C
      COMMON/OUTIN/IUOUT,IUIN
      COMMON/TC/ITC,ICNT
      COMMON/TRACE/ITCF,ITRACE(MTRACE),IZNTRC(MCOM),ITU
C
      COMMON/C9/NPCOMP,NCI(MPCOM),CDATA(MPCOM,MMISCD)
      COMMON/PDBDT/ADATA(MPCOM,MADATA),BDATA(MPCOM,MBDATA)
      COMMON/PCOND/CONVAR(MPCON,MCONVR),ICONTP(MPCON),
     &             ICONDX(MPCOM,MNODEC,MPCONC)
C
C Establish static data derivable from the data read from database
      BDATA(IPCOMP,1)=ADATA(IPCOMP,4)
      BDATA(IPCOMP,2)=ADATA(IPCOMP,5)
      BDATA(IPCOMP,3)=ADATA(IPCOMP,6)
      BDATA(IPCOMP,4)=ADATA(IPCOMP,7)
      BDATA(IPCOMP,5)=ADATA(IPCOMP,8)
      BDATA(IPCOMP,6)=ADATA(IPCOMP,9)
C
C Trace output
      IF(ITC.GT.0.AND.ITRACE(35).NE.0) THEN
         WRITE(ITU,*) ' Component ',IPCOMP,' pre-simulation data for a:'
         WRITE(ITU,*) ' 1 node (ISV=21) AC  cooling coil &',
     &                ' water mass flow rate control'
         NITMS=3
         WRITE(ITU,*) ' ADATA ',(ADATA(IPCOMP,J),J=1,NITMS)
         NITMS=6
         WRITE(ITU,*) ' BDATA ',(BDATA(IPCOMP,J),J=1,NITMS)
         NITMS=1
         WRITE(ITU,*) ' CDATA ',(CDATA(IPCOMP,J),J=1,NITMS)
         IF(ITU.EQ.IUOUT) THEN
            IX1=(IPCOMP/5)*5
            IF(IX1.EQ.IPCOMP.OR.IPCOMP.EQ.NPCOMP) call epagew
         END IF
      END IF
C
C Check user specified number of controlled variables
      NCITM=1
      IF(NCI(IPCOMP).NE.NCITM)
     &   WRITE(ITU,*) ' CMP10S warning: user specified wrong number',
     &                ' of controlled variables'
C
C Check component has 1 connection only, to "moist air"
      NCONS=1
      DO 10 IPCONC=1,MPCONC
      IPCON=ICONDX(IPCOMP,1,IPCONC)
      IF(IPCONC.LE.NCONS) THEN
         IF(IPCON.EQ.0) THEN
            GOTO 990
         ELSE IF(ICONTP(IPCON).NE.21) THEN
            GOTO 990
         END IF
      ELSE IF(IPCON.NE.0) THEN
         GOTO 990
      END IF
   10 CONTINUE
C
C
      RETURN
C
C Error handling
  990 WRITE(IUOUT,*) ' CMP10S: connection error for component ',IPCOMP
      WRITE(IUOUT,*) '         should be ',NCONS,' connection(s) to air'
      STOP ' CMP10S: unresolvable error'
C
      END
C
C ******************** CMP11S ********************
C
C CMP11S establishes for a plant component with plant db code 110 ie.
C 1 node (ISV=21) AC  heating coil & water mass flow rate control
C data derivable from the static manufacturers data already read from
C the database and saves it in the static data common block, and also
C whether the specified number of controlled variables is OK, and also
C whether the number of connections to this component is correct
C and whether the connected nodes are of a type as expected by the
C corresponding coefficient generator routine
C
      SUBROUTINE CMP11S(IPCOMP)
#include "plant.h"
#include "building.h"
C
      COMMON/OUTIN/IUOUT,IUIN
      COMMON/TC/ITC,ICNT
      COMMON/TRACE/ITCF,ITRACE(MTRACE),IZNTRC(MCOM),ITU
C
      COMMON/C9/NPCOMP,NCI(MPCOM),CDATA(MPCOM,MMISCD)
      COMMON/PDBDT/ADATA(MPCOM,MADATA),BDATA(MPCOM,MBDATA)
      COMMON/PCOND/CONVAR(MPCON,MCONVR),ICONTP(MPCON),
     &             ICONDX(MPCOM,MNODEC,MPCONC)
C
C Establish static data derivable from the data read from database
      BDATA(IPCOMP,1)=ADATA(IPCOMP,4)
      BDATA(IPCOMP,2)=ADATA(IPCOMP,5)
      BDATA(IPCOMP,3)=ADATA(IPCOMP,6)
      BDATA(IPCOMP,4)=ADATA(IPCOMP,7)
      BDATA(IPCOMP,5)=ADATA(IPCOMP,8)
      BDATA(IPCOMP,6)=ADATA(IPCOMP,9)
C
C Trace output
      IF(ITC.GT.0.AND.ITRACE(35).NE.0) THEN
         WRITE(ITU,*) ' Component ',IPCOMP,' pre-simulation data for a:'
         WRITE(ITU,*) ' 1 node (ISV=21) AC  heating coil & water',
     &                ' mass flow rate control'
         NITMS=3
         WRITE(ITU,*) ' ADATA ',(ADATA(IPCOMP,J),J=1,NITMS)
         NITMS=6
         WRITE(ITU,*) ' BDATA ',(BDATA(IPCOMP,J),J=1,NITMS)
         NITMS=1
         WRITE(ITU,*) ' CDATA ',(CDATA(IPCOMP,J),J=1,NITMS)
         IF(ITU.EQ.IUOUT) THEN
            IX1=(IPCOMP/5)*5
            IF(IX1.EQ.IPCOMP.OR.IPCOMP.EQ.NPCOMP) call epagew
         END IF
      END IF
C
C Check user specified number of controlled variables
      NCITM=1
      IF(NCI(IPCOMP).NE.NCITM)
     &   WRITE(ITU,*) ' CMP11S warning: user specified wrong number',
     &                ' of controlled variables'
C
C Check component has 1 connection only, to "moist air"
      NCONS=1
      DO 10 IPCONC=1,MPCONC
      IPCON=ICONDX(IPCOMP,1,IPCONC)
      IF(IPCONC.LE.NCONS) THEN
         IF(IPCON.EQ.0) THEN
            GOTO 990
         ELSE IF(ICONTP(IPCON).NE.21) THEN
            GOTO 990
         END IF
      ELSE IF(IPCON.NE.0) THEN
         GOTO 990
      END IF
   10 CONTINUE
C
C
      RETURN
C
C Error handling
  990 WRITE(IUOUT,*) ' CMP11S: connection error for component ',IPCOMP
      WRITE(IUOUT,*) '         should be ',NCONS,' connection(s) to air'
      STOP ' CMP11S: unresolvable error'
C
      END
C
C ******************** CMP12S ********************
C
C CMP12S establishes for a plant component with plant db code 120 ie.
C 2 node (ISV=21) AC  plate heat exchanger
C data derivable from the static manufacturers data already read from
C the database and saves it in the static data common block, and also
C whether the specified number of controlled variables is OK, and also
C whether the number of connections to this component is correct
C and whether the connected nodes are of a type as expected by the
C corresponding coefficient generator routine
C
      SUBROUTINE CMP12S(IPCOMP)
#include "plant.h"
#include "building.h"
C
      COMMON/OUTIN/IUOUT,IUIN
      COMMON/TC/ITC,ICNT
      COMMON/TRACE/ITCF,ITRACE(MTRACE),IZNTRC(MCOM),ITU
C
      COMMON/C9/NPCOMP,NCI(MPCOM),CDATA(MPCOM,MMISCD)
      COMMON/PDBDT/ADATA(MPCOM,MADATA),BDATA(MPCOM,MBDATA)
      COMMON/PCOND/CONVAR(MPCON,MCONVR),ICONTP(MPCON),
     &             ICONDX(MPCOM,MNODEC,MPCONC)
C
C Establish static data derivable from the data read from database
      BDATA(IPCOMP,1)=ADATA(IPCOMP,4)
      BDATA(IPCOMP,2)=ADATA(IPCOMP,5)
C
C Trace output
      IF(ITC.GT.0.AND.ITRACE(35).NE.0) THEN
         WRITE(ITU,*) ' Component ',IPCOMP,' pre-simulation data for a:'
         WRITE(ITU,*) ' 2 node (ISV=21) AC  plate heat exchanger'
         NITMS=3
         WRITE(ITU,*) ' ADATA ',(ADATA(IPCOMP,J),J=1,NITMS)
         NITMS=2
         WRITE(ITU,*) ' BDATA ',(BDATA(IPCOMP,J),J=1,NITMS)
         IF(ITU.EQ.IUOUT) THEN
            IX1=(IPCOMP/5)*5
            IF(IX1.EQ.IPCOMP.OR.IPCOMP.EQ.NPCOMP) call epagew
         END IF
      END IF
C
C Check user specified number of controlled variables
      NCITM=0
      IF(NCI(IPCOMP).NE.NCITM)
     &   WRITE(ITU,*) ' CMP12S warning: user specified wrong number',
     &                ' of controlled variables'
C
C Check component has 2 connections only, one per node, and both to air
      NCONS=2
      NCONPN=1
      DO 10 IPCONC=1,MPCONC
      IPCON1=ICONDX(IPCOMP,1,IPCONC)
      IPCON2=ICONDX(IPCOMP,2,IPCONC)
      IF(IPCONC.LE.NCONPN) THEN
         IF(IPCON1.EQ.0.OR.IPCON2.EQ.0) THEN
            GOTO 990
         ELSE IF(ICONTP(IPCON1).NE.21.OR.ICONTP(IPCON2).NE.21) THEN
            GOTO 990
         END IF
      ELSE IF(IPCON1.NE.0.OR.IPCON2.NE.0) THEN
         GOTO 990
      END IF
   10 CONTINUE
C
C
      RETURN
C
C Error handling
  990 WRITE(IUOUT,*) ' CMP12S: connection error for component ',IPCOMP
      WRITE(IUOUT,*) '         should be ',NCONS,' connection(s)'
      WRITE(IUOUT,*) '         ie ',NCONPN,' per node, and both to air'
      STOP ' CMP12S: unresolvable error'
C
      END
C
C ******************** CMP13S ********************
C
C CMP13S establishes for a plant component with plant db code 120 ie.
C 2 node (ISV=21) AC  basic heat exchanger model with moisture recovery
C the model is based on a simple effectiveness calculation
C data derivable from the static manufacturers data already read from
C the database and saves it in the static data common block, and also
C whether the specified number of controlled variables is OK, and also
C whether the number of connections to this component is correct
C and whether the connected nodes are of a type as expected by the
C corresponding coefficient generator routine
C
      SUBROUTINE CMP13S(IPCOMP)
#include "plant.h"
#include "building.h"
      COMMON/OUTIN/IUOUT,IUIN
      COMMON/TC/ITC,ICNT
      COMMON/TRACE/ITCF,ITRACE(MTRACE),IZNTRC(MCOM),ITU
      COMMON/C9/NPCOMP,NCI(MPCOM),CDATA(MPCOM,MMISCD)
      COMMON/PDBDT/ADATA(MPCOM,MADATA),BDATA(MPCOM,MBDATA)
      COMMON/PCOND/CONVAR(MPCON,MCONVR),ICONTP(MPCON),
     &             ICONDX(MPCOM,MNODEC,MPCONC)

C Establish static data derivable from the data read from database
      BDATA(IPCOMP,1)=ADATA(IPCOMP,4)
      BDATA(IPCOMP,2)=ADATA(IPCOMP,5)

C Trace output
      IF(ITC.GT.0.AND.ITRACE(35).NE.0) THEN
         WRITE(ITU,*) ' Component ',IPCOMP,' pre-simulation data for a:'
         WRITE(ITU,*) ' 2 node (ISV=21) AC basic heat exchanger'
         NITMS=3
         WRITE(ITU,*) ' ADATA ',(ADATA(IPCOMP,J),J=1,NITMS)
         NITMS=2
         WRITE(ITU,*) ' BDATA ',(BDATA(IPCOMP,J),J=1,NITMS)
         IF(ITU.EQ.IUOUT) THEN
            IX1=(IPCOMP/5)*5
            IF(IX1.EQ.IPCOMP.OR.IPCOMP.EQ.NPCOMP) call epagew
         END IF
      END IF

C Check user specified number of controlled variables
      NCITM=0
      IF(NCI(IPCOMP).NE.NCITM)
     &   WRITE(ITU,*) ' CMP13S warning: user specified wrong number',
     &                ' of controlled variables'

C Check component has 2 connections only, one per node, and both to air
      NCONS=2
      NCONPN=1
      DO 10 IPCONC=1,MPCONC
      IPCON1=ICONDX(IPCOMP,1,IPCONC)
      IPCON2=ICONDX(IPCOMP,2,IPCONC)
      IF(IPCONC.LE.NCONPN) THEN
         IF(IPCON1.EQ.0.OR.IPCON2.EQ.0) THEN
            GOTO 990
         ELSE IF(ICONTP(IPCON1).NE.21.OR.ICONTP(IPCON2).NE.21) THEN
            GOTO 990
         END IF
      ELSE IF(IPCON1.NE.0.OR.IPCON2.NE.0) THEN
         GOTO 990
      END IF
   10 CONTINUE
      RETURN

C Error handling
  990 WRITE(IUOUT,*) ' CMP13S: connection error for component ',IPCOMP
      WRITE(IUOUT,*) '         should be ',NCONS,' connection(s)'
      WRITE(IUOUT,*) '         ie ',NCONPN,' per node, and both to air'
      STOP ' CMP13S: unresolvable erro r'
      END

C ******************** CMP14S ********************
C
C CMP14S establishes for a plant component with plant db code 120 ie.
C 2 node (ISV>20) Cooling tower model
C data derivable from the static manufacturers data already read from
C the database and saves it in the static data common block, and also
C whether the specified number of controlled variables is OK, and also
C whether the number of connections to this component is correct
C and whether the connected nodes are of a type as expected by the
C corresponding coefficient generator routine
C
      SUBROUTINE CMP14S(IPCOMP)
#include "plant.h"
#include "building.h"
C
      COMMON/OUTIN/IUOUT,IUIN
      COMMON/TC/ITC,ICNT
      COMMON/TRACE/ITCF,ITRACE(MTRACE),IZNTRC(MCOM),ITU
C
      COMMON/C9/NPCOMP,NCI(MPCOM),CDATA(MPCOM,MMISCD)
      COMMON/PDBDT/ADATA(MPCOM,MADATA),BDATA(MPCOM,MBDATA)
      COMMON/PCOND/CONVAR(MPCON,MCONVR),ICONTP(MPCON),
     &             ICONDX(MPCOM,MNODEC,MPCONC)
C
C
C Trace output
      IF(ITC.GT.0.AND.ITRACE(35).NE.0) THEN
         WRITE(ITU,*) ' Component ',IPCOMP,' pre-simulation data for a:'
         WRITE(ITU,*) ' 2 node (ISV=21) AC  plate heat exchanger'
         NITMS=6
         WRITE(ITU,*) ' ADATA ',(ADATA(IPCOMP,J),J=1,NITMS)
         IF(ITU.EQ.IUOUT) THEN
            IX1=(IPCOMP/5)*5
            IF(IX1.EQ.IPCOMP.OR.IPCOMP.EQ.NPCOMP) call epagew
         END IF
      END IF
C
C Check user specified number of controlled variables
      NCITM=0
      IF(NCI(IPCOMP).NE.NCITM)
     &   WRITE(ITU,*) ' CMP14S warning: user specified wrong number',
     &                ' of controlled variables'
C
C Check component has 2 connections only, one per node, and both to air
      NCONS=2
      NCONPN=1
      DO 10 IPCONC=1,MPCONC
      IPCON1=ICONDX(IPCOMP,1,IPCONC)
      IPCON2=ICONDX(IPCOMP,2,IPCONC)
      IF(IPCONC.LE.NCONPN) THEN
         IF(IPCON1.EQ.0.OR.IPCON2.EQ.0) THEN
            GOTO 990
         ELSE IF(ICONTP(IPCON1).NE.21.OR.ICONTP(IPCON2).NE.20) THEN
            GOTO 990
         END IF
      ELSE IF(IPCON1.NE.0.OR.IPCON2.NE.0) THEN
         GOTO 990
      END IF
   10 CONTINUE
C
C
      RETURN
C
C Error handling
  990 WRITE(IUOUT,*) ' CMP14S: connection error for component ',IPCOMP
      WRITE(IUOUT,*) '         should be ',NCONS,' connection(s)'
      WRITE(IUOUT,*) '         ie ',NCONPN,' per node, one to air'
      WRITE(IUOUT,*) '         and one to water'
      STOP ' CMP14S: unresolvable error'
C
      END
C
C ******************** CMP15S ********************
C
C CMP15S establishes for a plant component with plant db code 150 ie.
C 1 node (ISV=21) AC  fan with mass flow control
C whether the specified number of controlled variables is OK, and also
C whether the number of connections to this component is correct
C and whether the connected nodes are of a type as expected by the
C corresponding coefficient generator routine
C
      SUBROUTINE CMP15S(IPCOMP)
#include "plant.h"
#include "building.h"
C
      COMMON/OUTIN/IUOUT,IUIN
      COMMON/TC/ITC,ICNT
      COMMON/TRACE/ITCF,ITRACE(MTRACE),IZNTRC(MCOM),ITU
C
      COMMON/C9/NPCOMP,NCI(MPCOM),CDATA(MPCOM,MMISCD)
      COMMON/PDBDT/ADATA(MPCOM,MADATA),BDATA(MPCOM,MBDATA)
      COMMON/PCOND/CONVAR(MPCON,MCONVR),ICONTP(MPCON),
     &             ICONDX(MPCOM,MNODEC,MPCONC)
C
C Establish static data derivable from the data read from database
      BDATA(IPCOMP,1)=ADATA(IPCOMP,4)
      BDATA(IPCOMP,2)=ADATA(IPCOMP,5)
      BDATA(IPCOMP,3)=ADATA(IPCOMP,6)
C
C Trace output
      IF(ITC.GT.0.AND.ITRACE(35).NE.0) THEN
         WRITE(ITU,*) ' Component ',IPCOMP,' pre-simulation data for a:'
         WRITE(ITU,*) ' 1 node (ISV=21) AC  fan mass flow control'
         NITMS=3
         WRITE(ITU,*) ' ADATA ',(ADATA(IPCOMP,J),J=1,NITMS)
         NITMS=3
         WRITE(ITU,*) ' BDATA ',(BDATA(IPCOMP,J),J=1,NITMS)
         NITMS=1
         WRITE(ITU,*) ' CDATA ',(CDATA(IPCOMP,J),J=1,NITMS)
         IF(ITU.EQ.IUOUT) THEN
            IX1=(IPCOMP/5)*5
            IF(IX1.EQ.IPCOMP.OR.IPCOMP.EQ.NPCOMP) call epagew
         END IF
      END IF
C
C Check user specified number of controlled variables
      NCITM=1
      IF(NCI(IPCOMP).NE.NCITM)
     &   WRITE(ITU,*) ' CMP15S warning: user specified wrong number',
     &                ' of controlled variables'
C
C Check component has 1 connection only, to "moist air"
      NCONS=1
      DO 10 IPCONC=1,MPCONC
      IPCON=ICONDX(IPCOMP,1,IPCONC)
      IF(IPCONC.LE.NCONS) THEN
         IF(IPCON.EQ.0) THEN
            GOTO 990
         ELSE IF(ICONTP(IPCON).NE.21) THEN
            GOTO 990
         END IF
      ELSE IF(IPCON.NE.0) THEN
         GOTO 990
      END IF
   10 CONTINUE
C
C
      RETURN
C
C Error handling
  990 WRITE(IUOUT,*) ' CMP15S: connection error for component ',IPCOMP
      WRITE(IUOUT,*) '         should be ',NCONS,' connection(s) to air'
      STOP ' CMP03S: unresolvable error'
C
      END
C
C ******************** CMP20S ********************
C
C CMP20S establishes for a plant component with plant db code 200 ie.
C 1 node (ISV=20) WCH boiler & flux control
C whether the specified number of controlled variables is OK, and also
C whether the number of connections to this component is correct
C and whether the connected nodes are of a type as expected by the
C corresponding coefficient generator routine
C
      SUBROUTINE CMP20S(IPCOMP)
#include "plant.h"
#include "building.h"
C
      COMMON/OUTIN/IUOUT,IUIN
      COMMON/TC/ITC,ICNT
      COMMON/TRACE/ITCF,ITRACE(MTRACE),IZNTRC(MCOM),ITU

      COMMON/C9/NPCOMP,NCI(MPCOM),CDATA(MPCOM,MMISCD)
      COMMON/PDBDT/ADATA(MPCOM,MADATA),BDATA(MPCOM,MBDATA)
      COMMON/PCOND/CONVAR(MPCON,MCONVR),ICONTP(MPCON),
     &             ICONDX(MPCOM,MNODEC,MPCONC)
C
C Trace output
      IF(ITC.GT.0.AND.ITRACE(35).NE.0) THEN
         WRITE(ITU,*) ' Component ',IPCOMP,' pre-simulation data for a:'
         WRITE(ITU,*) ' 1 node (ISV=20) WCH boiler & flux control'
         NITMS=3
         WRITE(ITU,*) ' ADATA ',(ADATA(IPCOMP,J),J=1,NITMS)
         NITMS=1
         WRITE(ITU,*) ' CDATA ',(CDATA(IPCOMP,J),J=1,NITMS)
         IF(ITU.EQ.IUOUT) THEN
            IX1=(IPCOMP/5)*5
            IF(IX1.EQ.IPCOMP.OR.IPCOMP.EQ.NPCOMP) call epagew
         END IF
      END IF
C
C Check user specified number of controlled variables
      NCITM=1
      IF(NCI(IPCOMP).NE.NCITM)
     &   WRITE(ITU,*) ' CMP20S warning: user specified wrong number',
     &                ' of controlled variables'
C
C Check component has 1 connection only, to water
      NCONS=1
      DO 10 IPCONC=1,MPCONC
      IPCON=ICONDX(IPCOMP,1,IPCONC)
      IF(IPCONC.LE.NCONS) THEN
         IF(IPCON.EQ.0) THEN
            GOTO 990
         ELSE IF(ICONTP(IPCON).NE.20) THEN
            GOTO 990
         END IF
      ELSE IF(IPCON.NE.0) THEN
         GOTO 990
      END IF
   10 CONTINUE
C
C
      RETURN
C
C Error handling
  990 WRITE(IUOUT,*) ' CMP20S: connection error for component ',IPCOMP
      WRITE(IUOUT,*) '         should be ',NCONS,' water connection(s)'
      STOP ' CMP20S: unresolvable error'
C
      END
C
C ******************** CMP21S ********************
C
C CMP21S establishes for a plant component with plant db code 210 ie.
C 2 node (ISV=20) WCH radiator
C whether the specified number of controlled variables is OK, and also
C whether the number of connections to this component is correct
C and whether the connected nodes are of a type as expected by the
C corresponding coefficient generator routine
C
      SUBROUTINE CMP21S(IPCOMP)
#include "plant.h"
#include "building.h"
C
      COMMON/OUTIN/IUOUT,IUIN
      COMMON/TC/ITC,ICNT
      COMMON/TRACE/ITCF,ITRACE(MTRACE),IZNTRC(MCOM),ITU
C
      COMMON/C9/NPCOMP,NCI(MPCOM),CDATA(MPCOM,MMISCD)
      COMMON/PDBDT/ADATA(MPCOM,MADATA),BDATA(MPCOM,MBDATA)
      COMMON/PCOND/CONVAR(MPCON,MCONVR),ICONTP(MPCON),
     &             ICONDX(MPCOM,MNODEC,MPCONC)

C Establish static data derivable from the data read from database
      NBDAT=7+int(ADATA(IPCOMP,9))*2
      DO 5 IBDAT=1,NBDAT
         BDATA(IPCOMP,IBDAT)=ADATA(IPCOMP,IBDAT+2)
    5 CONTINUE

C Trace output
      IF(ITC.GT.0.AND.ITRACE(35).NE.0) THEN
         WRITE(ITU,*) ' Component ',IPCOMP,' pre-simulation data for a:'
         WRITE(ITU,*) ' 2 node (ISV=20) WCH radiator'
         NITMS=2
         WRITE(ITU,*) ' ADATA ',(ADATA(IPCOMP,J),J=1,NITMS)
         NITMS=NBDAT
         WRITE(ITU,*) ' BDATA ',(BDATA(IPCOMP,J),J=1,NITMS)
         IF(ITU.EQ.IUOUT) THEN
            IX1=(IPCOMP/5)*5
            IF(IX1.EQ.IPCOMP.OR.IPCOMP.EQ.NPCOMP) call epagew
         END IF
      END IF
C
C Check user specified number of controlled variables
      NCITM=0
      IF(NCI(IPCOMP).NE.NCITM)
     &   WRITE(ITU,*) ' CMP21S warning: user specified wrong number',
     &                ' of controlled variables'
C
C Check component has 1 connection only, to water
      NCONS=1
      DO 10 IPCONC=1,MPCONC
      IPCON=ICONDX(IPCOMP,1,IPCONC)
      IF(IPCONC.LE.NCONS) THEN
         IF(IPCON.EQ.0) THEN
            GOTO 990
         ELSE IF(ICONTP(IPCON).NE.20) THEN
            GOTO 990
         END IF
      ELSE IF(IPCON.NE.0) THEN
         GOTO 990
      END IF
   10 CONTINUE
C
C
      RETURN
C
C Error handling
  990 WRITE(IUOUT,*) ' CMP21S: connection error for component ',IPCOMP
      WRITE(IUOUT,*) '         should be ',NCONS,' water connection(s)'
      STOP ' CMP21S: unresolvable error'
C
      END
C
C ******************** CMP22S ********************
C
C CMP22S establishes for a plant component with plant db code 220 ie.
C 1 node (ISV=20) WCH pipe
C whether the specified number of controlled variables is OK, and also
C whether the number of connections to this component is correct
C and whether the connected nodes are of a type as expected by the
C corresponding coefficient generator routine
C
      SUBROUTINE CMP22S(IPCOMP)
#include "plant.h"
#include "building.h"
C
      COMMON/OUTIN/IUOUT,IUIN
      COMMON/TC/ITC,ICNT
      COMMON/TRACE/ITCF,ITRACE(MTRACE),IZNTRC(MCOM),ITU
C
      COMMON/C9/NPCOMP,NCI(MPCOM),CDATA(MPCOM,MMISCD)
      COMMON/PDBDT/ADATA(MPCOM,MADATA),BDATA(MPCOM,MBDATA)
      COMMON/PCOND/CONVAR(MPCON,MCONVR),ICONTP(MPCON),
     &             ICONDX(MPCOM,MNODEC,MPCONC)
C
C Trace output
      IF(ITC.GT.0.AND.ITRACE(35).NE.0) THEN
         WRITE(ITU,*) ' Component ',IPCOMP,' pre-simulation data for a:'
         WRITE(ITU,*) ' 1 node (ISV=20) WCH pipe'
         NITMS=6
         WRITE(ITU,*) ' ADATA ',(ADATA(IPCOMP,J),J=1,NITMS)
         IF(ITU.EQ.IUOUT) THEN
            IX1=(IPCOMP/5)*5
            IF(IX1.EQ.IPCOMP.OR.IPCOMP.EQ.NPCOMP) call epagew
         END IF
      END IF
C
C Check user specified number of controlled variables
      NCITM=0
      IF(NCI(IPCOMP).NE.NCITM)
     &   WRITE(ITU,*) ' CMP22S warning: user specified wrong number',
     &                ' of controlled variables'
C
C Check component has 1 connection only, to water
      NCONS=1
      DO 10 IPCONC=1,MPCONC
      IPCON=ICONDX(IPCOMP,1,IPCONC)
      IF(IPCONC.LE.NCONS) THEN
         IF(IPCON.EQ.0) THEN
            GOTO 990
         ELSE IF(ICONTP(IPCON).NE.20) THEN
            GOTO 990
         END IF
      ELSE IF(IPCON.NE.0) THEN
         GOTO 990
      END IF
   10 CONTINUE
C
C
      RETURN
C
C Error handling
  990 WRITE(IUOUT,*) ' CMP22S: connection error for component ',IPCOMP
      WRITE(IUOUT,*) '         should be ',NCONS,' water connection(s)'
      STOP ' CMP22S: unresolvable error'
C
      END
C
C ******************** CMP23S ********************
C
C CMP23S establishes for a plant component with plant db code 230 ie.
C 1 node (ISV=20) WCH converging 2-leg junction
C whether the specified number of controlled variables is OK, and also
C whether the number of connections to this component is correct
C and whether the connected nodes are of a type as expected by the
C corresponding coefficient generator routine
C
      SUBROUTINE CMP23S(IPCOMP)
#include "plant.h"
#include "building.h"
C
      COMMON/OUTIN/IUOUT,IUIN
      COMMON/TC/ITC,ICNT
      COMMON/TRACE/ITCF,ITRACE(MTRACE),IZNTRC(MCOM),ITU
C
      COMMON/C9/NPCOMP,NCI(MPCOM),CDATA(MPCOM,MMISCD)
      COMMON/PDBDT/ADATA(MPCOM,MADATA),BDATA(MPCOM,MBDATA)
      COMMON/PCOND/CONVAR(MPCON,MCONVR),ICONTP(MPCON),
     &             ICONDX(MPCOM,MNODEC,MPCONC)
C
C Trace output
      IF(ITC.GT.0.AND.ITRACE(35).NE.0) THEN
         WRITE(ITU,*) ' Component ',IPCOMP,' pre-simulation data for a:'
         WRITE(ITU,*) ' 1 node (ISV=20) WCH converging 2-leg junction'
         NITMS=3
         WRITE(ITU,*) ' ADATA ',(ADATA(IPCOMP,J),J=1,NITMS)
         IF(ITU.EQ.IUOUT) THEN
            IX1=(IPCOMP/5)*5
            IF(IX1.EQ.IPCOMP.OR.IPCOMP.EQ.NPCOMP) call epagew
         END IF
      END IF
C
C Check user specified number of controlled variables
      NCITM=0
      IF(NCI(IPCOMP).NE.NCITM)
     &   WRITE(ITU,*) ' CMP23S warning: user specified wrong number',
     &                ' of controlled variables'
C
C Check component has 2 connections only, both to water
      NCONS=2
      DO 10 IPCONC=1,MPCONC
      IPCON=ICONDX(IPCOMP,1,IPCONC)
      IF(IPCONC.LE.NCONS) THEN
         IF(IPCON.EQ.0) THEN
            GOTO 990
         ELSE IF(ICONTP(IPCON).NE.20) THEN
            GOTO 990
         END IF
      ELSE IF(IPCON.NE.0) THEN
         GOTO 990
      END IF
   10 CONTINUE
C
C
      RETURN
C
C Error handling
  990 WRITE(IUOUT,*) ' CMP23S: connection error for component ',IPCOMP
      WRITE(IUOUT,*) '         should be ',NCONS,' water connection(s)'
      STOP ' CMP23S: unresolvable error'
C
      END
C
C ******************** CMP24S ********************
C
C CMP24S establishes for a plant component with plant db code 240 ie.
C 1 node (ISV=20) WCH pump
C whether the specified number of controlled variables is OK, and also
C whether the number of connections to this component is correct
C and whether the connected nodes are of a type as expected by the
C corresponding coefficient generator routine
C
      SUBROUTINE CMP24S(IPCOMP)
#include "plant.h"
#include "building.h"
C
      COMMON/OUTIN/IUOUT,IUIN
      COMMON/TC/ITC,ICNT
      COMMON/TRACE/ITCF,ITRACE(MTRACE),IZNTRC(MCOM),ITU
C
      COMMON/C9/NPCOMP,NCI(MPCOM),CDATA(MPCOM,MMISCD)
      COMMON/PDBDT/ADATA(MPCOM,MADATA),BDATA(MPCOM,MBDATA)
      COMMON/PCOND/CONVAR(MPCON,MCONVR),ICONTP(MPCON),
     &             ICONDX(MPCOM,MNODEC,MPCONC)
C
C Establish static data derivable from the data read from database
      BDATA(IPCOMP,1)=ADATA(IPCOMP,4)
      BDATA(IPCOMP,2)=ADATA(IPCOMP,5)
      BDATA(IPCOMP,3)=ADATA(IPCOMP,6)
C
C Trace output
      IF(ITC.GT.0.AND.ITRACE(35).NE.0) THEN
         WRITE(ITU,*) ' Component ',IPCOMP,' pre-simulation data for a:'
         WRITE(ITU,*) ' 1 node (ISV=20) WCH pump'
         NITMS=3
         WRITE(ITU,*) ' ADATA ',(ADATA(IPCOMP,J),J=1,NITMS)
         NITMS=3
         WRITE(ITU,*) ' BDATA ',(BDATA(IPCOMP,J),J=1,NITMS)
         NITMS=1
         WRITE(ITU,*) ' CDATA ',(CDATA(IPCOMP,J),J=1,NITMS)
         IF(ITU.EQ.IUOUT) THEN
            IX1=(IPCOMP/5)*5
            IF(IX1.EQ.IPCOMP.OR.IPCOMP.EQ.NPCOMP) call epagew
         END IF
      END IF
C
C Check user specified number of controlled variables
      NCITM=1
      IF(NCI(IPCOMP).NE.NCITM)
     &   WRITE(ITU,*) ' CMP24S warning: user specified wrong number',
     &                ' of controlled variables'
C
C Check component has 1 connection only, to water
      NCONS=1
      DO 10 IPCONC=1,MPCONC
      IPCON=ICONDX(IPCOMP,1,IPCONC)
      IF(IPCONC.LE.NCONS) THEN
         IF(IPCON.EQ.0) THEN
            GOTO 990
         ELSE IF(ICONTP(IPCON).NE.20) THEN
            GOTO 990
         END IF
      ELSE IF(IPCON.NE.0) THEN
         GOTO 990
      END IF
   10 CONTINUE
C
C
      RETURN
C
C Error handling
  990 WRITE(IUOUT,*) ' CMP24S: connection error for component ',IPCOMP
      WRITE(IUOUT,*) '         should be ',NCONS,' water connection(s)'
      STOP ' CMP24S: unresolvable error'
C
      END
C
C ******************** CMP25S ********************
C
C CMP25S establishes for a plant component with plant db code 250 ie.
C C 2 node (ISV=20) WCH boiler with on/off control
C data derivable from the static manufacturers data already read from
C the database and saves it in the static data common block, and also
C whether the specified number of controlled variables is OK, and also
C whether the number of connections to this component is correct
C and whether the connected nodes are of a type as expected by the
C corresponding coefficient generator routine
C
      SUBROUTINE CMP25S(IPCOMP)
#include "plant.h"
#include "building.h"
C
      COMMON/OUTIN/IUOUT,IUIN
      COMMON/TC/ITC,ICNT
      COMMON/TRACE/ITCF,ITRACE(MTRACE),IZNTRC(MCOM),ITU
C
      COMMON/C9/NPCOMP,NCI(MPCOM),CDATA(MPCOM,MMISCD)
      COMMON/PDBDT/ADATA(MPCOM,MADATA),BDATA(MPCOM,MBDATA)
      COMMON/PCOND/CONVAR(MPCON,MCONVR),ICONTP(MPCON),
     &             ICONDX(MPCOM,MNODEC,MPCONC)
C
C Establish static data derivable from the data read from database
      BDATA(IPCOMP,1)=ADATA(IPCOMP,3)
      BDATA(IPCOMP,2)=ADATA(IPCOMP,4)
      BDATA(IPCOMP,3)=ADATA(IPCOMP,5)
      BDATA(IPCOMP,4)=ADATA(IPCOMP,6)
      BDATA(IPCOMP,5)=ADATA(IPCOMP,7)
      BDATA(IPCOMP,6)=ADATA(IPCOMP,8)
      BDATA(IPCOMP,7)=ADATA(IPCOMP,9)
      BDATA(IPCOMP,8)=ADATA(IPCOMP,10)
      BDATA(IPCOMP,9)=ADATA(IPCOMP,11)
      BDATA(IPCOMP,10)=ADATA(IPCOMP,12)
C
C Trace output
      IF(ITC.GT.0.AND.ITRACE(35).NE.0) THEN
         WRITE(ITU,*) ' Component ',IPCOMP,' pre-simulation data for a:'
         WRITE(ITU,*) ' 2 node (ISV=20) WCH boiler with on/off control '
         NITMS=2
         WRITE(ITU,*) ' ADATA ',(ADATA(IPCOMP,J),J=1,NITMS)
         NITMS=10
         WRITE(ITU,*) ' BDATA ',(ADATA(IPCOMP,J),J=1,NITMS)
         NITMS=1
         WRITE(ITU,*) ' CDATA ',(CDATA(IPCOMP,J),J=1,NITMS)
         IF(ITU.EQ.IUOUT) THEN
            IX1=(IPCOMP/5)*5
            IF(IX1.EQ.IPCOMP.OR.IPCOMP.EQ.NPCOMP) call epagew
         END IF
      END IF
C
C Check user specified number of controlled variables
      NCITM=1
      IF(NCI(IPCOMP).NE.NCITM)
     &   WRITE(ITU,*) ' CMP25S warning: user specified wrong number',
     &                ' of controlled variables'
C
C Check component has 1 connection only, to water
      NCONS=1
      DO 10 IPCONC=1,MPCONC
      IPCON=ICONDX(IPCOMP,1,IPCONC)
      IF(IPCONC.LE.NCONS) THEN
         IF(IPCON.EQ.0) THEN
            GOTO 990
         ELSE IF(ICONTP(IPCON).NE.20) THEN
            GOTO 990
         END IF
      ELSE IF(IPCON.NE.0) THEN
         GOTO 990
      END IF
   10 CONTINUE
C
C
      RETURN
C
C Error handling
  990 WRITE(IUOUT,*) ' CMP25S: connection error for component ',IPCOMP
      WRITE(IUOUT,*) '         should be ',NCONS,' water connection(s)'
      STOP ' CMP25S: unresolvable error'
C
      END
C
C ******************** CMP26S ********************
C
C CMP26S establishes for a plant component with plant db code 260 ie.
C C 2 node (ISV=20) WCH boiler with aquastat control
C data derivable from the static manufacturers data already read from
C the database and saves it in the static data common block, and also
C whether the specified number of controlled variables is OK, and also
C whether the number of connections to this component is correct
C and whether the connected nodes are of a type as expected by the
C corresponding coefficient generator routine
C
      SUBROUTINE CMP26S(IPCOMP)
#include "plant.h"
#include "building.h"
C
      COMMON/OUTIN/IUOUT,IUIN
      COMMON/TC/ITC,ICNT
      COMMON/TRACE/ITCF,ITRACE(MTRACE),IZNTRC(MCOM),ITU
C
      COMMON/C9/NPCOMP,NCI(MPCOM),CDATA(MPCOM,MMISCD)
      COMMON/PDBDT/ADATA(MPCOM,MADATA),BDATA(MPCOM,MBDATA)
      COMMON/PCOND/CONVAR(MPCON,MCONVR),ICONTP(MPCON),
     &             ICONDX(MPCOM,MNODEC,MPCONC)
C
C Establish static data derivable from the data read from database
      BDATA(IPCOMP,1)=ADATA(IPCOMP,3)
      BDATA(IPCOMP,2)=ADATA(IPCOMP,4)
      BDATA(IPCOMP,3)=ADATA(IPCOMP,5)
      BDATA(IPCOMP,4)=ADATA(IPCOMP,6)
      BDATA(IPCOMP,5)=ADATA(IPCOMP,7)
      BDATA(IPCOMP,6)=ADATA(IPCOMP,8)
      BDATA(IPCOMP,7)=ADATA(IPCOMP,9)
      BDATA(IPCOMP,8)=ADATA(IPCOMP,10)
      BDATA(IPCOMP,9)=ADATA(IPCOMP,11)
      BDATA(IPCOMP,10)=ADATA(IPCOMP,12)
      BDATA(IPCOMP,11)=ADATA(IPCOMP,13)
      BDATA(IPCOMP,12)=ADATA(IPCOMP,14)
      BDATA(IPCOMP,13)=ADATA(IPCOMP,15)
      BDATA(IPCOMP,14)=ADATA(IPCOMP,16)
      BDATA(IPCOMP,15)=ADATA(IPCOMP,17)
C
C Trace output
      IF(ITC.GT.0.AND.ITRACE(35).NE.0) THEN
         WRITE(ITU,*) ' Component ',IPCOMP,' pre-simulation data for a:'
         WRITE(ITU,*) ' 2 node (ISV=20) WCH boiler & aquastat control '
         NITMS=2
         WRITE(ITU,*) ' ADATA ',(ADATA(IPCOMP,J),J=1,NITMS)
         NITMS=15
         WRITE(ITU,*) ' BDATA ',(ADATA(IPCOMP,J),J=1,NITMS)
         NITMS=2
         WRITE(ITU,*) ' CDATA ',(CDATA(IPCOMP,J),J=1,NITMS)
         IF(ITU.EQ.IUOUT) THEN
            IX1=(IPCOMP/5)*5
            IF(IX1.EQ.IPCOMP.OR.IPCOMP.EQ.NPCOMP) call epagew
         END IF
      END IF
C
C Check user specified number of controlled variables
      NCITM=2
      IF(NCI(IPCOMP).NE.NCITM)
     &   WRITE(ITU,*) ' CMP26S warning: user specified wrong number',
     &                ' of controlled variables'
C
C Check component has 1 connection only, to water
      NCONS=1
      DO 10 IPCONC=1,MPCONC
      IPCON=ICONDX(IPCOMP,1,IPCONC)
      IF(IPCONC.LE.NCONS) THEN
         IF(IPCON.EQ.0) THEN
            GOTO 990
         ELSE IF(ICONTP(IPCON).NE.20) THEN
            GOTO 990
         END IF
      ELSE IF(IPCON.NE.0) THEN
         GOTO 990
      END IF
   10 CONTINUE
C
C
      RETURN
C
C Error handling
  990 WRITE(IUOUT,*) ' CMP26S: connection error for component ',IPCOMP
      WRITE(IUOUT,*) '         should be ',NCONS,' water connection(s)'
      STOP ' CMP26S: unresolvable error'
C
      END
C
C ******************** CMP27S ********************
C
C CMP27S establishes for a plant component with plant db code 270 ie.
C 8 node (ISV=20) WCH radiator
C whether the specified number of controlled variables is OK, and also
C whether the number of connections to this component is correct
C and whether the connected nodes are of a type as expected by the
C corresponding coefficient generator routine
C
      SUBROUTINE CMP27S(IPCOMP)
#include "plant.h"
#include "building.h"
C
      COMMON/OUTIN/IUOUT,IUIN
      COMMON/TC/ITC,ICNT
      COMMON/TRACE/ITCF,ITRACE(MTRACE),IZNTRC(MCOM),ITU
C
      COMMON/C9/NPCOMP,NCI(MPCOM),CDATA(MPCOM,MMISCD)
      COMMON/PDBDT/ADATA(MPCOM,MADATA),BDATA(MPCOM,MBDATA)
      COMMON/PCOND/CONVAR(MPCON,MCONVR),ICONTP(MPCON),
     &             ICONDX(MPCOM,MNODEC,MPCONC)
C
C Establish static data derivable from the data read from database
      NBDAT=7+int(ADATA(IPCOMP,9))*2
      DO 5 IBDAT=1,NBDAT
         BDATA(IPCOMP,IBDAT)=ADATA(IPCOMP,IBDAT+2)
    5 CONTINUE

C Trace output
      IF(ITC.GT.0.AND.ITRACE(35).NE.0) THEN
         WRITE(ITU,*) ' Component ',IPCOMP,' pre-simulation data for a:'
         WRITE(ITU,*) ' 8 node (ISV=20) WCH radiator'
         NITMS=2
         WRITE(ITU,*) ' ADATA ',(ADATA(IPCOMP,J),J=1,NITMS)
         NITMS=NBDAT
         WRITE(ITU,*) ' BDATA ',(BDATA(IPCOMP,J),J=1,NITMS)
         IF(ITU.EQ.IUOUT) THEN
            IX1=(IPCOMP/5)*5
            IF(IX1.EQ.IPCOMP.OR.IPCOMP.EQ.NPCOMP) call epagew
         END IF
      END IF
C
C Check user specified number of controlled variables
      NCITM=0
      IF(NCI(IPCOMP).NE.NCITM)
     &   WRITE(ITU,*) ' CMP27S warning: user specified wrong number',
     &                ' of controlled variables'
C
C Check component has 1 connection only, to water
      NCONS=1
      DO 10 IPCONC=1,MPCONC
      IPCON=ICONDX(IPCOMP,1,IPCONC)
      IF(IPCONC.LE.NCONS) THEN
         IF(IPCON.EQ.0) THEN
            GOTO 990
         ELSE IF(ICONTP(IPCON).NE.20) THEN
            GOTO 990
         END IF
      ELSE IF(IPCON.NE.0) THEN
         GOTO 990
      END IF
   10 CONTINUE
C
C
      RETURN
C
C Error handling
  990 WRITE(IUOUT,*) ' CMP27S: connection error for component ',IPCOMP
      WRITE(IUOUT,*) '         should be ',NCONS,' water connection(s)'
      STOP ' CMP27S: unresolvable error'

      END

C ******************** CMP28S ********************
C
C CMP28S establishes for a plant component with plant db code 280 ie.
C 1 node (ISV=29) Oil-filled electric panel radiator
C whether the specified number of controlled variables is OK, and also
C whether the number of connections to this component is correct
C and whether the connected nodes are of a type as expected by the
C corresponding coefficient generator routine
C
      SUBROUTINE CMP28S(IPCOMP)
#include "plant.h"
#include "building.h"

      COMMON/OUTIN/IUOUT,IUIN
      COMMON/TC/ITC,ICNT
      COMMON/TRACE/ITCF,ITRACE(MTRACE),IZNTRC(MCOM),ITU

      COMMON/C9/NPCOMP,NCI(MPCOM),CDATA(MPCOM,MMISCD)
      COMMON/PDBDT/ADATA(MPCOM,MADATA),BDATA(MPCOM,MBDATA)
      COMMON/PCOND/CONVAR(MPCON,MCONVR),ICONTP(MPCON),
     &             ICONDX(MPCOM,MNODEC,MPCONC)

C Establish static data derivable from the data read from database
      NBDAT=6+int(ADATA(IPCOMP,9))*2
      DO 5 IBDAT=1,NBDAT
         BDATA(IPCOMP,IBDAT)=ADATA(IPCOMP,IBDAT+2)
    5 CONTINUE

C Trace output
      IF(ITC.GT.0.AND.ITRACE(35).NE.0) THEN
         WRITE(ITU,*) ' Component ',IPCOMP,' pre-simulation data for a:'
         WRITE(ITU,*) ' 1 node (ISV=29) Oilo-filled electric radiator'
         NITMS=2
         WRITE(ITU,*) ' ADATA ',(ADATA(IPCOMP,J),J=1,NITMS)
         NITMS=NBDAT
         WRITE(ITU,*) ' BDATA ',(BDATA(IPCOMP,J),J=1,NITMS)
         IF(ITU.EQ.IUOUT) THEN
            IX1=(IPCOMP/5)*5
            IF(IX1.EQ.IPCOMP.OR.IPCOMP.EQ.NPCOMP) call epagew
         END IF
      END IF

C Check user specified number of controlled variables
      NCITM=1
      IF(NCI(IPCOMP).NE.NCITM)
     &   WRITE(ITU,*) ' CMP28S warning: user specified wrong number',
     &                ' of controlled variables'

C Check component has no connection.
      NCONS=0
      IPCON=ICONDX(IPCOMP,1,1)
      IF(IPCON.NE.NCONS) GOTO 990
      RETURN

C Error handling
  990 WRITE(IUOUT,*) ' CMP28S: connection error for component ',IPCOMP
      WRITE(IUOUT,*) '         should be ',NCONS,' water connection(s)'
      STOP ' CMP28S: unresolvable error'
      END

C ******************** CMP29S ********************
C CMP29S establishes for a plant component with plant db code 280 ie.
C 1 node (ISV=20) WCH flow control valve
C whether the specified number of controlled variables is OK, and also
C whether the number of connections to this component is correct
C and whether the connected nodes are of a type as expected by the
C corresponding coefficient generator routine
      subroutine cmp29s(ipcomp)
#include "plant.h"
#include "building.h"
C
      COMMON/OUTIN/IUOUT,IUIN
      COMMON/TC/ITC,ICNT
      COMMON/TRACE/ITCF,ITRACE(MTRACE),IZNTRC(MCOM),ITU
C
      COMMON/C9/NPCOMP,NCI(MPCOM),CDATA(MPCOM,MMISCD)
      COMMON/PDBDT/ADATA(MPCOM,MADATA),BDATA(MPCOM,MBDATA)
      COMMON/PCOND/CONVAR(MPCON,MCONVR),ICONTP(MPCON),
     &             ICONDX(MPCOM,MNODEC,MPCONC)
C
C Trace output
      IF(ITC.GT.0.AND.ITRACE(35).NE.0) THEN
         WRITE(ITU,*) ' Component ',IPCOMP,' pre-simulation data for a:'
         WRITE(ITU,*) ' 1 node (ISV=20) WCH valve & flow ratio control'
         NITMS=3
         WRITE(ITU,*) ' ADATA ',(ADATA(IPCOMP,J),J=1,NITMS)
         IF(ITU.EQ.IUOUT) THEN
            IX1=(IPCOMP/5)*5
            IF(IX1.EQ.IPCOMP.OR.IPCOMP.EQ.NPCOMP) call epagew
         END IF
      END IF
C
C Check user specified number of controlled variables
      NCITM=1
      IF(NCI(IPCOMP).NE.NCITM)
     &   WRITE(ITU,*) ' cmp29s warning: user specified wrong number',
     &                ' of controlled variables'
C
C Check component has 1 connection only, to "water"
      NCONS=1
      DO 10 IPCONC=1,MPCONC
      IPCON=ICONDX(IPCOMP,1,IPCONC)
      IF(IPCONC.LE.NCONS) THEN
         IF(IPCON.EQ.0) THEN
            GOTO 990
         ELSE IF(ICONTP(IPCON).NE.20) THEN
            GOTO 990
         END IF
      ELSE IF(IPCON.NE.0) THEN
         GOTO 990
      END IF
   10 CONTINUE

C Return to calling module
      RETURN
C Error handling
  990 WRITE(IUOUT,*) ' cmp29s: connection error for component ',IPCOMP
      WRITE(IUOUT,*) '         should be ',NCONS,' connection(s) to air'
      STOP ' cmp29s: unresolvable error'
      END

C ******************** CMP30S ********************

C CMP30S establishes for a plant component with plant db code 300 ie.
C 1 node (ISV=20) water cooler & flux control
C data derivable from the static manufacturers data already read from
C the database and saves it in the static data common block, and also
C whether the specified number of controlled variables is OK, and also
C whether the number of connections to this component is correct
C and whether the connected nodes are of a type as expected by the
C corresponding coefficient generator routine

      SUBROUTINE CMP30S(IPCOMP)
#include "plant.h"
#include "building.h"

      COMMON/OUTIN/IUOUT,IUIN
      COMMON/TC/ITC,ICNT
      COMMON/TRACE/ITCF,ITRACE(MTRACE),IZNTRC(MCOM),ITU

      COMMON/C9/NPCOMP,NCI(MPCOM),CDATA(MPCOM,MMISCD)
      COMMON/PDBDT/ADATA(MPCOM,MADATA),BDATA(MPCOM,MBDATA)
      COMMON/PCOND/CONVAR(MPCON,MCONVR),ICONTP(MPCON),
     &             ICONDX(MPCOM,MNODEC,MPCONC)
C
C Negate CDATA(?,1) as this component is a water cooler
C and CDATA(?,1) relates to the maximum cooling energy.
      CDATA(IPCOMP,1)=-CDATA(IPCOMP,1)
C
C Trace output
      IF(ITC.GT.0.AND.ITRACE(35).NE.0) THEN
         WRITE(ITU,*) ' Component ',IPCOMP,' pre-simulation data for a:'
         WRITE(ITU,*) ' 1 node (ISV=20) Water cooler &',
     &                ' flux control'
         NITMS=3
         WRITE(ITU,*) ' ADATA ',(ADATA(IPCOMP,J),J=1,NITMS)
         NITMS=1
         WRITE(ITU,*) ' CDATA ',(CDATA(IPCOMP,J),J=1,NITMS)
         IF(ITU.EQ.IUOUT) THEN
            IX1=(IPCOMP/5)*5
            IF(IX1.EQ.IPCOMP.OR.IPCOMP.EQ.NPCOMP) call epagew
         END IF
      END IF
C
C Check user specified number of controlled variables
      NCITM=1
      IF(NCI(IPCOMP).NE.NCITM)
     &   WRITE(ITU,*) ' CMP30S warning: user specified wrong number',
     &                ' of controlled variables'
C
C Check component has 1 connection only, to "moist air"
      NCONS=1
      DO 10 IPCONC=1,MPCONC
      IPCON=ICONDX(IPCOMP,1,IPCONC)
      IF(IPCONC.LE.NCONS) THEN
         IF(IPCON.EQ.0) THEN
            GOTO 990
         ELSE IF(ICONTP(IPCON).NE.20) THEN
            GOTO 990
         END IF
      ELSE IF(IPCON.NE.0) THEN
         GOTO 990
      END IF
   10 CONTINUE

C Return to calling module.
      RETURN

C Error handling.
  990 WRITE(IUOUT,*) ' CMP30S: connection error for component ',IPCOMP
      WRITE(IUOUT,*) '         should be ',NCONS,' connection(s) to air'
      STOP ' CMP30S: unresolvable error'

      END
C ******************** CMP31S ********************
C
C CMP31S establishes for a plant component with plant db code 310 ie.
C C 2 node (ISV=20) WCH calorifier
C data derivable from the static manufacturers data already read from
C the database and saves it in the static data common block, and also
C whether the specified number of controlled variables is OK, and also
C whether the number of connections to this component is correct
C and whether the connected nodes are of a type as expected by the
C corresponding coefficient generator routine
C
      SUBROUTINE CMP31S(IPCOMP)
#include "plant.h"
#include "building.h"
C
      COMMON/OUTIN/IUOUT,IUIN
      COMMON/TC/ITC,ICNT
      COMMON/TRACE/ITCF,ITRACE(MTRACE),IZNTRC(MCOM),ITU
C
      COMMON/C9/NPCOMP,NCI(MPCOM),CDATA(MPCOM,MMISCD)
      COMMON/PDBDT/ADATA(MPCOM,MADATA),BDATA(MPCOM,MBDATA)
      COMMON/PCOND/CONVAR(MPCON,MCONVR),ICONTP(MPCON),
     &             ICONDX(MPCOM,MNODEC,MPCONC)
C
C Establish static data derivable from the data read from database
      BDATA(IPCOMP,1)=ADATA(IPCOMP,5)
      BDATA(IPCOMP,2)=ADATA(IPCOMP,6)
      BDATA(IPCOMP,3)=ADATA(IPCOMP,7)
      BDATA(IPCOMP,4)=ADATA(IPCOMP,8)

C
C Trace output
      IF(ITC.GT.0.AND.ITRACE(35).NE.0) THEN
         WRITE(ITU,*) ' Component ',IPCOMP,' pre-simulation data for a:'
         WRITE(ITU,*) ' 2 node (ISV=20) WCH calorifier '
         NITMS=4
         WRITE(ITU,*) ' ADATA ',(ADATA(IPCOMP,J),J=1,NITMS)
         NITMS=4
         WRITE(ITU,*) ' BDATA ',(BDATA(IPCOMP,J),J=1,NITMS)
         IF(ITU.EQ.IUOUT) THEN
            IX1=(IPCOMP/5)*5
            IF(IX1.EQ.IPCOMP.OR.IPCOMP.EQ.NPCOMP) call epagew
         END IF
      END IF
C
C Check user specified number of controlled variables
      NCITM=0
      IF(NCI(IPCOMP).NE.NCITM)
     &   WRITE(ITU,*) ' CMP31S warning: user specified wrong number',
     &                ' of controlled variables'
C
C Check component has 2 connections only, to water
      NCONS=2
      DO 10 IPCONC=1,MPCONC
      IPCON=ICONDX(IPCOMP,IPCONC,1)
      IF(IPCONC.LE.NCONS) THEN
         IF(IPCON.EQ.0) THEN
            GOTO 990
         ELSE IF(ICONTP(IPCON).NE.20) THEN
            GOTO 990
         END IF
      ELSE IF(IPCON.NE.0) THEN
         GOTO 990
      END IF
   10 CONTINUE
C
C
      RETURN
C
C Error handling
  990 WRITE(IUOUT,*) ' CMP31S: connection error for component ',IPCOMP
      WRITE(IUOUT,*) '         should be ',NCONS,' water connection(s)'
      STOP ' CMP31S: unresolvable error'
C
      END

C ******************** CMP32S ********************
C
C CMP32S establishes for a plant component with plant db code 320 ie.
C 2 node (ISV>20) WCH generic liquid/liquid heat exchanger
C data derivable from the static manufacturers data already read from
C the database and saves it in the static data common block, and also
C whether the specified number of controlled variables is OK, and also
C whether the number of connections to this component is correct
C and whether the connected nodes are of a type as expected by the
C corresponding coefficient generator routine
C
C node 1 represents water              (ISV=20)
C node 2 represents water              (ISV=20)
C
      SUBROUTINE CMP32S(IPCOMP)
#include "plant.h"
#include "building.h"

      COMMON/OUTIN/IUOUT,IUIN
      COMMON/TC/ITC,ICNT
      COMMON/TRACE/ITCF,ITRACE(MTRACE),IZNTRC(MCOM),ITU

      COMMON/C9/NPCOMP,NCI(MPCOM),CDATA(MPCOM,MMISCD)
      COMMON/PDBDT/ADATA(MPCOM,MADATA),BDATA(MPCOM,MBDATA)
      COMMON/PCOND/CONVAR(MPCON,MCONVR),ICONTP(MPCON),
     &             ICONDX(MPCOM,MNODEC,MPCONC)

C Establish static data derivable from the data read from database
      BDATA(IPCOMP,1)=ADATA(IPCOMP,6)
C Trace output
      IF(ITC.GT.0.AND.ITRACE(35).NE.0) THEN
         WRITE(ITU,*) ' Component ',IPCOMP,' pre-simulation data for a:'
         WRITE(ITU,*) ' 2 node (ISV=20) WCH  liquid/liquid heat  ',
     &                ' exchangerfed by WCH system'
         NITMS=5
         WRITE(ITU,*) ' ADATA ',(ADATA(IPCOMP,J),J=1,NITMS)
         NITMS=1
         WRITE(ITU,*) ' BDATA ',(ADATA(IPCOMP,J),J=1,NITMS)
         IF(ITU.EQ.IUOUT) THEN
            IX1=(IPCOMP/5)*5
            IF(IX1.EQ.IPCOMP.OR.IPCOMP.EQ.NPCOMP) call epagew
         END IF
      END IF

C Check user specified number of controlled variables
      NCITM=0
      IF(NCI(IPCOMP).NE.NCITM)
     &   WRITE(ITU,*) ' CMP32S warning: user specified wrong number',
     &                ' of controlled variables'

C Check component has 2 connections only, one per node, and both to water
      NCONS=2
      NCONPN=1
      DO 10 IPCONC=1,MPCONC
      IPCON1=ICONDX(IPCOMP,1,IPCONC)
      IPCON2=ICONDX(IPCOMP,2,IPCONC)
      IF(IPCONC.LE.NCONPN) THEN
         IF(IPCON1.EQ.0.OR.IPCON2.EQ.0) THEN
            GOTO 990
         ELSE IF(ICONTP(IPCON1).NE.20.OR.ICONTP(IPCON2).NE.20) THEN
            GOTO 990
         END IF
      ELSE IF(IPCON1.NE.0.OR.IPCON2.NE.0) THEN
         GOTO 990
      END IF
   10 CONTINUE
      return
C
C Error handling
  990 WRITE(IUOUT,*) ' CMP32S: connection error for component ',IPCOMP
      WRITE(IUOUT,*) '         should be ',NCONS,' connection(s)'
      WRITE(IUOUT,*) '         ie  1st connection to water'
      WRITE(IUOUT,*) '             2nd connection to water'
      STOP ' CMP32S: unresolvable error'


      END
C
C ******************** CMP33S ********************
C
C CMP33S establishes for a plant component with plant db code 330 ie.
C 2 node (ISV>20) WCH generic gas/liquid heat exchanger
C data derivable from the static manufacturers data already read from
C the database and saves it in the static data common block, and also
C whether the specified number of controlled variables is OK, and also
C whether the number of connections to this component is correct
C and whether the connected nodes are of a type as expected by the
C corresponding coefficient generator routine
C
C node 1 represents gas                (ISV=21)
C node 2 represents water              (ISV=20)
C
      SUBROUTINE CMP33S(IPCOMP)
#include "plant.h"
#include "building.h"

      COMMON/OUTIN/IUOUT,IUIN
      COMMON/TC/ITC,ICNT
      COMMON/TRACE/ITCF,ITRACE(MTRACE),IZNTRC(MCOM),ITU

      COMMON/C9/NPCOMP,NCI(MPCOM),CDATA(MPCOM,MMISCD)
      COMMON/PDBDT/ADATA(MPCOM,MADATA),BDATA(MPCOM,MBDATA)
      COMMON/PCOND/CONVAR(MPCON,MCONVR),ICONTP(MPCON),
     &             ICONDX(MPCOM,MNODEC,MPCONC)

C Establish static data derivable from the data read from database
      BDATA(IPCOMP,1)=ADATA(IPCOMP,6)
C Trace output
      IF(ITC.GT.0.AND.ITRACE(35).NE.0) THEN
         WRITE(ITU,*) ' Component ',IPCOMP,' pre-simulation data for a:'
         WRITE(ITU,*) ' 2 node (ISV=20) WCH  liquid/liquid heat  ',
     &                ' exchangerfed by WCH system'
         NITMS=5
         WRITE(ITU,*) ' ADATA ',(ADATA(IPCOMP,J),J=1,NITMS)
         NITMS=1
         WRITE(ITU,*) ' BDATA ',(ADATA(IPCOMP,J),J=1,NITMS)
         IF(ITU.EQ.IUOUT) THEN
            IX1=(IPCOMP/5)*5
            IF(IX1.EQ.IPCOMP.OR.IPCOMP.EQ.NPCOMP) call epagew
         END IF
      END IF

C Check user specified number of controlled variables
      NCITM=0
      IF(NCI(IPCOMP).NE.NCITM)
     &   WRITE(ITU,*) ' CMP33S warning: user specified wrong number',
     &                ' of controlled variables'

C Check component has 2 connections only, one per node, and both to water
      NCONS=2
      NCONPN=1
      DO 10 IPCONC=1,MPCONC
      IPCON1=ICONDX(IPCOMP,1,IPCONC)
      IPCON2=ICONDX(IPCOMP,2,IPCONC)
      IF(IPCONC.LE.NCONPN) THEN
         IF(IPCON1.EQ.0.OR.IPCON2.EQ.0) THEN
            GOTO 990
         ELSE IF(ICONTP(IPCON1).NE.21.OR.ICONTP(IPCON2).NE.20) THEN
            GOTO 990
         END IF
      ELSE IF(IPCON1.NE.0.OR.IPCON2.NE.0) THEN
         GOTO 990
      END IF
   10 CONTINUE
      return
C
C Error handling
  990 WRITE(IUOUT,*) ' CMP33S: connection error for component ',IPCOMP
      WRITE(IUOUT,*) '         should be ',NCONS,' connection(s)'
      WRITE(IUOUT,*) '         ie  1st connection to gas'
      WRITE(IUOUT,*) '             2nd connection to water'
      STOP ' CMP33S: unresolvable error'


      END
C
C ******************** CMP34S ********************
C
C CMP34S establishes for a plant component with plant db code 340 ie.
C 3 node (ISV>20) WCH
C data derivable from the static manufacturers data already read from
C the database and saves it in the static data common block, and also
C whether the specified number of controlled variables is OK, and also
C whether the number of connections to this component is correct
C and whether the connected nodes are of a type as expected by the
C corresponding coefficient generator routine
C
C node 1 represents water              (ISV=20) (2 connections)
C node 2 represents gas                (ISV=21) (1 connection)
C node 3 represents gas                (ISV=21)
C
      SUBROUTINE CMP34S(IPCOMP)
#include "plant.h"
#include "building.h"

      COMMON/OUTIN/IUOUT,IUIN
      COMMON/TC/ITC,ICNT
      COMMON/TRACE/ITCF,ITRACE(MTRACE),IZNTRC(MCOM),ITU

      COMMON/C9/NPCOMP,NCI(MPCOM),CDATA(MPCOM,MMISCD)
      COMMON/PDBDT/ADATA(MPCOM,MADATA),BDATA(MPCOM,MBDATA)
      COMMON/PCOND/CONVAR(MPCON,MCONVR),ICONTP(MPCON),
     &             ICONDX(MPCOM,MNODEC,MPCONC)

      INTEGER ADAT

C Establish static data derivable from the data read from database
      NDAT=13
      ADAT=3
      DO 10 IDAT=1,NDAT-ADAT
        BDATA(IPCOMP,IDAT)=ADATA(IPCOMP,IDAT+ADAT)
  10  CONTINUE

C Trace output
      IF(ITC.GT.0.AND.ITRACE(35).NE.0) THEN
         WRITE(ITU,*) ' Component ',IPCOMP,' pre-simulation data for a:'
         WRITE(ITU,*) ' 3 node (ISV>20) WCH  heated water storage  '
         NITMS=3
         WRITE(ITU,*) ' ADATA ',(ADATA(IPCOMP,J),J=1,NITMS)
         NITMS=10
         WRITE(ITU,*) ' BDATA ',(ADATA(IPCOMP,J),J=1,NITMS)
         IF(ITU.EQ.IUOUT) THEN
            IX1=(IPCOMP/5)*5
            IF(IX1.EQ.IPCOMP.OR.IPCOMP.EQ.NPCOMP) call epagew
         END IF
      END IF

C Check user specified number of controlled variables
      NCITM=1
      IF(NCI(IPCOMP).NE.NCITM)
     &   WRITE(ITU,*) ' CMP34S warning: user specified wrong number',
     &                ' of controlled variables'

C Check component has at least two connections.
      NCONPN=1
      DO 20 IPCONC=1,MPCONC
        IPCON1=ICONDX(IPCOMP,1,IPCONC)
        IPCON2=ICONDX(IPCOMP,2,IPCONC)
        IF(IPCONC.LE.NCONPN) THEN
          IF(IPCON1.EQ.0.OR.IPCON2.EQ.0) THEN
             GOTO 990
          ELSE IF(ICONTP(IPCON1).NE.20.OR.ICONTP(IPCON2).NE.21) THEN
             GOTO 990
          END IF
        ELSE
          IF(IPCONC.EQ.2.AND.IPCON2.NE.0) THEN
            GOTO 990
          ELSEIF(IPCONC.EQ.3.AND.IPCON1.NE.0)THEN
            GOTO 990
          ENDIF
        END IF

   20 CONTINUE

      RETURN
C
C Error handling
  990 WRITE(IUOUT,*) ' CMP34S: connection error for component ',IPCOMP
      WRITE(IUOUT,*) '         should be 2 or 3 connection(s)'
      WRITE(IUOUT,*) '         ie  1st connection to water node'
      WRITE(IUOUT,*) '             2nd connection to water node'
      WRITE(IUOUT,*) '             3rd connection to combustion node'
      STOP ' CMP34S: unresolvable error'

      END
C
C ******************** CMP35S ********************
C
C CMP35S establishes for a plant component with plant db code 350 ie.
C 2 node (ISV=20) WCH basic radiator
C whether the specified number of controlled variables is OK, and also
C whether the number of connections to this component is correct
C and whether the connected nodes are of a type as expected by the
C corresponding coefficient generator routine
C
      SUBROUTINE CMP35S(IPCOMP)
#include "plant.h"
#include "building.h"
C
      COMMON/OUTIN/IUOUT,IUIN
      COMMON/TC/ITC,ICNT
      COMMON/TRACE/ITCF,ITRACE(MTRACE),IZNTRC(MCOM),ITU
C
      COMMON/C9/NPCOMP,NCI(MPCOM),CDATA(MPCOM,MMISCD)
      COMMON/PDBDT/ADATA(MPCOM,MADATA),BDATA(MPCOM,MBDATA)
      COMMON/PCOND/CONVAR(MPCON,MCONVR),ICONTP(MPCON),
     &             ICONDX(MPCOM,MNODEC,MPCONC)

C Establish static data derivable from the data read from database
      NBDAT=5+int(ADATA(IPCOMP,9))*2
      DO 5 IBDAT=1,NBDAT
         BDATA(IPCOMP,IBDAT)=ADATA(IPCOMP,IBDAT+2)
    5 CONTINUE

C Trace output
      IF(ITC.GT.0.AND.ITRACE(35).NE.0) THEN
         WRITE(ITU,*) ' Component ',IPCOMP,' pre-simulation data for a:'
         WRITE(ITU,*) ' 2 node (ISV=20) WCH basic radiator'
         NITMS=2
         WRITE(ITU,*) ' ADATA ',(ADATA(IPCOMP,J),J=1,NITMS)
         NITMS=NBDAT
         WRITE(ITU,*) ' BDATA ',(BDATA(IPCOMP,J),J=1,NITMS)
         IF(ITU.EQ.IUOUT) THEN
            IX1=(IPCOMP/5)*5
            IF(IX1.EQ.IPCOMP.OR.IPCOMP.EQ.NPCOMP) call epagew
         END IF
      END IF
C
C Check user specified number of controlled variables
      NCITM=0
      IF(NCI(IPCOMP).NE.NCITM)
     &   WRITE(ITU,*) ' CMP35S warning: user specified wrong number',
     &                ' of controlled variables'
C
C Check component has 1 connection only, to water
      NCONS=1
      DO 10 IPCONC=1,MPCONC
      IPCON=ICONDX(IPCOMP,1,IPCONC)
      IF(IPCONC.LE.NCONS) THEN
         IF(IPCON.EQ.0) THEN
            GOTO 990
         ELSE IF(ICONTP(IPCON).NE.20) THEN
            GOTO 990
         END IF
      ELSE IF(IPCON.NE.0) THEN
         GOTO 990
      END IF
   10 CONTINUE
C
C
      RETURN
C
C Error handling
  990 WRITE(IUOUT,*) ' CMP35S: connection error for component ',IPCOMP
      WRITE(IUOUT,*) '         should be ',NCONS,' water connection(s)'
      STOP ' CMP35S: unresolvable error'
C
      END

C ******************** CMP36S ********************
C
C CMP36S establishes for a plant component with plant db code 360 ie.
C 2 node (ISV>19) WCH reversible heat pump 
C data derivable from the static manufacturers data already read from
C the database and saves it in the static data common block, and also
C whether the specified number of controlled variables is OK, and also
C whether the number of connections to this component is correct
C and whether the connected nodes are of a type as expected by the
C corresponding coefficient generator routine
C
C node 1 part of component in contact with water loop (ISV=20)
C node 2 part of component in moist air stream (ISV=21)
C
      SUBROUTINE CMP36S(IPCOMP)
#include "plant.h"
#include "building.h"

      COMMON/OUTIN/IUOUT,IUIN
      COMMON/TC/ITC,ICNT
      COMMON/TRACE/ITCF,ITRACE(MTRACE),IZNTRC(MCOM),ITU

      COMMON/C9/NPCOMP,NCI(MPCOM),CDATA(MPCOM,MMISCD)
      COMMON/PDBDT/ADATA(MPCOM,MADATA),BDATA(MPCOM,MBDATA)
      COMMON/PCOND/CONVAR(MPCON,MCONVR),ICONTP(MPCON),
     &             ICONDX(MPCOM,MNODEC,MPCONC)


C Establish static data derivable from the data read from database
      DO 5 J=1,8
        BDATA(IPCOMP,j)=ADATA(IPCOMP,3+j)
5     CONTINUE

C Trace output
      IF(ITC.GT.0.AND.ITRACE(35).NE.0) THEN
         WRITE(ITU,*) ' Component ',IPCOMP,' pre-simulation data for a:'
         WRITE(ITU,*) ' 2 node (ISV=20) WCH basic chiller unit '
         NITMS=3
         WRITE(ITU,*) ' ADATA ',(ADATA(IPCOMP,J),J=1,NITMS)
         NITMS=8
         WRITE(ITU,*) ' BDATA ',(BDATA(IPCOMP,J),J=1,NITMS)
         IF(ITU.EQ.IUOUT) THEN
            IX1=(IPCOMP/5)*5
            IF(IX1.EQ.IPCOMP.OR.IPCOMP.EQ.NPCOMP) call epagew
         END IF
      END IF

C Check user specified number of controlled variables
      NCITM=1
      IF(NCI(IPCOMP).NE.NCITM)
     &   WRITE(ITU,*) ' CMP36S warning: user specified wrong number',
     &                ' of controlled variables'

C Check component has 2 connections only, one per node, to water (node1) and
C air (node 2)
      NCONS=2
      NCONPN=1
      DO 10 IPCONC=1,MPCONC
      IPCON1=ICONDX(IPCOMP,1,IPCONC)
      IPCON2=ICONDX(IPCOMP,2,IPCONC)
      IF(IPCONC.LE.NCONPN) THEN
         IF(IPCON1.EQ.0.OR.IPCON2.EQ.0) THEN
            GOTO 990
         ELSE IF(ICONTP(IPCON1).NE.20.OR.ICONTP(IPCON2).NE.21) THEN
            GOTO 990
         END IF
      ELSE IF(IPCON1.NE.0.OR.IPCON2.NE.0) THEN
         GOTO 990
      END IF
   10 CONTINUE
      return
C
C Error handling
  990 WRITE(IUOUT,*) ' CMP36S: connection error for component ',IPCOMP
      WRITE(IUOUT,*) '         should be ',NCONS,' connection(s)'
      WRITE(IUOUT,*) '         ie  1st connection to water'
      WRITE(IUOUT,*) '             2nd connection to air'
      STOP ' CMP36S: unresolvable error'


      END


C ******************** CMP37S ********************
C
C CMP37S establishes for a plant component with plant db code 370 ie.
C 1 node (ISV=20) WCH air or evaporatively cooled heat rejection device
C whether the specified number of controlled variables is OK, and also
C whether the number of connections to this component is correct
C and whether the connected nodes are of a type as expected by the
C corresponding coefficient generator routine
C
      SUBROUTINE CMP37S(IPCOMP)
#include "plant.h"
#include "building.h"
C
      COMMON/OUTIN/IUOUT,IUIN
      COMMON/TC/ITC,ICNT
      COMMON/TRACE/ITCF,ITRACE(MTRACE),IZNTRC(MCOM),ITU

      COMMON/C9/NPCOMP,NCI(MPCOM),CDATA(MPCOM,MMISCD)
      COMMON/PDBDT/ADATA(MPCOM,MADATA),BDATA(MPCOM,MBDATA)
      COMMON/PCOND/CONVAR(MPCON,MCONVR),ICONTP(MPCON),
     &             ICONDX(MPCOM,MNODEC,MPCONC)

C Establish static data derivable from the data read from database
      BDATA(IPCOMP,1)=ADATA(IPCOMP,4)  

C Trace output
      IF(ITC.GT.0.AND.ITRACE(35).NE.0) THEN
         WRITE(ITU,*) ' Component ',IPCOMP,' pre-simulation data for a:'
         WRITE(ITU,*) ' 1 node (ISV=20) WCH heat rejection device'
         NITMS=3
         WRITE(ITU,*) ' ADATA ',(ADATA(IPCOMP,J),J=1,NITMS)
	 NITMS=1
         WRITE(ITU,*) ' BDATA ',(BDATA(IPCOMP,J),J=1,NITMS)
         NITMS=1
         WRITE(ITU,*) ' CDATA ',(CDATA(IPCOMP,J),J=1,NITMS)
         IF(ITU.EQ.IUOUT) THEN
            IX1=(IPCOMP/5)*5
            IF(IX1.EQ.IPCOMP.OR.IPCOMP.EQ.NPCOMP) call epagew
         END IF
      END IF
C
C Check user specified number of controlled variables
      NCITM=1
      IF(NCI(IPCOMP).NE.NCITM)
     &   WRITE(ITU,*) ' CMP37S warning: user specified wrong number',
     &                ' of controlled variables'
C
C Check component has 1 connection only, to water
      NCONS=1
      DO 10 IPCONC=1,MPCONC
      IPCON=ICONDX(IPCOMP,1,IPCONC)
      IF(IPCONC.LE.NCONS) THEN
         IF(IPCON.EQ.0) THEN
            GOTO 990
         ELSE IF(ICONTP(IPCON).NE.20) THEN
            GOTO 990
         END IF
      ELSE IF(IPCON.NE.0) THEN
         GOTO 990
      END IF
   10 CONTINUE
C
C
      RETURN
C
C Error handling
  990 WRITE(IUOUT,*) ' CMP37S: connection error for component ',IPCOMP
      WRITE(IUOUT,*) '         should be ',NCONS,' water connection(s)'
      STOP ' CMPS: unresolvable error'
C
      END
C 

C ******************** CMP38S ********************
C
C CMP38S establishes for a plant component with plant db code 380 ie.
C 1 node (ISV=20) WCH converging multi-leg junction
C whether the specified number of controlled variables is OK, and also
C whether the number of connections to this component is correct
C and whether the connected nodes are of a type as expected by the
C corresponding coefficient generator routine
C
      SUBROUTINE CMP38S(IPCOMP)
#include "plant.h"
#include "building.h"
C
      COMMON/OUTIN/IUOUT,IUIN
      COMMON/TC/ITC,ICNT
      COMMON/TRACE/ITCF,ITRACE(MTRACE),IZNTRC(MCOM),ITU
C
      COMMON/C9/NPCOMP,NCI(MPCOM),CDATA(MPCOM,MMISCD)
      COMMON/PDBDT/ADATA(MPCOM,MADATA),BDATA(MPCOM,MBDATA)
      COMMON/PCOND/CONVAR(MPCON,MCONVR),ICONTP(MPCON),
     &             ICONDX(MPCOM,MNODEC,MPCONC)
C

C Establish static data derivable from the data read from database
      BDATA(IPCOMP,1)=ADATA(IPCOMP,4) 

C Trace output
      IF(ITC.GT.0.AND.ITRACE(35).NE.0) THEN
         WRITE(ITU,*) ' Component ',IPCOMP,' pre-simulation data for a:'
         WRITE(ITU,*) ' 1 node (ISV=20) WCH multi-leg junction'
         NITMS=3
         WRITE(ITU,*) ' ADATA ',(ADATA(IPCOMP,J),J=1,NITMS)
	 NITMS=1
         WRITE(ITU,*) ' BDATA ',(BDATA(IPCOMP,J),J=1,NITMS)
         IF(ITU.EQ.IUOUT) THEN
            IX1=(IPCOMP/5)*5
            IF(IX1.EQ.IPCOMP.OR.IPCOMP.EQ.NPCOMP) call epagew
         END IF
      END IF
C
C Check user specified number of controlled variables
      NCITM=0
      IF(NCI(IPCOMP).NE.NCITM)
     &   WRITE(ITU,*) ' CMP38S warning: user specified wrong number',
     &                ' of controlled variables'
C
C Check component has N connections, all to water
      NCONS=NINT(BDATA(IPCOMP,1))
      DO 10 IPCONC=1,MPCONC
      IPCON=ICONDX(IPCOMP,1,IPCONC)
      IF(IPCONC.LE.NCONS) THEN
         IF(IPCON.EQ.0) THEN
            GOTO 990
         ELSE IF(ICONTP(IPCON).NE.20) THEN
            GOTO 990
         END IF
      ELSE IF(IPCON.NE.0) THEN
         GOTO 990
      END IF
   10 CONTINUE
C
C
      RETURN
C
C Error handling
  990 WRITE(IUOUT,*) ' CMP38S: connection error for component ',IPCOMP
      WRITE(IUOUT,*) '         should be ',NCONS,' water connection(s)'
      STOP ' CMP38S: unresolvable error'
C
      END
C
     
C ******************** CMP39S ********************
C
C CMP39S establishes for a plant component with plant db code 390 ie.
C 1 node (ISV=20) WCH pump with mass flow control
C whether the specified number of controlled variables is OK, and also
C whether the number of connections to this component is correct
C and whether the connected nodes are of a type as expected by the
C corresponding coefficient generator routine
C
      SUBROUTINE CMP39S(IPCOMP)
#include "plant.h"
#include "building.h"
C
      COMMON/OUTIN/IUOUT,IUIN
      COMMON/TC/ITC,ICNT
      COMMON/TRACE/ITCF,ITRACE(MTRACE),IZNTRC(MCOM),ITU
C
      COMMON/C9/NPCOMP,NCI(MPCOM),CDATA(MPCOM,MMISCD)
      COMMON/PDBDT/ADATA(MPCOM,MADATA),BDATA(MPCOM,MBDATA)
      COMMON/PCOND/CONVAR(MPCON,MCONVR),ICONTP(MPCON),
     &             ICONDX(MPCOM,MNODEC,MPCONC)
C
C Establish static data derivable from the data read from database
      BDATA(IPCOMP,1)=ADATA(IPCOMP,4)
      BDATA(IPCOMP,2)=ADATA(IPCOMP,5)
      BDATA(IPCOMP,3)=ADATA(IPCOMP,6)
C
C Trace output
      IF(ITC.GT.0.AND.ITRACE(35).NE.0) THEN
         WRITE(ITU,*) ' Component ',IPCOMP,' pre-simulation data for a:'
         WRITE(ITU,*) ' 1 node (ISV=20) WCH pump with mass flow control'
         NITMS=3
         WRITE(ITU,*) ' ADATA ',(ADATA(IPCOMP,J),J=1,NITMS)
         NITMS=3
         WRITE(ITU,*) ' BDATA ',(BDATA(IPCOMP,J),J=1,NITMS)
         NITMS=1
         WRITE(ITU,*) ' CDATA ',(CDATA(IPCOMP,J),J=1,NITMS)
         IF(ITU.EQ.IUOUT) THEN
            IX1=(IPCOMP/5)*5
            IF(IX1.EQ.IPCOMP.OR.IPCOMP.EQ.NPCOMP) call epagew
         END IF
      END IF
C
C Check user specified number of controlled variables
      NCITM=1
      IF(NCI(IPCOMP).NE.NCITM)
     &   WRITE(ITU,*) ' CMP39S warning: user specified wrong number',
     &                ' of controlled variables'
C
C Check component has 1 connection only, to water
      NCONS=1
      DO 10 IPCONC=1,MPCONC
      IPCON=ICONDX(IPCOMP,1,IPCONC)
      IF(IPCONC.LE.NCONS) THEN
         IF(IPCON.EQ.0) THEN
            GOTO 990
         ELSE IF(ICONTP(IPCON).NE.20) THEN
            GOTO 990
         END IF
      ELSE IF(IPCON.NE.0) THEN
         GOTO 990
      END IF
   10 CONTINUE
C
C
      RETURN
C
C Error handling
  990 WRITE(IUOUT,*) ' CMP39S: connection error for component ',IPCOMP
      WRITE(IUOUT,*) '         should be ',NCONS,' water connection(s)'
      STOP ' CMP39S: unresolvable error'
C
      END
C

C ******************** CMP40S ********************

C CMP40S establishes for a plant component with plant db code 400 ie.
C 3 node (ISV>19) AC  cooling coil fed by WCH system
C data derivable from the static manufacturers data already read from
C the database and saves it in the static data common block, and also
C whether the specified number of controlled variables is OK, and also
C whether the number of connections to this component is correct
C and whether the connected nodes are of a type as expected by the
C corresponding coefficient generator routine
C
C node 1 represents solid material (ISV=29)
C node 2 represents air            (ISV=21)
C node 3 represents water          (ISV=20)
C
      SUBROUTINE CMP40S(IPCOMP)
#include "plant.h"
#include "building.h"
C
      COMMON/OUTIN/IUOUT,IUIN
      COMMON/TC/ITC,ICNT
      COMMON/TRACE/ITCF,ITRACE(MTRACE),IZNTRC(MCOM),ITU
C
      COMMON/C9/NPCOMP,NCI(MPCOM),CDATA(MPCOM,MMISCD)
      COMMON/PDBDT/ADATA(MPCOM,MADATA),BDATA(MPCOM,MBDATA)
      COMMON/PCOND/CONVAR(MPCON,MCONVR),ICONTP(MPCON),
     &             ICONDX(MPCOM,MNODEC,MPCONC)
C
C Establish static data derivable from the data read from database
      BDATA(IPCOMP,1)=ADATA(IPCOMP,5)
      BDATA(IPCOMP,2)=ADATA(IPCOMP,6)
      BDATA(IPCOMP,3)=ADATA(IPCOMP,7)
      BDATA(IPCOMP,4)=ADATA(IPCOMP,8)
      BDATA(IPCOMP,5)=ADATA(IPCOMP,9)
      BDATA(IPCOMP,6)=ADATA(IPCOMP,10)
      BDATA(IPCOMP,7)=ADATA(IPCOMP,11)
C
C Trace output
      IF(ITC.GT.0.AND.ITRACE(35).NE.0) THEN
         WRITE(ITU,*) ' Component ',IPCOMP,' pre-simulation data for a:'
         WRITE(ITU,*) ' 3 node (ISV>19) AC  counterflow cooling coil',
     &                ' fed by WCH system'
         NITMS=4
         WRITE(ITU,*) ' ADATA ',(ADATA(IPCOMP,J),J=1,NITMS)
         NITMS=7
         WRITE(ITU,*) ' BDATA ',(ADATA(IPCOMP,J),J=1,NITMS)
         IF(ITU.EQ.IUOUT) THEN
            IX1=(IPCOMP/5)*5
            IF(IX1.EQ.IPCOMP.OR.IPCOMP.EQ.NPCOMP) call epagew
         END IF
      END IF
C
C Check user specified number of controlled variables
      NCITM=0
      IF(NCI(IPCOMP).NE.NCITM)
     &   WRITE(ITU,*) ' CMP40S warning: user specified wrong number',
     &                ' of controlled variables'
C
C Check component has 1st connection to "moist air"
C                     2nd connection to water
      NCONS=2
      NCONPN=1
      DO 10 IPCONC=1,MPCONC
      IPCON1=ICONDX(IPCOMP,2,IPCONC)
      IPCON2=ICONDX(IPCOMP,3,IPCONC)
      IF(IPCONC.LE.NCONPN) THEN
         IF(IPCON1.EQ.0.OR.IPCON2.EQ.0) THEN
            GOTO 990
         ELSE IF(ICONTP(IPCON1).NE.21.OR.ICONTP(IPCON2).NE.20) THEN
            GOTO 990
         END IF
      ELSE IF(IPCON1.NE.0.OR.IPCON2.NE.0) THEN
         GOTO 990
      END IF
   10 CONTINUE

C
C
      RETURN
C
C Error handling
  990 WRITE(IUOUT,*) ' CMP40S: connection error for component ',IPCOMP
      WRITE(IUOUT,*) '         should be ',NCONS,' connection(s)'
      WRITE(IUOUT,*) '         ie  1st connection to air'
      WRITE(IUOUT,*) '             2nd connection to water'
      STOP ' CMP40S: unresolvable error'
C
      END
C
C ******************** CMP41S ********************
C
C CMP41S establishes for a plant component with plant db code 410 ie.
C 3 node (ISV>19) AC  heating coil fed by WCH system
C data derivable from the static manufacturers data already read from
C the database and saves it in the static data common block, and also
C whether the specified number of controlled variables is OK, and also
C whether the number of connections to this component is correct
C and whether the connected nodes are of a type as expected by the
C corresponding coefficient generator routine
C
C node 1 represents solid material (ISV=29)
C node 2 represents air            (ISV=21)
C node 3 represents water          (ISV=20)
C
      SUBROUTINE CMP41S(IPCOMP)
#include "plant.h"
#include "building.h"
C
      COMMON/OUTIN/IUOUT,IUIN
      COMMON/TC/ITC,ICNT
      COMMON/TRACE/ITCF,ITRACE(MTRACE),IZNTRC(MCOM),ITU
C
      COMMON/C9/NPCOMP,NCI(MPCOM),CDATA(MPCOM,MMISCD)
      COMMON/PDBDT/ADATA(MPCOM,MADATA),BDATA(MPCOM,MBDATA)
      COMMON/PCOND/CONVAR(MPCON,MCONVR),ICONTP(MPCON),
     &             ICONDX(MPCOM,MNODEC,MPCONC)
C
C Establish static data derivable from the data read from database
      BDATA(IPCOMP,1)=ADATA(IPCOMP,5)
      BDATA(IPCOMP,2)=ADATA(IPCOMP,6)
      BDATA(IPCOMP,3)=ADATA(IPCOMP,7)
      BDATA(IPCOMP,4)=ADATA(IPCOMP,8)
      BDATA(IPCOMP,5)=ADATA(IPCOMP,9)
C
C Trace output
      IF(ITC.GT.0.AND.ITRACE(35).NE.0) THEN
         WRITE(ITU,*) ' Component ',IPCOMP,' pre-simulation data for a:'
         WRITE(ITU,*) ' 3 node (ISV>19) AC  counterflow heating coil',
     &                ' fed by WCH system'
         NITMS=4
         WRITE(ITU,*) ' ADATA ',(ADATA(IPCOMP,J),J=1,NITMS)
         NITMS=5
         WRITE(ITU,*) ' BDATA ',(ADATA(IPCOMP,J),J=1,NITMS)
         IF(ITU.EQ.IUOUT) THEN
            IX1=(IPCOMP/5)*5
            IF(IX1.EQ.IPCOMP.OR.IPCOMP.EQ.NPCOMP) call epagew
         END IF
      END IF
C
C Check user specified number of controlled variables
      NCITM=0
      IF(NCI(IPCOMP).NE.NCITM)
     &   WRITE(ITU,*) ' CMP41S warning: user specified wrong number',
     &                ' of controlled variables'
C
C Check component has 1st connection to "moist air"
C                     2nd connection to water
      NCONS=2
      NCONPN=1
      DO 10 IPCONC=1,MPCONC
      IPCON1=ICONDX(IPCOMP,2,IPCONC)
      IPCON2=ICONDX(IPCOMP,3,IPCONC)
      IF(IPCONC.LE.NCONPN) THEN
         IF(IPCON1.EQ.0.OR.IPCON2.EQ.0) THEN
            GOTO 990
         ELSE IF(ICONTP(IPCON1).NE.21.OR.ICONTP(IPCON2).NE.20) THEN
            GOTO 990
         END IF
      ELSE IF(IPCON1.NE.0.OR.IPCON2.NE.0) THEN
         GOTO 990
      END IF
   10 CONTINUE
C
C
      RETURN
C
C Error handling
  990 WRITE(IUOUT,*) ' CMP41S: connection error for component ',IPCOMP
      WRITE(IUOUT,*) '         should be ',NCONS,' connection(s)'
      WRITE(IUOUT,*) '         ie  1st connection to air'
      WRITE(IUOUT,*) '             2nd connection to water'
      STOP ' CMP41S: unresolvable error'
C
      END

C ******************** CMP42S ********************

C CMP42S establishes for a plant component with plant db code 420 ie.
C C 2 node (ISV=20) modulating WCH boiler with on/off control
C data derivable from the static manufacturers data already read from
C the database and saves it in the static data common block, and also
C whether the specified number of controlled variables is OK, and also
C whether the number of connections to this component is correct
C and whether the connected nodes are of a type as expected by the
C corresponding coefficient generator routine
C
      SUBROUTINE CMP42S(IPCOMP)
#include "plant.h"
#include "building.h"
C
      COMMON/OUTIN/IUOUT,IUIN
      COMMON/TC/ITC,ICNT
      COMMON/TRACE/ITCF,ITRACE(MTRACE),IZNTRC(MCOM),ITU
      COMMON/C9/NPCOMP,NCI(MPCOM),CDATA(MPCOM,MMISCD)
      COMMON/PDBDT/ADATA(MPCOM,MADATA),BDATA(MPCOM,MBDATA)
      COMMON/PCOND/CONVAR(MPCON,MCONVR),ICONTP(MPCON),
     &             ICONDX(MPCOM,MNODEC,MPCONC)
C
C Establish static data derivable from the data read from database
      BDATA(IPCOMP,1)=ADATA(IPCOMP,3)
      BDATA(IPCOMP,2)=ADATA(IPCOMP,4)
      BDATA(IPCOMP,3)=ADATA(IPCOMP,5)
      BDATA(IPCOMP,4)=ADATA(IPCOMP,6)
      BDATA(IPCOMP,5)=ADATA(IPCOMP,7)
      BDATA(IPCOMP,6)=ADATA(IPCOMP,8)
      BDATA(IPCOMP,7)=ADATA(IPCOMP,9)
      BDATA(IPCOMP,8)=ADATA(IPCOMP,10)
      BDATA(IPCOMP,9)=ADATA(IPCOMP,11)
      BDATA(IPCOMP,10)=ADATA(IPCOMP,12)
      BDATA(IPCOMP,11)=ADATA(IPCOMP,13)
      BDATA(IPCOMP,12)=ADATA(IPCOMP,14)
      BDATA(IPCOMP,13)=ADATA(IPCOMP,15)
      BDATA(IPCOMP,14)=ADATA(IPCOMP,16)
      BDATA(IPCOMP,15)=ADATA(IPCOMP,17)
      BDATA(IPCOMP,16)=ADATA(IPCOMP,18)
      BDATA(IPCOMP,17)=ADATA(IPCOMP,19)
      BDATA(IPCOMP,18)=ADATA(IPCOMP,20)
      BDATA(IPCOMP,19)=ADATA(IPCOMP,21)
      BDATA(IPCOMP,20)=ADATA(IPCOMP,22)
      BDATA(IPCOMP,21)=ADATA(IPCOMP,23)
C
C Trace output
      IF(ITC.GT.0.AND.ITRACE(35).NE.0) THEN
         WRITE(ITU,*) ' Component ',IPCOMP,' pre-simulation data for a:'
         WRITE(ITU,*) ' 2 node (ISV=20) modulating WCH boiler '
         WRITE(ITU,*) ' with on/off control '
         NITMS=2
         WRITE(ITU,*) ' ADATA ',(ADATA(IPCOMP,J),J=1,NITMS)
         NITMS=10
         WRITE(ITU,*) ' BDATA ',(ADATA(IPCOMP,J),J=1,NITMS)
         NITMS=1
         WRITE(ITU,*) ' CDATA ',(CDATA(IPCOMP,J),J=1,NITMS)
         IF(ITU.EQ.IUOUT) THEN
            IX1=(IPCOMP/5)*5
            IF(IX1.EQ.IPCOMP.OR.IPCOMP.EQ.NPCOMP) call epagew
         END IF
      END IF
C
C Check user specified number of controlled variables
      NCITM=1
      IF(NCI(IPCOMP).NE.NCITM)
     &   WRITE(ITU,*) ' CMP42S warning: user specified wrong number',
     &                ' of controlled variables'
C
C Check component has 1 connection only, to water
      NCONS=1
      DO 10 IPCONC=1,MPCONC
      IPCON=ICONDX(IPCOMP,1,IPCONC)
      IF(IPCONC.LE.NCONS) THEN
         IF(IPCON.EQ.0) THEN
            GOTO 990
         ELSE IF(ICONTP(IPCON).NE.20) THEN
            GOTO 990
         END IF
      ELSE IF(IPCON.NE.0) THEN
         GOTO 990
      END IF
   10 CONTINUE
C
C
      RETURN
C
C Error handling
  990 WRITE(IUOUT,*) ' CMP42S: connection error for component ',IPCOMP
      WRITE(IUOUT,*) '         should be ',NCONS,' water connection(s)'
      STOP ' CMP42S: unresolvable error'
C
      END
C
      
C ******************** CMP43S ********************
C
C CMP43S establishes for a plant component with plant db code 430 ie.
C 2 node (ISV>20) AC  cooling coil fed by WCH system
C data derivable from the static manufacturers data already read from
C the database and saves it in the static data common block, and also
C whether the specified number of controlled variables is OK, and also
C whether the number of connections to this component is correct
C and whether the connected nodes are of a type as expected by the
C corresponding coefficient generator routine
C
C node 1 represents solid&air material (ISV=21)
C node 2 represents water              (ISV=20)
C
      SUBROUTINE CMP43S(IPCOMP)
#include "plant.h"
#include "building.h"

      COMMON/OUTIN/IUOUT,IUIN
      COMMON/TC/ITC,ICNT
      COMMON/TRACE/ITCF,ITRACE(MTRACE),IZNTRC(MCOM),ITU

      COMMON/C9/NPCOMP,NCI(MPCOM),CDATA(MPCOM,MMISCD)
      COMMON/PDBDT/ADATA(MPCOM,MADATA),BDATA(MPCOM,MBDATA)
      COMMON/PCOND/CONVAR(MPCON,MCONVR),ICONTP(MPCON),
     &             ICONDX(MPCOM,MNODEC,MPCONC)

C Establish static data derivable from the data read from database
      BDATA(IPCOMP,1)=ADATA(IPCOMP,4)
      BDATA(IPCOMP,2)=ADATA(IPCOMP,5)
      BDATA(IPCOMP,3)=ADATA(IPCOMP,6)
      BDATA(IPCOMP,4)=ADATA(IPCOMP,7)
      BDATA(IPCOMP,5)=ADATA(IPCOMP,8)
      BDATA(IPCOMP,6)=ADATA(IPCOMP,9)
      BDATA(IPCOMP,7)=ADATA(IPCOMP,10)
      BDATA(IPCOMP,8)=ADATA(IPCOMP,11)
      BDATA(IPCOMP,9)=ADATA(IPCOMP,12)
      BDATA(IPCOMP,10)=ADATA(IPCOMP,13)

C Trace output
      IF(ITC.GT.0.AND.ITRACE(35).NE.0) THEN
         WRITE(ITU,*) ' Component ',IPCOMP,' pre-simulation data for a:'
         WRITE(ITU,*) ' 2 node (ISV>20) AC  coling coil',
     &                ' fed by WCH system'
         NITMS=3
         WRITE(ITU,*) ' ADATA ',(ADATA(IPCOMP,J),J=1,NITMS)
         NITMS=10
         WRITE(ITU,*) ' BDATA ',(ADATA(IPCOMP,J),J=1,NITMS)
         IF(ITU.EQ.IUOUT) THEN
            IX1=(IPCOMP/5)*5
            IF(IX1.EQ.IPCOMP.OR.IPCOMP.EQ.NPCOMP) call epagew
         END IF
      END IF

C Check user specified number of controlled variables
      NCITM=0
      IF(NCI(IPCOMP).NE.NCITM)
     &   WRITE(ITU,*) ' CMP41S warning: user specified wrong number',
     &                ' of controlled variables'

C Check component has 1st connection to "moist air"
C                     2nd connection to water
      NCONS=2
      NCONPN=1
      DO 10 IPCONC=1,MPCONC
      IPCON1=ICONDX(IPCOMP,1,IPCONC)
      IPCON2=ICONDX(IPCOMP,2,IPCONC)
      IF(IPCONC.LE.NCONPN) THEN
         IF(IPCON1.EQ.0.OR.IPCON2.EQ.0) THEN
            GOTO 990
         ELSE IF(ICONTP(IPCON1).NE.21.OR.ICONTP(IPCON2).NE.20) THEN
            GOTO 990
         END IF
      ELSE IF(IPCON1.NE.0.OR.IPCON2.NE.0) THEN
         GOTO 990
      END IF
   10 CONTINUE
      RETURN

C Error handling
  990 WRITE(IUOUT,*) ' CMP43S: connection error for component ',IPCOMP
      WRITE(IUOUT,*) '         should be ',NCONS,' connection(s)'
      WRITE(IUOUT,*) '         ie  1st connection to air'
      WRITE(IUOUT,*) '             2nd connection to water'
      STOP ' CMP43S: unresolvable error'

      END

C ******************** CMP44S ********************
C
C CMP44S establishes for a plant component with plant db code 440 ie.
C 2 node (ISV=20) WCH basic radiator
C whether the specified number of controlled variables is OK, and also
C whether the number of connections to this component is correct
C and whether the connected nodes are of a type as expected by the
C corresponding coefficient generator routine
C
      SUBROUTINE CMP44S(IPCOMP)
#include "plant.h"
#include "building.h"
C
      COMMON/OUTIN/IUOUT,IUIN
      COMMON/TC/ITC,ICNT
      COMMON/TRACE/ITCF,ITRACE(MTRACE),IZNTRC(MCOM),ITU
C
      COMMON/C9/NPCOMP,NCI(MPCOM),CDATA(MPCOM,MMISCD)
      COMMON/PDBDT/ADATA(MPCOM,MADATA),BDATA(MPCOM,MBDATA)
      COMMON/PCOND/CONVAR(MPCON,MCONVR),ICONTP(MPCON),
     &             ICONDX(MPCOM,MNODEC,MPCONC)

C Establish static data derivable from the data read from database
      NBDAT=11
      DO 5 IBDAT=1,NBDAT
         BDATA(IPCOMP,IBDAT)=ADATA(IPCOMP,IBDAT+2)
    5 CONTINUE

C Trace output
      IF(ITC.GT.0.AND.ITRACE(35).NE.0) THEN
         WRITE(ITU,*) ' Component ',IPCOMP,' pre-simulation data for a:'
         WRITE(ITU,*) ' 2 node (ISV=20) WCH basic radiator'
         NITMS=2
         WRITE(ITU,*) ' ADATA ',(ADATA(IPCOMP,J),J=1,NITMS)
         NITMS=NBDAT
         WRITE(ITU,*) ' BDATA ',(BDATA(IPCOMP,J),J=1,NITMS)
         IF(ITU.EQ.IUOUT) THEN
            IX1=(IPCOMP/5)*5
            IF(IX1.EQ.IPCOMP.OR.IPCOMP.EQ.NPCOMP) call epagew
         END IF
      END IF
C
C Check user specified number of controlled variables
      NCITM=0
      IF(NCI(IPCOMP).NE.NCITM)
     &   WRITE(ITU,*) ' CMP44S warning: user specified wrong number',
     &                ' of controlled variables'
C
C Check component has 1 connection only, to water
      NCONS=1
      DO 10 IPCONC=1,MPCONC
      IPCON=ICONDX(IPCOMP,1,IPCONC)
      IF(IPCONC.LE.NCONS) THEN
         IF(IPCON.EQ.0) THEN
            GOTO 990
         ELSE IF(ICONTP(IPCON).NE.20) THEN
            GOTO 990
         END IF
      ELSE IF(IPCON.NE.0) THEN
         GOTO 990
      END IF
   10 CONTINUE
C
C
      RETURN
C
C Error handling
  990 WRITE(IUOUT,*) ' CMP44S: connection error for component ',IPCOMP
      WRITE(IUOUT,*) '         should be ',NCONS,' water connection(s)'
      STOP ' CMP44S: unresolvable error'
C
      END

C ******************** CMP45S ********************
C CMP45S establishes for a plant component with plant db code 450 ie.
C 1 node (ISV=20) WCH air-source heat pump feeding a hydronic heating system
C whether the specified number of controlled variables is OK, and also
C whether the number of connections to this component is correct
C and whether the connected nodes are of a type as expected by the
C corresponding coefficient generator routine.
C
      SUBROUTINE CMP45S(IPCOMP)

      implicit none

#include "plant.h"
#include "building.h"
C
      COMMON/OUTIN/IUOUT,IUIN
      COMMON/TC/ITC,ICNT
      COMMON/TRACE/ITCF,ITRACE(MTRACE),IZNTRC(MCOM),ITU

      COMMON/C9/NPCOMP,NCI(MPCOM),CDATA(MPCOM,MMISCD)
      COMMON/PDBDT/ADATA(MPCOM,MADATA),BDATA(MPCOM,MBDATA)
      COMMON/PCOND/CONVAR(MPCON,MCONVR),ICONTP(MPCON),
     &             ICONDX(MPCOM,MNODEC,MPCONC)

      COMMON/ASHPvar1/CompMass,AveSpHt,UAMod,CarEffMod,COPa0,COPa1,
     &COPa2,COPa3,Compa0,Compa1,Compa2,Compa3,
     &CompressPf,PumpRating,PumpPf,RatedFlow,
     &FanRating,FanPf,CtlRating,CtlPf,ToutMax,TinMax,DefrostT,
     &DefrostTime,Defrostb0,Defrostb1,DefrostLockout,DefrostMinTime,
     &DefrostMaxTime,NomRetT,NomRetTDeadB,TempCompS,TempCompE,
     &TempCompc0,DefrostDur,DefrostLockDur

      COMMON/ASHPvar2/COPModel,CompModel,DefrostCalc,AmbientTempComp,
     &DeviceONOFFp,DeviceONOFF

      COMMON/ASHPvar3/CallforHeat,InDeadB,DefrostLock,InDefrost

      REAL SMALL 
      PARAMETER (SMALL=1.0E-20)

      INTEGER COPModel,CompModel,DefrostCalc,AmbientTempComp,
     &DeviceONOFFp,DeviceONOFF

      REAL CompMass,AveSpHt,UAMod,CarEffMod,COPa0,COPa1,
     &COPa2,COPa3,Compa0,Compa1,Compa2,Compa3,CompressPf,
     &PumpRating,PumpPf,RatedFlow,FanRating,FanPf,CtlRating,CtlPf,
     &ToutMax,TinMax,DefrostTime,DefrostT,Defrostb0,Defrostb1,
     &DefrostLockout,DefrostMinTime,DefrostMaxTime,NomRetT,NomRetTDeadB,
     &TempCompS,TempCompE,TempCompc0,DefrostDur,DefrostLockDur

      LOGICAL CallforHeat,InDeadB,DefrostLock,InDefrost,ConError

      INTEGER IUOUT,IUIN,ITC,ICNT,ITCF,ITRACE,IZNTRC,ITU,NPCOMP,NCI,
     &ICONTP,ICONDX,J,NCITM,NCONS,IPCONC,IPCOMP,IPCON,IX1,NITMS
      
      REAL CDATA,ADATA,BDATA,CONVAR

      INTEGER IDAT

      CHARACTER OUTS*248
      
C To be edited to include increased data entry nos. 

C Establish static data derivable from the data read from database
      DO 10 IDAT=4,36
10      BDATA(IPCOMP,IDAT-3)=ADATA(IPCOMP,IDAT)

C Initialise parameters      
      InDeadB=.false.
      CallforHeat=.false.
      DefrostLock=.false.
      InDefrost=.false.
      DefrostDur=0.0
      DefrostLockDur=0.0
      DeviceONOFF=0
      DeviceONOFFp=0

C Assign variables to be used in coeff generator. 
C ADATA: 
C Mass of component (solids+liquid) (kg)
      CompMass=ADATA(IPCOMP,1)
C Mass weighted average specific heat node (J/kgK)
      AveSpHt=ADATA(IPCOMP,2)
C UA modulus for component (W/K)
      UAMod=ADATA(IPCOMP,3)

C BDATA: 
C COP model [1- fixed 2 - modified Carnot efficiency; 3- cubic polynomial]
      COPModel=NINT(BDATA(IPCOMP,1))

C COP empirical coefficient a0 (or fixed COP, or Eff. modifier)
      COPa0=BDATA(IPCOMP,2)

C COP empirical coefficient a1 [Ti]
      COPa1=BDATA(IPCOMP,3)

C COP empirical coefficient a2 [Ti^2]
      COPa2=BDATA(IPCOMP,4)

C COP empirical coefficient a3 [Ti^3]
      COPa3=BDATA(IPCOMP,5)

C Compressor model (W) 
      CompModel=NINT(BDATA(IPCOMP,6))

C Comp empirical coefficient a0 (or fixed COP, or Eff. modifier)
      Compa0=BDATA(IPCOMP,7)

C Comp empirical coefficient a1 
      Compa1=BDATA(IPCOMP,8)

C Comp empirical coefficient a2 
      Compa2=BDATA(IPCOMP,9)

C Comp empirical coefficient a3 
      Compa3=BDATA(IPCOMP,10)
C ****
C Compressor pf (-)
      CompressPf=BDATA(IPCOMP,11)
      IF(CompressPf.LT.SMALL)THEN
        WRITE(OUTS,'(a)')'Error in ASHP: comp pf is close to zero!'
        CALL EDISP(IUOUT,OUTS)
        STOP
      
      ENDIF

C Pump rating (W)
      PumpRating=BDATA(IPCOMP,12)

C Pump pf (-)
      PumpPf=BDATA(IPCOMP,13)

C Flowrate at rated pump power (l/s)
      RatedFlow=BDATA(IPCOMP,14)
      IF(RatedFlow.LT.SMALL)THEN
        WRITE(OUTS,'(a)')'Error in ASHP: rated flow is close to zero!'
        CALL EDISP(IUOUT,OUTS)
        STOP
      ENDIF

C Fan rating (W)
      FanRating=BDATA(IPCOMP,15)

C Fan power factor (-)
      FanPf=BDATA(IPCOMP,16)
      IF(FanPf.LT.SMALL)THEN
        WRITE(OUTS,'(a)')'Error in ASHP: fan pf is close to zero!'
        CALL EDISP(IUOUT,OUTS)
        STOP
      ENDIF

C Controller power (W)
      CtlRating=BDATA(IPCOMP,17)

C Controller power factor (W)
      CtlPf=BDATA(IPCOMP,18)
      IF(CtlPf.LT.SMALL)THEN
        WRITE(OUTS,'(a)')'Error in ASHP: ctl pf is close to zero!'
        CALL EDISP(IUOUT,OUTS)
        STOP
      ENDIF

C To max (degC)
      ToutMax=BDATA(IPCOMP,19)

C Ti max (degC)
      TinMax=BDATA(IPCOMP,20)

C Defrost cycle trigger ambient temp (degC)
      DefrostT=BDATA(IPCOMP,21)

C Defrost cycle time calc (0-no defrost 1-user def 2-f(RH))
      DefrostCalc=NINT(BDATA(IPCOMP,22))

C Defrost cycle  calc coefficient b1 or fixed defrost time (-)
      Defrostb0=BDATA(IPCOMP,23)

C Defrost cycle  calc coefficient b2 (-)
      Defrostb1=BDATA(IPCOMP,24)

C Defrost cycle  lockout time (mins)
      DefrostLockout=BDATA(IPCOMP,25)

C Min defrost time (mins)
      DefrostMinTime=BDATA(IPCOMP,26)

C Max defrost time (mins)
      DefrostMaxTime=BDATA(IPCOMP,27)

C AmbientTemp compensation on/off
      AmbientTempComp=NINT(BDATA(IPCOMP,28))

C Nominal water return temperature (Deg C)
      NomRetT=BDATA(IPCOMP,29)
      IF(NomRetT.GE.TinMax)THEN
        WRITE(OUTS,'(a)')'Error in ASHP Tnom => Tin max'
        call EDISP(IUOUT,OUTS)
        STOP
      ENDIF

C Nominal water return deadband (Deg C)
      NomRetTDeadB=BDATA(IPCOMP,30)
      IF((NomRetT+0.5*(NomRetTDeadB)).GE.TinMax)THEN
        WRITE(OUTS,'(a)')'Error in ASHP Tnom + TdeadB < Tin max'
        call EDISP(IUOUT,OUTS)
        STOP
      ENDIF

C Ambient temperature for temp compensation start [Deg C]
      TempCompS=BDATA(IPCOMP,31)

C Ambient temperature for temp compensation end [Deg C]
      TempCompE=BDATA(IPCOMP,32)

C Temp compensation gradient (-)
      TempCompc0=BDATA(IPCOMP,33)


C Trace output
      IF(ITC.GT.0.AND.ITRACE(35).NE.0) THEN
         WRITE(ITU,*) ' Component ',IPCOMP,' pre-simulation data for a:'
         WRITE(ITU,*) ' 1 node (ISV=20) WCH heat rejection device'
         NITMS=3
         WRITE(ITU,*) ' ADATA ',(ADATA(IPCOMP,J),J=1,NITMS)
	 NITMS=33
         WRITE(ITU,*) ' BDATA ',(BDATA(IPCOMP,J),J=1,NITMS)
         NITMS=1
         WRITE(ITU,*) ' CDATA ',(CDATA(IPCOMP,J),J=1,NITMS)
         IF(ITU.EQ.IUOUT) THEN
            IX1=(IPCOMP/5)*5
            IF(IX1.EQ.IPCOMP.OR.IPCOMP.EQ.NPCOMP) call epagew
         ENDIF
      ENDIF
C
C Check user specified number of controlled variables
      NCITM=1
      IF(NCI(IPCOMP).NE.NCITM)
     &   WRITE(ITU,*) ' CMP45S warning: user specified wrong number',
     &                ' of controlled variables'

C Check for a single connection to water.
      ConError=.false.
      NCONS=1
      IPCONC=1
      DO WHILE(IPCONC.LE.MPCONC.AND..NOT.ConError)
        IPCON=ICONDX(IPCOMP,1,IPCONC)
        IF(IPCONC.LE.NCONS) THEN
          IF(IPCON.EQ.0) THEN
            ConError=.true.
          ELSE IF(ICONTP(IPCON).NE.20) THEN
            ConError=.true.
          END IF
        ELSE IF(IPCON.NE.0) THEN
          ConError=.true.
        END IF
        IPCONC=IPCONC+1
      ENDDO

C Error handling
      IF(ConError)THEN
        WRITE(IUOUT,*) 'CMP45S: connection error for component ',IPCOMP
        WRITE(IUOUT,*) '        should be ',NCONS,' water connection(s)'
        STOP 'CMP45S: unresolvable error'
      ENDIF
C
      END

C ******************** CMP46S ********************

C CMP46S establishes for a plant component with plant db code 420 ie.
C C 2 node (ISV=20) modulating WCH boiler with on/off control
C data derivable from the static manufacturers data already read from
C the database and saves it in the static data common block, and also
C whether the specified number of controlled variables is OK, and also
C whether the number of connections to this component is correct
C and whether the connected nodes are of a type as expected by the
C corresponding coefficient generator routine
C
      SUBROUTINE CMP46S(IPCOMP)
#include "plant.h"
#include "building.h"
C
      COMMON/OUTIN/IUOUT,IUIN
      COMMON/TC/ITC,ICNT
      COMMON/TRACE/ITCF,ITRACE(MTRACE),IZNTRC(MCOM),ITU
      COMMON/C9/NPCOMP,NCI(MPCOM),CDATA(MPCOM,MMISCD)
      COMMON/PDBDT/ADATA(MPCOM,MADATA),BDATA(MPCOM,MBDATA)
      COMMON/PCOND/CONVAR(MPCON,MCONVR),ICONTP(MPCON),
     &             ICONDX(MPCOM,MNODEC,MPCONC)
C
C Establish static data derivable from the data read from database
      BDATA(IPCOMP,1)=ADATA(IPCOMP,3)
      BDATA(IPCOMP,2)=ADATA(IPCOMP,4)
      BDATA(IPCOMP,3)=ADATA(IPCOMP,5)
      BDATA(IPCOMP,4)=ADATA(IPCOMP,6)
      BDATA(IPCOMP,5)=ADATA(IPCOMP,7)
      BDATA(IPCOMP,6)=ADATA(IPCOMP,8)
      BDATA(IPCOMP,7)=ADATA(IPCOMP,9)
      BDATA(IPCOMP,8)=ADATA(IPCOMP,10)
      BDATA(IPCOMP,9)=ADATA(IPCOMP,11)
      BDATA(IPCOMP,10)=ADATA(IPCOMP,12)
      BDATA(IPCOMP,11)=ADATA(IPCOMP,13)
      BDATA(IPCOMP,12)=ADATA(IPCOMP,14)
      BDATA(IPCOMP,13)=ADATA(IPCOMP,15)
      BDATA(IPCOMP,14)=ADATA(IPCOMP,16)
      BDATA(IPCOMP,15)=ADATA(IPCOMP,17)
      BDATA(IPCOMP,16)=ADATA(IPCOMP,18)
      BDATA(IPCOMP,17)=ADATA(IPCOMP,19)
      BDATA(IPCOMP,18)=ADATA(IPCOMP,20)
      BDATA(IPCOMP,19)=ADATA(IPCOMP,21)
      BDATA(IPCOMP,20)=ADATA(IPCOMP,22)
      BDATA(IPCOMP,21)=ADATA(IPCOMP,23)
      BDATA(IPCOMP,22)=ADATA(IPCOMP,24)
      BDATA(IPCOMP,23)=ADATA(IPCOMP,25)
      BDATA(IPCOMP,24)=ADATA(IPCOMP,26)
      BDATA(IPCOMP,25)=ADATA(IPCOMP,27)
      BDATA(IPCOMP,26)=ADATA(IPCOMP,28)
      BDATA(IPCOMP,27)=ADATA(IPCOMP,29)
      BDATA(IPCOMP,28)=ADATA(IPCOMP,30)
      BDATA(IPCOMP,29)=ADATA(IPCOMP,31)
      BDATA(IPCOMP,30)=ADATA(IPCOMP,32)

C Trace output
      IF(ITC.GT.0.AND.ITRACE(35).NE.0) THEN
         WRITE(ITU,*) ' Component ',IPCOMP,' pre-simulation data for a:'
         WRITE(ITU,*) ' 2 node (ISV=20) advanced modulating WCH boiler '
         WRITE(ITU,*) ' model with on/off control '
         NITMS=2
         WRITE(ITU,*) ' ADATA ',(ADATA(IPCOMP,J),J=1,NITMS)
         NITMS=10
         WRITE(ITU,*) ' BDATA ',(ADATA(IPCOMP,J),J=1,NITMS)
         NITMS=1
         WRITE(ITU,*) ' CDATA ',(CDATA(IPCOMP,J),J=1,NITMS)
         IF(ITU.EQ.IUOUT) THEN
            IX1=(IPCOMP/5)*5
            IF(IX1.EQ.IPCOMP.OR.IPCOMP.EQ.NPCOMP) call epagew
         END IF
      END IF
C
C Check user specified number of controlled variables
      NCITM=1
      IF(NCI(IPCOMP).NE.NCITM)
     &   WRITE(ITU,*) ' CMP46S warning: user specified wrong number',
     &                ' of controlled variables'
C
C Check component has 1 connection only, to water
      NCONS=1
      DO 10 IPCONC=1,MPCONC
      IPCON=ICONDX(IPCOMP,1,IPCONC)
      IF(IPCONC.LE.NCONS) THEN
         IF(IPCON.EQ.0) THEN
            GOTO 990
         ELSE IF(ICONTP(IPCON).NE.20) THEN
            GOTO 990
         END IF
      ELSE IF(IPCON.NE.0) THEN
         GOTO 990
      END IF
   10 CONTINUE
C
C
      RETURN
C
C Error handling
  990 WRITE(IUOUT,*) ' CMP46S: connection error for component ',IPCOMP
      WRITE(IUOUT,*) '         should be ',NCONS,' water connection(s)'
      STOP ' CMP46S: unresolvable error'
C
      END
C
      
C ******************** CMP50S ********************
C
C CMP50S establishes for a plant component with plant db code 500 ie.
C 1 node (ISV=29) WCH thermostatic valve
C whether the specified number of controlled variables is OK, and also
C whether the number of connections to this component is correct
C and whether the connected nodes are of a type as expected by the
C corresponding coefficient generator routine
C
      SUBROUTINE CMP50S(IPCOMP)
#include "plant.h"
#include "building.h"
C
      COMMON/OUTIN/IUOUT,IUIN
      COMMON/TC/ITC,ICNT
      COMMON/TRACE/ITCF,ITRACE(MTRACE),IZNTRC(MCOM),ITU
C
      COMMON/C9/NPCOMP,NCI(MPCOM),CDATA(MPCOM,MMISCD)
      COMMON/PDBDT/ADATA(MPCOM,MADATA),BDATA(MPCOM,MBDATA)
      COMMON/PCOND/CONVAR(MPCON,MCONVR),ICONTP(MPCON),
     &             ICONDX(MPCOM,MNODEC,MPCONC)
C
C Establish static data derivable from the data read from database
      BDATA(IPCOMP,1)=ADATA(IPCOMP,3)
      BDATA(IPCOMP,2)=ADATA(IPCOMP,4)
      BDATA(IPCOMP,3)=ADATA(IPCOMP,5)
      BDATA(IPCOMP,4)=ADATA(IPCOMP,6)
      BDATA(IPCOMP,5)=ADATA(IPCOMP,7)
      BDATA(IPCOMP,6)=ADATA(IPCOMP,8)
C
C Trace output
      IF(ITC.GT.0.AND.ITRACE(35).NE.0) THEN
         WRITE(ITU,*) ' Component ',IPCOMP,' pre-simulation data for a:'
         WRITE(ITU,*) ' 1 node (ISV=29) WCH thermostatic valve'
         NITMS=2
         WRITE(ITU,*) ' ADATA ',(ADATA(IPCOMP,J),J=1,NITMS)
         NITMS=6
         WRITE(ITU,*) ' BDATA ',(BDATA(IPCOMP,J),J=1,NITMS)
         IF(ITU.EQ.IUOUT) THEN
            IX1=(IPCOMP/5)*5
            IF(IX1.EQ.IPCOMP.OR.IPCOMP.EQ.NPCOMP) call epagew
         END IF
      END IF
C
C Check user specified number of controlled variables
      NCITM=0
      IF(NCI(IPCOMP).NE.NCITM)
     &   WRITE(ITU,*) ' CMP50S warning: user specified wrong number',
     &                ' of controlled variables'
C
C Check component has 2 connections
      NCONS=2
      DO 10 IPCONC=1,MPCONC
      IPCON=ICONDX(IPCOMP,1,IPCONC)
      IF(IPCONC.LE.NCONS) THEN
         IF(IPCON.EQ.0) THEN
            GOTO 990
         END IF
      ELSE IF(IPCON.NE.0) THEN
         GOTO 990
      END IF
   10 CONTINUE
C
C
      RETURN
C
C Error handling
  990 WRITE(IUOUT,*) ' CMP50S: connection error for component ',IPCOMP
      WRITE(IUOUT,*) '         should be ',NCONS,' connection(s)'
      STOP ' CMP50S: unresolvable error'
C
      END
C
C ******************** CMP51S ********************
C
C CMP51S establishes for a plant component with plant db code 510 ie.
C 1 node (ISV=29)     mechanical room thermostat
C whether the specified number of controlled variables is OK, and also
C whether the number of connections to this component is correct
C and whether the connected nodes are of a type as expected by the
C corresponding coefficient generator routine
C
      SUBROUTINE CMP51S(IPCOMP)
#include "plant.h"
#include "building.h"
C
      COMMON/OUTIN/IUOUT,IUIN
      COMMON/TC/ITC,ICNT
      COMMON/TRACE/ITCF,ITRACE(MTRACE),IZNTRC(MCOM),ITU
C
      COMMON/C9/NPCOMP,NCI(MPCOM),CDATA(MPCOM,MMISCD)
      COMMON/PDBDT/ADATA(MPCOM,MADATA),BDATA(MPCOM,MBDATA)
      COMMON/PCOND/CONVAR(MPCON,MCONVR),ICONTP(MPCON),
     &             ICONDX(MPCOM,MNODEC,MPCONC)
C
C Establish static data derivable from the data read from database
      BDATA(IPCOMP,1)=ADATA(IPCOMP,3)
      BDATA(IPCOMP,2)=ADATA(IPCOMP,4)
      BDATA(IPCOMP,3)=ADATA(IPCOMP,5)
      BDATA(IPCOMP,4)=ADATA(IPCOMP,6)
      BDATA(IPCOMP,5)=ADATA(IPCOMP,7)
      BDATA(IPCOMP,6)=ADATA(IPCOMP,8)
C
C Trace output
      IF(ITC.GT.0.AND.ITRACE(35).NE.0) THEN
         WRITE(ITU,*) ' Component ',IPCOMP,' pre-simulation data for a:'
         WRITE(ITU,*) ' 1 node (ISV=29) mechanical room thermostat'
         NITMS=2
         WRITE(ITU,*) ' ADATA ',(ADATA(IPCOMP,J),J=1,NITMS)
         NITMS=6
         WRITE(ITU,*) ' BDATA ',(BDATA(IPCOMP,J),J=1,NITMS)
         NITMS=1
         WRITE(ITU,*) ' CDATA ',(CDATA(IPCOMP,J),J=1,NITMS)
         IF(ITU.EQ.IUOUT) THEN
            IX1=(IPCOMP/5)*5
            IF(IX1.EQ.IPCOMP.OR.IPCOMP.EQ.NPCOMP) call epagew
         END IF
      END IF
C
C Check user specified number of controlled variables
      NCITM=1
      IF(NCI(IPCOMP).NE.NCITM)
     &   WRITE(ITU,*) ' CMP51S warning: user specified wrong number',
     &                ' of controlled variables'
C
C Check component has 0 connections
      NCONS=0
      DO 10 IPCONC=1,MPCONC
      IPCON=ICONDX(IPCOMP,1,IPCONC)
      IF(IPCONC.LE.NCONS) THEN
         IF(IPCON.EQ.0) THEN
            GOTO 990
         END IF
      ELSE IF(IPCON.NE.0) THEN
         GOTO 990
      END IF
   10 CONTINUE
C
C
      RETURN
C
C Error handling
  990 WRITE(IUOUT,*) ' CMP51S: connection error for component ',IPCOMP
      WRITE(IUOUT,*) '         should be ',NCONS,' connection(s)'
      STOP ' CMP51S: unresolvable error'
C
      END

C ******************** CMP52S ********************
C
C CMP52S establishes for a plant component with plant db code 520 ie.
C 1 node (ISV=29) WCH thermostatic valve (sensor only i.e. 0 connections)
C whether the specified number of controlled variables is OK, and also
C whether the number of connections to this component is correct
C and whether the connected nodes are of a type as expected by the
C corresponding coefficient generator routine
C
      SUBROUTINE CMP52S(IPCOMP)
#include "plant.h"
#include "building.h"
C
      COMMON/OUTIN/IUOUT,IUIN
      COMMON/TC/ITC,ICNT
      COMMON/TRACE/ITCF,ITRACE(MTRACE),IZNTRC(MCOM),ITU
C
      COMMON/C9/NPCOMP,NCI(MPCOM),CDATA(MPCOM,MMISCD)
      COMMON/PDBDT/ADATA(MPCOM,MADATA),BDATA(MPCOM,MBDATA)
      COMMON/PCOND/CONVAR(MPCON,MCONVR),ICONTP(MPCON),
     &             ICONDX(MPCOM,MNODEC,MPCONC)
C
C Establish static data derivable from the data read from database
      BDATA(IPCOMP,1)=ADATA(IPCOMP,3)
      BDATA(IPCOMP,2)=ADATA(IPCOMP,4)
      BDATA(IPCOMP,3)=ADATA(IPCOMP,5)
      BDATA(IPCOMP,4)=ADATA(IPCOMP,6)
      BDATA(IPCOMP,5)=ADATA(IPCOMP,7)
      BDATA(IPCOMP,6)=ADATA(IPCOMP,8)
      BDATA(IPCOMP,7)=ADATA(IPCOMP,9)
C
C Trace output
      IF(ITC.GT.0.AND.ITRACE(35).NE.0) THEN
         WRITE(ITU,*) ' Component ',IPCOMP,' pre-simulation data for a:'
         WRITE(ITU,*) ' 1 node (ISV=29) WCH thermostatic valve'
         NITMS=2
         WRITE(ITU,*) ' ADATA ',(ADATA(IPCOMP,J),J=1,NITMS)
         NITMS=6
         WRITE(ITU,*) ' BDATA ',(BDATA(IPCOMP,J),J=1,NITMS)
         IF(ITU.EQ.IUOUT) THEN
            IX1=(IPCOMP/5)*5
            IF(IX1.EQ.IPCOMP.OR.IPCOMP.EQ.NPCOMP) call epagew
         END IF
      END IF
C
C Check user specified number of controlled variables
      NCITM=0
      IF(NCI(IPCOMP).NE.NCITM)
     &   WRITE(ITU,*) ' CMP52S warning: user specified wrong number',
     &                ' of controlled variables'
C
C Check component has 0 connections
      NCONS=0
      DO 10 IPCONC=1,MPCONC
      IPCON=ICONDX(IPCOMP,1,IPCONC)
      IF(IPCONC.LE.NCONS) THEN
         IF(IPCON.EQ.0) THEN
            GOTO 990
         END IF
      ELSE IF(IPCON.NE.0) THEN
         GOTO 990
      END IF
   10 CONTINUE
C
C
      RETURN
C
C Error handling
  990 WRITE(IUOUT,*) ' CMP52S: connection error for component ',IPCOMP
      WRITE(IUOUT,*) '         should be ',NCONS,' connection(s)'
      STOP ' CMP52S: unresolvable error'
C
      END
C
C ******************** CMP67S ********************
C
C CMP67S establishes for a plant component with plant db code 670 ie.
C 3 node (ISV>19) AC  heat transfer tube fed by WCH system
C data derivable from the static manufacturers data already read from
C the database and saves it in the static data common block, and also
C whether the specified number of controlled variables is OK, and also
C whether the number of connections to this component is correct
C and whether the connected nodes are of a type as expected by the
C corresponding coefficient generator routine
C
C node 1 represents solid material (ISV=29)
C node 2 represents air            (ISV=21)
C node 3 represents water          (ISV=20)
C
      SUBROUTINE CMP67S(IPCOMP)
#include "plant.h"
#include "building.h"
C
      COMMON/OUTIN/IUOUT,IUIN
      COMMON/TC/ITC,ICNT
      COMMON/TRACE/ITCF,ITRACE(MTRACE),IZNTRC(MCOM),ITU
C
      COMMON/C9/NPCOMP,NCI(MPCOM),CDATA(MPCOM,MMISCD)
      COMMON/PDBDT/ADATA(MPCOM,MADATA),BDATA(MPCOM,MBDATA)
      COMMON/PCOND/CONVAR(MPCON,MCONVR),ICONTP(MPCON),
     &             ICONDX(MPCOM,MNODEC,MPCONC)
C
C Establish static data derivable from the data read from database
      BDATA(IPCOMP,1)=ADATA(IPCOMP,5)
      BDATA(IPCOMP,2)=ADATA(IPCOMP,6)
      BDATA(IPCOMP,3)=ADATA(IPCOMP,7)
      BDATA(IPCOMP,4)=ADATA(IPCOMP,8)
C
C Trace output
      IF(ITC.GT.0.AND.ITRACE(35).NE.0) THEN
         WRITE(ITU,*) ' Component ',IPCOMP,' pre-simulation data for a:'
         WRITE(ITU,*) ' 3 node (ISV>19) AC  heat transfer tube',
     &                ' fed by WCH system'
         NITMS=4
         WRITE(ITU,*) ' ADATA ',(ADATA(IPCOMP,J),J=1,NITMS)
         NITMS=4
         WRITE(ITU,*) ' BDATA ',(BDATA(IPCOMP,J),J=1,NITMS)
         IF(ITU.EQ.IUOUT) THEN
            IX1=(IPCOMP/5)*5
            IF(IX1.EQ.IPCOMP.OR.IPCOMP.EQ.NPCOMP) call epagew
         END IF
      END IF
C
C Check user specified number of controlled variables
      NCITM=0
      IF(NCI(IPCOMP).NE.NCITM)
     &   WRITE(ITU,*) ' CMP67S warning: user specified wrong number',
     &                ' of controlled variables'
C
C Check component has 1st connection to "moist air"
C                     2nd connection to water
      NCONS=2
      NCONPN=1
      DO 10 IPCONC=1,MPCONC
      IPCON1=ICONDX(IPCOMP,2,IPCONC)
      IPCON2=ICONDX(IPCOMP,3,IPCONC)
      IF(IPCONC.LE.NCONPN) THEN
         IF(IPCON1.EQ.0.OR.IPCON2.EQ.0) THEN
            GOTO 990
         ELSE IF(ICONTP(IPCON1).NE.21.OR.ICONTP(IPCON2).NE.20) THEN
            GOTO 990
         END IF
      ELSE IF(IPCON1.NE.0.OR.IPCON2.NE.0) THEN
         GOTO 990
      END IF
   10 CONTINUE
C
C
      RETURN
C
C Error handling
  990 WRITE(IUOUT,*) ' CMP67S: connection error for component ',IPCOMP
      WRITE(IUOUT,*) '         should be ',NCONS,' connection(s)'
      WRITE(IUOUT,*) '         ie  1st connection to air'
      WRITE(IUOUT,*) '             2nd connection to water'
      STOP ' CMP67S: unresolvable error'
C
      END
C
C ******************** CMP70S ********************
C
C CMP70S establishes for a plant component with plant db code 700 ie.
C 1 node (ISV=20) Flat plate solar collector (type1).
C whether the specified number of controlled variables is OK, and also
C whether the number of connections to this component is correct
C and whether the connected nodes are of a type as expected by the
C corresponding coefficient generator routine
C
      SUBROUTINE CMP70S(IPCOMP)
#include "plant.h"
#include "building.h"
C
      COMMON/OUTIN/IUOUT,IUIN
      COMMON/TC/ITC,ICNT
      COMMON/TRACE/ITCF,ITRACE(MTRACE),IZNTRC(MCOM),ITU
C
      COMMON/C9/NPCOMP,NCI(MPCOM),CDATA(MPCOM,MMISCD)
      COMMON/PDBDT/ADATA(MPCOM,MADATA),BDATA(MPCOM,MBDATA)
      COMMON/PCOND/CONVAR(MPCON,MCONVR),ICONTP(MPCON),
     &             ICONDX(MPCOM,MNODEC,MPCONC)

C Establish static data derivable from the data read from database
      BDATA(IPCOMP,1) =ADATA(IPCOMP,4)
      BDATA(IPCOMP,2) =ADATA(IPCOMP,5)
      BDATA(IPCOMP,3) =ADATA(IPCOMP,6)
      BDATA(IPCOMP,4) =ADATA(IPCOMP,7)
      BDATA(IPCOMP,5) =ADATA(IPCOMP,8)
      BDATA(IPCOMP,6) =ADATA(IPCOMP,9)
      BDATA(IPCOMP,7) =ADATA(IPCOMP,10)
      BDATA(IPCOMP,8) =ADATA(IPCOMP,11)
      BDATA(IPCOMP,9) =ADATA(IPCOMP,12)
      BDATA(IPCOMP,10)=ADATA(IPCOMP,13)
      BDATA(IPCOMP,11)=ADATA(IPCOMP,14)
      BDATA(IPCOMP,12)=ADATA(IPCOMP,15)
      BDATA(IPCOMP,13)=ADATA(IPCOMP,16)
      BDATA(IPCOMP,14)=ADATA(IPCOMP,17)
      BDATA(IPCOMP,15)=ADATA(IPCOMP,18)
      BDATA(IPCOMP,16)=ADATA(IPCOMP,19)
      BDATA(IPCOMP,17)=ADATA(IPCOMP,20)
      BDATA(IPCOMP,18)=ADATA(IPCOMP,21)

C Trace output
      IF(ITC.GT.0.AND.ITRACE(35).NE.0) THEN
         WRITE(ITU,*) ' Component ',IPCOMP,' pre-simulation data for a:'
         WRITE(ITU,*) ' 1 node (ISV=20) Flat-plate solar collector'
         NITMS=3
         WRITE(ITU,*) ' ADATA ',(ADATA(IPCOMP,J),J=1,NITMS)
         NITMS=18
         WRITE(ITU,*) ' BDATA ',(BDATA(IPCOMP,J),J=1,NITMS)
         IF(ITU.EQ.IUOUT) THEN
            IX1=(IPCOMP/5)*5
            IF(IX1.EQ.IPCOMP.OR.IPCOMP.EQ.NPCOMP) call epagew
         END IF
      END IF
C
C Check user specified number of controlled variables
      NCITM=0
      IF(NCI(IPCOMP).NE.NCITM)
     &   WRITE(ITU,*) ' CMP70S warning: user specified wrong number',
     &                ' of controlled variables'

C Check component has 1 connections
      NCONS=1
      DO 10 IPCONC=1,MPCONC
      IPCON=ICONDX(IPCOMP,1,IPCONC)
      IF(IPCONC.LE.NCONS) THEN
         IF(IPCON.EQ.0) THEN
            GOTO 990
         END IF
      ELSE IF(IPCON.NE.0) THEN
         GOTO 990
      END IF
   10 CONTINUE
      RETURN

C Error handling
  990 WRITE(IUOUT,*) ' CMP70S: connection error for component ',IPCOMP
      WRITE(IUOUT,*) '         should be ',NCONS,' connection(s)'
      STOP ' CMP70S: unresolvable error'
      END

C ******************** CMP71S ********************
C
C CMP71S establishes for a plant component with plant db code 710 ie.
C 1 node (ISV=20) solar collector "segment".
C whether the specified number of controlled variables is OK, and also
C whether the number of connections to this component is correct
C and whether the connected nodes are of a type as expected by the
C corresponding coefficient generator routine
C
      SUBROUTINE CMP71S(IPCOMP)
#include "plant.h"
#include "building.h"
C
      COMMON/OUTIN/IUOUT,IUIN
      COMMON/TC/ITC,ICNT
      COMMON/TRACE/ITCF,ITRACE(MTRACE),IZNTRC(MCOM),ITU
C
      COMMON/C9/NPCOMP,NCI(MPCOM),CDATA(MPCOM,MMISCD)
      COMMON/PDBDT/ADATA(MPCOM,MADATA),BDATA(MPCOM,MBDATA)
      COMMON/PCOND/CONVAR(MPCON,MCONVR),ICONTP(MPCON),
     &             ICONDX(MPCOM,MNODEC,MPCONC)


C Trace output
      IF(ITC.GT.0.AND.ITRACE(35).NE.0) THEN
         WRITE(ITU,*) ' Component ',IPCOMP,' pre-simulation data for a:'
         WRITE(ITU,*) ' 1 node (ISV=20) Flat-plate solar collector'
         NITMS=22
         WRITE(ITU,*) ' ADATA ',(ADATA(IPCOMP,J),J=1,NITMS)
         IF(ITU.EQ.IUOUT) THEN
            IX1=(IPCOMP/5)*5
            IF(IX1.EQ.IPCOMP.OR.IPCOMP.EQ.NPCOMP) call epagew
         END IF
      END IF
C
C Check user specified number of controlled variables
      NCITM=0
      IF(NCI(IPCOMP).NE.NCITM)
     &   WRITE(ITU,*) ' CMP71S warning: user specified wrong number',
     &                ' of controlled variables'

C Check component has 1 connections
      NCONS=1
      DO 10 IPCONC=1,MPCONC
      IPCON=ICONDX(IPCOMP,1,IPCONC)
      IF(IPCONC.LE.NCONS) THEN
         IF(IPCON.EQ.0) THEN
            GOTO 990
         END IF
      ELSE IF(IPCON.NE.0) THEN
         GOTO 990
      END IF
   10 CONTINUE
      RETURN

C Error handling
  990 WRITE(IUOUT,*) ' CMP71S: connection error for component ',IPCOMP
      WRITE(IUOUT,*) '         should be ',NCONS,' connection(s)'
      STOP ' CMP71S: unresolvable error'
      END


C ******************** CMP72S ********************
C
C CMP73S establishes for plant component with plant db code 730 i.e
C 1 node (ISV=20) water storage tank with converging inlets
C layer. Checks are made on the number controlled variables
C the number of connections and whether the connected nodes are of the
C correct type as expected by the plant solver.
C

      SUBROUTINE CMP72S(IPCOMP)

#include "plant.h"
#include "building.h"
C
      COMMON/OUTIN/IUOUT,IUIN
      COMMON/TC/ITC,ICNT
      COMMON/TRACE/ITCF,ITRACE(MTRACE),IZNTRC(MCOM),ITU
C
      COMMON/C9/NPCOMP,NCI(MPCOM),CDATA(MPCOM,MMISCD)
      COMMON/PCOND/CONVAR(MPCON,MCONVR),ICONTP(MPCON),
     &             ICONDX(MPCOM,MNODEC,MPCONC)
C
C Trace output
      IF(ITC.GT.0.AND.ITRACE(35).NE.0) THEN
         WRITE(ITU,*) ' Component ',IPCOMP,' pre-simulation data for a:'
         WRITE(ITU,*) ' 1 node water storage tank layer.'
         IF(ITU.EQ.IUOUT) THEN
            IX1=(IPCOMP/5)*5
            IF(IX1.EQ.IPCOMP.OR.IPCOMP.EQ.NPCOMP) call epagew
         END IF
      END IF
C Check component has 2 connections to water
      NCONS=2
      NOCON=0
      DO 10 IPCONC=1,MPCONC
      IPCON=ICONDX(IPCOMP,1,IPCONC)
      IF(IPCONC.LE.NCONS) THEN
         IF(IPCON.EQ.0) THEN
C Allow this as there can be 2 or 1 connections.
           NOCON=NOCON+1
C Check that there is at least ONE connection,
C If there is then NOCON should never be 2.
           IF(NOCON.EQ.2) THEN
              GOTO 990
           ENDIF
         ELSE IF(ICONTP(IPCON).NE.20) THEN
            GOTO 990
         END IF
      ELSE IF(IPCON.NE.0) THEN
         GOTO 990
      END IF
   10 CONTINUE
C
C
      RETURN
C
C Error handling
  990 WRITE(IUOUT,*) ' CMP72S: connection error for component ',IPCOMP
      WRITE(IUOUT,*) '         should be 1 or  2  connection(s)'
      WRITE(IUOUT,*) '         to water.'
      STOP ' CMP72S: unresolvable error'
C
      END

C ******************** CMP79S ********************
C
C CMP79S establishes for a plant component with plant db code 790 ie.
C 1 node (ISV=20) Stochastic DHW flow calculation.
C whether the specified number of controlled variables is OK, and also
C whether the number of connections to this component is correct
C and whether the connected nodes are of a type as expected by the
C corresponding coefficient generator routine
C
      SUBROUTINE CMP79S(IPCOMP)

      implicit none
#include "plant.h"
#include "building.h"
C
      COMMON/OUTIN/IUOUT,IUIN
      COMMON/TC/ITC,ICNT
      COMMON/TRACE/ITCF,ITRACE(MTRACE),IZNTRC(MCOM),ITU
C
      COMMON/C9/NPCOMP,NCI(MPCOM),CDATA(MPCOM,MMISCD)
      COMMON/PDBDT/ADATA(MPCOM,MADATA),BDATA(MPCOM,MBDATA)
      COMMON/PCOND/CONVAR(MPCON,MCONVR),ICONTP(MPCON),
     &             ICONDX(MPCOM,MNODEC,MPCONC)


      COMMON/DHWStoch1/DHWsubmin,CalCount,DHWCalcInc

      Common/DHWStoch3R/NomDraw,SeasDrawFluc,DrawPerS(6),NomDrawFrac(6),
     &NomTypeFrac(6),DrawV(6),DrawVstd(6),DrawWdvar(6),DrawWevar(6)
      Common/DHWStoch3I/SeasPhas,NoHolPer,HolPerS(3),HolPerE(3),
     &NoDrawPer,NDrawType,NomDrawDur(6)

      Common/DHWStoch4/CurDrawDur(6),ElapseDrawDur(6),DHWDraw(6)
      Common/DHWStochL/inDraw(6)


      logical conError,InDraw,DHWsubmin 

      real NomDraw,SeasDrawFluc,DrawPerS,NomDrawFrac,NomTypeFrac,
     &DrawV,DrawVstd,NomDrawDur,DrawWdvar,DrawWevar,CurDrawDur,
     &ElapseDrawDur,DHWDraw
      integer SeasPhas,NoHolPer,HolPerS,HolPerE,NoDrawPer,NDrawType,
     &CalCount,DHWCalcInc
      integer IDT,IDp,NSTAT,NBDAT1,NBDAT2,NBDAT3,NBDAT

      integer IUOUT,IUIN,ITC,ICNT,ITCF,ITRACE,IZNTRC,ITU
      integer ICONTP,ICONDX
      integer IPCOMP,IPCON,IPCONC,NCITM,NCONS,NITMS
      integer IX1,IDW,IHP,J,NCI,NPCOMP,DHWDrawSeed,Iseed
      real ADATA,BDATA,CDATA,CONVAR
     

C Establish static data derivable from the data read from database
      NSTAT=3
      NBDAT1=1+NSTAT+nint(ADATA(IPCOMP,NSTAT+1))*2
      NBDAT2=1+NBDAT1+nint(ADATA(IPCOMP,NBDAT1+1))*2
      NBDAT3=1+NBDAT2+nint(ADATA(IPCOMP,NBDAT2+1))*6
      NBDAT=NBDAT3+1

C Initiate calculation counter for sub 60s timesteps
      calcount=1

C Trace
c      write(87,*)'DHW: static set up'
c      write(87,*)'NSTAT, NBDAT1, NBDAT2, NBDAT3', 
c     &NSTAT,NBDAT1,NBDAT2,NBDAT3,NBDAT

C Trace output
      IF(ITC.GT.0.AND.ITRACE(35).NE.0) THEN
         WRITE(ITU,*) ' Component ',IPCOMP,' pre-simulation data for a:'
         WRITE(ITU,*) ' 1 node (ISV=20) stochastic DHW draw'
         NITMS=NBDAT
         WRITE(ITU,*) ' ADATA ',(ADATA(IPCOMP,J),J=1,NITMS)

         IF(ITU.EQ.IUOUT) THEN
            IX1=(IPCOMP/5)*5
            IF(IX1.EQ.IPCOMP.OR.IPCOMP.EQ.NPCOMP) call epagew
         END IF
      END IF

      NomDraw=ADATA(IPCOMP,1)
      IF(NomDraw.LT.1E-6) 
     &WRITE(IUOUT,*) 'CMP79S WARNING. DHW: nominal draw is zero!'
      SeasDrawFluc=ADATA(IPCOMP,2)
      SeasPhas=nint(ADATA(IPCOMP,3))

      NoHolPer=nint(ADATA(IPCOMP,4))
      IDT=5
      if(NoHolPer.GT.0)THEN
        DO 10 IHp=1,NoHolPer
          HolPerS(IHp)=nint(ADATA(IPCOMP,IDT))
          IDT=IDT+1
          HolPerE(IHp)=nint(ADATA(IPCOMP,IDT))
          IDT=IDT+1
 10     CONTINUE 
      endif

      NoDrawPer=nint(ADATA(IPCOMP,IDT))
      IDT=IDT+1   
      IF(NoDrawPer.GT.0)THEN 
        DO 15 IDp=1,NoDrawPer
          DrawPerS(IDp)=ADATA(IPCOMP,IDT)
          IF(IDp.GT.1)THEN
            if(DrawPerS(IDp).LE.DrawPerS(IDp-1))THEN
              WRITE(IUOUT,*) 'CMP79S ERROR. DHW: non-concurrent draw'
              WRITE(IUOUT,*) 'period starts defined.Check stochastic' 
              WRITE(IUOUT,*) 'DHW draw component data!' 
              STOP
            endif
          ELSE
            if(abs(DrawPerS(IDp)-0.0).GT.1.0E-6)then
              WRITE(IUOUT,*) 'CMP79S ERROR. DHW: draw start time'
              WRITE(IUOUT,*) 'should be 0.0. Check stochastic'
              WRITE(IUOUT,*) 'DHW draw component data!' 
            endif
          ENDIF
          IDT=IDT+1
          NomDrawFrac(IDp)=ADATA(IPCOMP,IDT)
          IDT=IDT+1
 15     CONTINUE
      ELSE
         WRITE(IUOUT,*) 'CMP79S WARNING. DHW: no draw periods defined '
         WRITE(IUOUT,*) 'check stochastic DHW draw component data!' 
      ENDIF   
   
      NDrawType=nint(ADATA(IPCOMP,IDT))
      IDT=IDT+1 
      IF(NDrawType.GT.0)THEN
      DO 20 IDw=1,NDrawType
        indraw(IDw)=.false.
        CurDrawDur(IDw)=0.0
        DHWDraw(IDw)=0.0
        NomTypeFrac(IDw)=ADATA(IPCOMP,IDT)
        IDT=IDT+1        
        DrawV(IDw)=ADATA(IPCOMP,IDT)
        IDT=IDT+1              
        DrawVstd(IDw)=ADATA(IPCOMP,IDT)
        IDT=IDT+1        
        NomDrawDur(IDw)=ADATA(IPCOMP,IDT)
        IDT=IDT+1         
        DrawWdvar(IDw)=ADATA(IPCOMP,IDT)
        IDT=IDT+1          
        DrawWevar(IDw)=ADATA(IPCOMP,IDT)
        IDT=IDT+1          
 20   CONTINUE
      ELSE
         WRITE(IUOUT,*) 'CMP79S WARNING. DHW: no draw types defined '
         WRITE(IUOUT,*) 'check stochastic DHW draw component data!'
      ENDIF

      DHWDrawSeed=NINT(ADATA(IPCOMP,IDT))

C Seed the random number generator
      ISEED=DHWDrawSeed
      CALL SRAND(ISEED)


C
C Check user specified number of controlled variables
      NCITM=0
      IF(NCI(IPCOMP).NE.NCITM)
     &   WRITE(IUOUT,*) ' CMP79S warning: user specified wrong number',
     &                ' of controlled variables'
C
C Check component has 1 connection only, to water
      ConError=.false.
      NCONS=1
      IPCONC=1
      DO WHILE(IPCONC.LE.MPCONC.AND..NOT.ConError)
        IPCON=ICONDX(IPCOMP,1,IPCONC)
        IF(IPCONC.LE.NCONS) THEN
          IF(IPCON.EQ.0) THEN
            ConError=.true.
          ELSE IF(ICONTP(IPCON).NE.20) THEN
            ConError=.true.
          END IF
        ELSE IF(IPCON.NE.0) THEN
          ConError=.true.
        END IF
        IPCONC=IPCONC+1
      ENDDO

C Error handling
      IF(ConError)THEN
        WRITE(IUOUT,*) 'CMP79S: connection error for component ',IPCOMP
        WRITE(IUOUT,*) '        should be ',NCONS,' water connection(s)'
        STOP 'CMP79S: unresolvable error'
      ENDIF

      RETURN

      END

C ******************** CMP90S ********************
C
C CMP90S establishes for a plant component with plant db code 900 ie.
C 2 node (ISV>19)     air & water temperature source
C whether the specified number of controlled variables is OK, and also
C whether the number of connections to this component is correct
C and whether the connected nodes are of a type as expected by the
C corresponding coefficient generator routine
C
      SUBROUTINE CMP90S(IPCOMP)
#include "plant.h"
#include "building.h"
C
      COMMON/OUTIN/IUOUT,IUIN
      COMMON/TC/ITC,ICNT
      COMMON/TRACE/ITCF,ITRACE(MTRACE),IZNTRC(MCOM),ITU
C
      COMMON/C9/NPCOMP,NCI(MPCOM),CDATA(MPCOM,MMISCD)
      COMMON/PCOND/CONVAR(MPCON,MCONVR),ICONTP(MPCON),
     &             ICONDX(MPCOM,MNODEC,MPCONC)
C
C Trace output
      IF(ITC.GT.0.AND.ITRACE(35).NE.0) THEN
         WRITE(ITU,*) ' Component ',IPCOMP,' pre-simulation data for a:'
         WRITE(ITU,*) ' 2 node (ISV>19) air & water temperature source'
         IF(ITU.EQ.IUOUT) THEN
            IX1=(IPCOMP/5)*5
            IF(IX1.EQ.IPCOMP.OR.IPCOMP.EQ.NPCOMP) call epagew
         END IF
      END IF
C
C Check user specified number of controlled variables
      NCITM=2
      IF(NCI(IPCOMP).NE.NCITM)
     &   WRITE(ITU,*) ' CMP90S warning: user specified wrong number',
     &                ' of controlled variables'
C
C Check component has 1st connection to "moist air"
C                     2nd connection to water
      NCONS=2
      NCONPN=1
      DO 10 IPCONC=1,MPCONC
      IPCON1=ICONDX(IPCOMP,1,IPCONC)
      IPCON2=ICONDX(IPCOMP,2,IPCONC)
      IF(IPCONC.LE.NCONPN) THEN
         IF(IPCON1.EQ.0.OR.IPCON2.EQ.0) THEN
            GOTO 990
         ELSE IF(ICONTP(IPCON1).NE.21.OR.ICONTP(IPCON2).NE.20) THEN
            GOTO 990
         END IF
      ELSE IF(IPCON1.NE.0.OR.IPCON2.NE.0) THEN
         GOTO 990
      END IF
   10 CONTINUE
C
C
      RETURN
C
C Error handling
  990 WRITE(IUOUT,*) ' CMP90S: connection error for component ',IPCOMP
      WRITE(IUOUT,*) '         should be ',NCONS,' connection(s)'
      WRITE(IUOUT,*) '         ie  1st connection to air'
      WRITE(IUOUT,*) '             2nd connection to water'
      STOP ' CMP90S: unresolvable error'
C
      END
C
C ******************** CMP91S ********************
C
C CMP91S establishes for a plant component with plant db code 80 ie.
C 2 node (ISV>19) imaginary building-like plant load
C whether the specified number of controlled variables is OK, and also
C whether the number of connections to this component is correct
C and whether the connected nodes are of a type as expected by the
C corresponding coefficient generator routine.
c
c node 1 is external wall
c node 2 is zone air
C
      subroutine cmp91s(ipcomp)
#include "plant.h"
#include "building.h"
C
      COMMON/OUTIN/IUOUT,IUIN
      COMMON/TC/ITC,ICNT
      COMMON/TRACE/ITCF,ITRACE(MTRACE),IZNTRC(MCOM),ITU

      COMMON/C9/NPCOMP,NCI(MPCOM),CDATA(MPCOM,MMISCD)
      COMMON/PDBDT/ADATA(MPCOM,MADATA),BDATA(MPCOM,MBDATA)
      COMMON/PCOND/CONVAR(MPCON,MCONVR),ICONTP(MPCON),
     &             ICONDX(MPCOM,MNODEC,MPCONC)

C Establish static data derivable from the data read from database
      BDATA(IPCOMP,1)=ADATA(IPCOMP,6)
      BDATA(IPCOMP,2)=ADATA(IPCOMP,7)
      BDATA(IPCOMP,3)=ADATA(IPCOMP,8)

C Trace output
      IF(ITC.GT.0.AND.ITRACE(35).NE.0) THEN
         WRITE(ITU,*) ' Component ',IPCOMP,' pre-simulation data for a:'
         WRITE(ITU,*) ' 2 node (ISV>19) imaginary building-like plant',
     &                ' load'
         NITMS=5
         WRITE(ITU,*) ' ADATA ',(ADATA(IPCOMP,J),J=1,NITMS)
         NITMS=4
         WRITE(ITU,*) ' BDATA ',(BDATA(IPCOMP,J),J=1,NITMS)
         IF(ITU.EQ.IUOUT) THEN
            IX1=(IPCOMP/5)*5
            IF(IX1.EQ.IPCOMP.OR.IPCOMP.EQ.NPCOMP) call epagew
         END IF
      END IF

C Check user specified number of controlled variables
      NCITM=1
      IF(NCI(IPCOMP).NE.NCITM)
     &   WRITE(ITU,*) ' CMP91S warning: user specified wrong number',
     &                ' of controlled variables'

C Check component has 1 connection to "moist air"
      NCONS=1
      DO 10 IPCONC=1,MPCONC
      IPCON=ICONDX(IPCOMP,2,IPCONC)
      IF(IPCONC.LE.NCONS) THEN
         IF(IPCON.EQ.0) THEN
            GOTO 990
         ELSE IF(IPCONC.EQ.1.AND.ICONTP(IPCON).NE.21) THEN
            GOTO 990
         END IF
      ELSE IF(IPCON.NE.0) THEN
         GOTO 990
      END IF
   10 CONTINUE
      RETURN

C Error handling
  990 WRITE(IUOUT,*) ' CMP91S: connection error for component ',IPCOMP
      WRITE(IUOUT,*) '         should be 1 connection to air'
      STOP ' CMP91S: unresolvable error'
      END

C ******************** CMP92S ********************
C
C CMP92S establishes for a plant component with plant db code 920 ie.
C 1 node (ISV=21) AC  fictitious boundary component.
C There are no static manufacturers data for this component as it
C acts to establish mass flow rate at a boundary connection.
C Checks are performed to see whether the number of connections to this
C component is correct and whether the connected nodes are of a type as
C expected by the corresponding coefficient generator routine.
C
      SUBROUTINE CMP92S(IPCOMP)
#include "plant.h"
#include "building.h"
C
      COMMON/OUTIN/IUOUT,IUIN
      COMMON/TC/ITC,ICNT
      COMMON/TRACE/ITCF,ITRACE(MTRACE),IZNTRC(MCOM),ITU
C
      COMMON/C9/NPCOMP,NCI(MPCOM),CDATA(MPCOM,MMISCD)
      COMMON/PCOND/CONVAR(MPCON,MCONVR),ICONTP(MPCON),
     &             ICONDX(MPCOM,MNODEC,MPCONC)

C Trace output
      IF(ITC.GT.0.AND.ITRACE(35).NE.0) THEN
         WRITE(ITU,*) ' Component ',IPCOMP,' pre-simulation data for a:'
         WRITE(ITU,*) ' 1 node (ISV=21) fictitious boundary component'
         IF(ITU.EQ.IUOUT) THEN
            IX1=(IPCOMP/5)*5
            IF(IX1.EQ.IPCOMP.OR.IPCOMP.EQ.NPCOMP) call epagew
         END IF
      END IF

C Check component has 1 connection only, to "moist air"
      NCONS=1
      DO 10 IPCONC=1,MPCONC
      IPCON=ICONDX(IPCOMP,1,IPCONC)
      IF(IPCONC.LE.NCONS) THEN
         IF(IPCON.EQ.0) THEN
            GOTO 990
         ELSE IF(ICONTP(IPCON).NE.21) THEN
            GOTO 990
         END IF
      ELSE IF(IPCON.NE.0) THEN
         GOTO 990
      END IF
   10 CONTINUE
      RETURN

C Error handling
  990 WRITE(IUOUT,*) ' CMP92S: connection error for component ',IPCOMP
      WRITE(IUOUT,*) '         should be ',NCONS,' connection(s) to air'
      STOP ' CMP92S: unresolvable error'
      END

C ******************** CMP93S ********************
C
C CMP93S establishes for a plant component with plant db code 930 ie.
C 10 node (ISV>20) heat exchanger component.
C
C Nodes 1 to 5 are cold fluid nodes.
C Nodes 6 to 10 are solid nodes.
C Connection to this component is via nodes 1 and 5.
      SUBROUTINE CMP93S(IPCOMP)
#include "plant.h"
#include "building.h"
C
      COMMON/OUTIN/IUOUT,IUIN
      COMMON/TC/ITC,ICNT
      COMMON/TRACE/ITCF,ITRACE(MTRACE),IZNTRC(MCOM),ITU
C
      COMMON/C9/NPCOMP,NCI(MPCOM),CDATA(MPCOM,MMISCD)
      COMMON/PDBDT/ADATA(MPCOM,MADATA),BDATA(MPCOM,MBDATA)
      COMMON/PCOND/CONVAR(MPCON,MCONVR),ICONTP(MPCON),
     &             ICONDX(MPCOM,MNODEC,MPCONC)

C Trace output
      IF(ITC.GT.0.AND.ITRACE(35).NE.0) THEN
         WRITE(ITU,*) ' Component ',IPCOMP,' pre-simulation data for a:'
         WRITE(ITU,*) ' 1 node (ISV>20) Heat exchanger component'
         IF(ITU.EQ.IUOUT) THEN
            IX1=(IPCOMP/5)*5
            IF(IX1.EQ.IPCOMP.OR.IPCOMP.EQ.NPCOMP) call epagew
         END IF
      END IF

C Establish static data derivable from the data read from database
      BDATA(IPCOMP,1)=ADATA(IPCOMP,6)
      BDATA(IPCOMP,2)=ADATA(IPCOMP,7)
      BDATA(IPCOMP,3)=ADATA(IPCOMP,8)
      BDATA(IPCOMP,4)=ADATA(IPCOMP,9)

C Trace output
      IF(ITC.GT.0.AND.ITRACE(35).NE.0) THEN
         WRITE(ITU,*) ' Component ',IPCOMP,' pre-simulation data for a:'
         WRITE(ITU,*) ' 10 node (ISV>21) heat exchanger'
         NITMS=5
         WRITE(ITU,*) ' ADATA ',(ADATA(IPCOMP,J),J=1,NITMS)
         NITMS=4
         WRITE(ITU,*) ' BDATA ',(BDATA(IPCOMP,J),J=1,NITMS)
         IF(ITU.EQ.IUOUT) THEN
            IX1=(IPCOMP/5)*5
            IF(IX1.EQ.IPCOMP.OR.IPCOMP.EQ.NPCOMP) call epagew
         END IF
      END IF

C Check user specified number of controlled variables
      NCITM=1
      IF(NCI(IPCOMP).NE.NCITM)
     &   WRITE(ITU,*) ' CMP93S warning: user specified wrong number',
     &                ' of controlled variables'

C Check component has 1 connection only, to "moist air"
      NCONS=1
      DO 10 IPCONC=1,MPCONC
      IPCON=ICONDX(IPCOMP,1,IPCONC)
      IF(IPCONC.LE.NCONS) THEN
         IF(IPCON.EQ.0) THEN
            GOTO 990
         ELSE IF(ICONTP(IPCON).NE.21) THEN
            GOTO 990
         END IF
      ELSE IF(IPCON.NE.0) THEN
         GOTO 990
      END IF
   10 CONTINUE
      RETURN

C Error handling
  990 WRITE(IUOUT,*) ' CMP93S: connection error for component ',IPCOMP
      WRITE(IUOUT,*) '         should be ',NCONS,' connection(s) to air'
      STOP ' CMP93S: unresolvable error'
      END

C***************** CMP94S ********************
C
C CMP94S establishes for a plant component with plant db code 940 ie.
C 3 node (ISV=20) heat exchanger segment whether the correct number
C of control variables have been specified, whether the number of
C connections is correct and whether the connections are to the
C correct fluid type.
       SUBROUTINE CMP94S(IPCOMP)
#include "plant.h"
#include "building.h"
      COMMON/OUTIN/IUOUT,IUIN
      COMMON/TC/ITC,ICNT
      COMMON/TRACE/ITCF,ITRACE(MTRACE),IZNTRC(MCOM),ITU

      COMMON/C9/NPCOMP,NCI(MPCOM),CDATA(MPCOM,MMISCD)
      COMMON/PDBDT/ADATA(MPCOM,MADATA),BDATA(MPCOM,MBDATA)
      COMMON/PCOND/CONVAR(MPCON,MCONVR),ICONTP(MPCON),
     &             ICONDX(MPCOM,MNODEC,MPCONC)
C
C Trace output
      IF(ITC.GT.0.AND.ITRACE(35).NE.0) THEN
         WRITE(ITU,*) ' Component ',IPCOMP,' pre-simulation data for a:'
         WRITE(ITU,*) ' 3 node (ISV=20) heat exchanger segment'
         NITMS=13
         WRITE (ITU,*)' ADATA ',(ADATA(IPCOMP,J), J=1,NITMS)
         IF(ITU.EQ.IUOUT) THEN
            IX1=(IPCOMP/5)*5
            IF(IX1.EQ.IPCOMP.OR.IPCOMP.EQ.NPCOMP) call epagew
         END IF
      END IF

C Check component has 1st connection to water
C                     2nd connection to water
      NCONS=2
      NCONPN=1
      DO 10 IPCONC=1,MPCONC
      IPCON1=ICONDX(IPCOMP,1,IPCONC)
      IPCON2=ICONDX(IPCOMP,2,IPCONC)
      IF(IPCONC.LE.NCONPN) THEN
         IF(IPCON1.EQ.0.OR.IPCON2.EQ.0) THEN
            GOTO 990
         ELSE IF(ICONTP(IPCON1).NE.20.OR.ICONTP(IPCON2).NE.20) THEN
            GOTO 990
         END IF
      ELSE IF(IPCON1.NE.0.OR.IPCON2.NE.0) THEN
         GOTO 990
      END IF
   10 CONTINUE
      RETURN

C Error handling
  990 WRITE(IUOUT,*) ' CMP94S: connection error for component ',IPCOMP
      WRITE(IUOUT,*) '         should be ',NCONS,' connection(s)'
      WRITE(IUOUT,*) '         ie  1st connection to water'
      WRITE(IUOUT,*) '             2nd connection to water'
      STOP ' CMP94S: unresolvable error'
      END

C***************** CMP98S ********************
C
C CMP98S establishes for a plant component with plant db code 980 ie.
C 3 node (ISV>19) CHP engine model whether the correct number
C of control variables have been specified, whether the number of
C connections is correct and whether the connections are to the
C correct fluid type.
       SUBROUTINE CMP98S(IPCOMP)
#include "plant.h"
#include "building.h"
      COMMON/OUTIN/IUOUT,IUIN
      COMMON/TC/ITC,ICNT
      COMMON/TRACE/ITCF,ITRACE(MTRACE),IZNTRC(MCOM),ITU

      COMMON/C9/NPCOMP,NCI(MPCOM),CDATA(MPCOM,MMISCD)
      COMMON/PDBDT/ADATA(MPCOM,MADATA),BDATA(MPCOM,MBDATA)
      COMMON/PCOND/CONVAR(MPCON,MCONVR),ICONTP(MPCON),
     &             ICONDX(MPCOM,MNODEC,MPCONC)
C
C Trace output
      IF(ITC.GT.0.AND.ITRACE(35).NE.0) THEN
         WRITE(ITU,*) ' Component ',IPCOMP,' pre-simulation data for a:'
         WRITE(ITU,*) ' 1 node (ISV=20) CHP engine component'
         NITMS=10
         WRITE (ITU,*)' ADATA ',(ADATA(IPCOMP,J), J=1,NITMS)
         IF(ITU.EQ.IUOUT) THEN
            IX1=(IPCOMP/5)*5
            IF(IX1.EQ.IPCOMP.OR.IPCOMP.EQ.NPCOMP) call epagew
         END IF
      END IF

C Fill bdata array
      NITMS=9
      DO 5 I=1,NITMS-3
          BDATA(ipcomp,I)=ADATA(ipcomp,I+3)
  5   CONTINUE

C Check component has 1st connection to water.
C
      NCONS=1
      NCONPN=1
      DO 10 IPCONC=1,MPCONC
      IPCON1=ICONDX(IPCOMP,1,IPCONC)
      IF(IPCONC.LE.NCONPN) THEN
         IF(IPCON1.EQ.0) THEN
            GOTO 990
         ELSE IF(ICONTP(IPCON1).NE.20) THEN
            GOTO 990
         END IF
      ELSE IF(IPCON1.NE.0) THEN
         GOTO 990
      END IF
   10 CONTINUE
      RETURN

C Error handling
  990 WRITE(IUOUT,*) ' CMP98S: connection error for component ',IPCOMP
      WRITE(IUOUT,*) '         should be ',NCONS,' connection(s)'
      WRITE(IUOUT,*) '         ie connection to water'
      WRITE(IUOUT,*) '             '
      STOP ' CMP98S: unresolvable error'
      END
C ******************** CMP99S ********************
C
C CMP99S establishes for a plant component with plant db code 990 ie.
C a 3 node CHP engine unit model:
C whether the specified number of controlled variables is OK, and also
C whether the number of connections to this component is correct
C and whether the connected nodes are of a type as expected by the
C corresponding coefficient generator routine
C
      SUBROUTINE CMP99S(IPCOMP)
#include "plant.h"
#include "building.h"
C
      COMMON/OUTIN/IUOUT,IUIN
      COMMON/TC/ITC,ICNT
      COMMON/TRACE/ITCF,ITRACE(MTRACE),IZNTRC(MCOM),ITU

      COMMON/C9/NPCOMP,NCI(MPCOM),CDATA(MPCOM,MMISCD)
      COMMON/PDBDT/ADATA(MPCOM,MADATA),BDATA(MPCOM,MBDATA)
      COMMON/PCOND/CONVAR(MPCON,MCONVR),ICONTP(MPCON),
     &             ICONDX(MPCOM,MNODEC,MPCONC)
C
C Fill the BDATA array
      DO 5 I=1,18
         BDATA(IPCOMP,I)=ADATA(IPCOMP,5+I)
  5   CONTINUE

C Trace output
      IF(ITC.GT.0.AND.ITRACE(35).NE.0) THEN
         WRITE(ITU,*) ' Component ',IPCOMP,' pre-simulation data for a:'
         WRITE(ITU,*) ' 3 node (ISV=21) Small scale CHP gas engine unit'
         NITMS=5
         WRITE(ITU,*) ' ADATA ',(ADATA(IPCOMP,J),J=1,NITMS)
         NITMS=18
         WRITE(ITU,*) ' BDATA ',(BDATA(IPCOMP,J),J=1,NITMS)
         NITMS=1
         WRITE(ITU,*) ' CDATA ',(CDATA(IPCOMP,J),J=1,NITMS)
         IF(ITU.EQ.IUOUT) THEN
            IX1=(IPCOMP/5)*5
            IF(IX1.EQ.IPCOMP.OR.IPCOMP.EQ.NPCOMP) call epagew
         END IF
      END IF
C
C Check user specified number of controlled variables
      NCITM=1
      IF(NCI(IPCOMP).NE.NCITM)
     &   WRITE(ITU,*) ' CMP99S warning: user specified wrong number',
     &                ' of controlled variables'
C
C Check component has 1st connection to water
C                     2nd connection to air
      NCONS=2
      NCONPN=1
      DO 10 IPCONC=1,MPCONC
      IPCON1=ICONDX(IPCOMP,1,IPCONC)
      IPCON2=ICONDX(IPCOMP,2,IPCONC)
      IF(IPCONC.LE.NCONPN) THEN
         IF(IPCON1.EQ.0.OR.IPCON2.EQ.0) THEN
            GOTO 990
         ELSE IF(ICONTP(IPCON1).NE.20.OR.ICONTP(IPCON2).NE.21) THEN
            write(*,*) ICONTP(IPCON1), ICONTP(IPCON2)
            GOTO 990
         END IF
      ELSE IF(IPCON1.NE.0.OR.IPCON2.NE.0) THEN
         GOTO 990
      END IF
   10 CONTINUE
      RETURN

C
C Error handling
  990 WRITE(IUOUT,*) ' CMP99S: connection error for component ',IPCOMP
      WRITE(IUOUT,*) '         should be ',NCONS,' 1st to water 2nd to'
      WRITE(IUOUT,*) '         ambient.'
      STOP ' CMP99S: unresolvable error'
C
      END
