.de MT    \"macro to start text
.nr VS 12
.nr PS 10
.vs 12
.ps 10
..
.de mT    \"macro to start table text
.nr VS 10
.nr PS 8
.vs 10
.ps 8
..
.de ML    \"macro to start listing
.LD
.vs 7
.ps 6
.cs 1 24
.cs 3 24
..
.de ES    \"macro to end code listing
.DE
.cs 1
.cs 2
.cs 3
..
.EQ
delim $$
gsize 10
gfont R
.EN
.nr HM 0.5i
.ll 6.4i
.nr LL 6.4i
.MT
.TL
Facilities available in ESRU libraries
and common source directory
.AU
by Jon Hand
Energy Simulation Research Unit
of the University of Strathclyde
30 June 1993
.sp 2
.SH
Summary
.PP
A number of structural changes have been applied
to application software developed and supported within ESRU.  This report
is a reference for a library of
interface facilities and the creation of a directory of common code
for reading, reporting and creating files compatible with 
ESRU applications.  The
code has been written by the ESP-r consortium with the bulk of the
code originating with the staff of the Energy Simulation Research Unit.
This document is a guide to the use of the libraries and common code and
includes a summary, the interface to each of the procedures as well as
examples of their use.  The
following libraries have been produced:
.LP
libesru.a is the primary library for ESRU applications.  On X terminals 
it requires the use of libXww.a and libX.a and includes the following object files:
.IP "esrulib_low.o" 5
low level facilities for reading and writing strings, stripping
comments, date checking, solar angles, psychrometrics and vector
math as well as ASCII and binary file access.
.IP "esrulib_ter.o" 5
terminal interaction, paging, graphic and text menus
.IP "wwlib.o" 5
C interface (callable from fortran code) to the ww toolkit of graphics
facilities and dialogue facilities.
.LP
In /usr/esru/esp-r/src/esrucom are a number of standard subroutines for ESP-r compatible
file reading, creation and reporting.  These are included (via soft
links) by the various Makefiles.
.IP " esystem.F" 5
reading and reporting on ESP-r system configuration files.
.IP " scsys.F" 5
scans system configuration files without decoding
mass flow and plant networks.
.IP " eleakage.F" 5
reading of leakage distribution files.
.IP " edatabase.F" 5
reading and creation of primitive and composite thermophysical databases and
climate files.
.IP " egeometry.F" 5
reading, reporting, creation, rotation, conversion of zone geometry files as
well as site obstructions.
.IP " econstr.F" 5
reading, reporting and creation of zone construction files, as well as
reading multilayer construction databases and primitive construction 
databases.
.IP " econtrol.F" 5
reading and reporting on system control files.
.IP " emfnetw.F" 5
reading, reporting, and selection of mass flow networks
and their components.
.IP " esru_misc.F" 5
math and utility file reading facilities.
.IP " eroper.F" 5
reading and reporting on operations files.
.IP " e3dviews.o" 5
typical transforms, clipping, and labeling facilities for producing
3d views of geometry with attribution.
.IP " pltcfg.o" 5
reading and reporting on plant network files.
.IP " startup.c" 5
"c" main program for most applications - allows command line
to be parsed and passed to fortran code.
.sp 1
.bp
.SH
Details of source files
.PP
The following discussion looks into the details of each of the files
mentioned above, first providing a synopsis and then the interface
to each of the subroutines included.
.SH
esrulib_low
.PP
The files esrulib_low.f is a collection of low level support Fortran 
Functions and Subroutines.  None of the routines makes use of common blocks.
Esrulib_low.f contains the 
following input conversion functions/routines:
.mT
.TS
l l.
EGETI	Reads several integers from input channel.
EGETR	Reads several reals from input channel.
EGETS	Reads several strings from input channel.
EGETW	Finds kth word in a string (' 'or','separated)
EGETWI	Similar to EGETI with range checking & error messages.
EGETWR	Similar to EGETW with range checking & error messages.
EGETWRA	Recovers (IRVA) reals of real array (RVA) from an ASCII file.
EGETWIA	Recovers (IRVA) int of array (IVA) from an ASCII file.
EGETRM	T{
Returns the remainder (RSTR with no leading blanks) from 
a text string (TSTR) after position k.
T}
_
INTCNV	Converts word (20 char) into integer.
INTSTR	Converts integer into a string (10 char) with no leading blanks.
RELSTR	Converts a real into a string (10 char) with no leading blanks.
RELCNV	Converts word (20 char) into real.
STRIPC	Strips comments from a ASCII file string and returns the data.
CHITMS	Checks a character string & returns the number of data items.
CHARCH	Old routine to check a string for a specific number of data items.
NOYES	INTEGER FUNCTION to read the answer Y,y,1,N,n,0 to a question.
IFIRST	Returns the ASCII value for the first character in a string ISTR.
_
ERPFREE	Is used to close any file.
EFDELET	Delete file IUN and return ISTAT for compatibility.
_
EDAY	Returns the year day number when passed the day of month & month.
STDATE	T{
Takes the day of year and returns two descriptive strings:
DESCR takes the form '12 Jan' & DESCR1 takes the form 'Fri 12 Jan'.
T}
ESTIME	T{
Takes an integer timestep and returns two string descriptions:
DESCRH in the form '12h28' & DESCRD which takes the form of 12.46.
T}
EDAYR	Returns the day and month numbers from the day-of-year.
EWEEKD	T{
Returns the day of the week given the day of month, month and year as integers.
T}
EDAYCH	Checks for errors in the users specification of the day & month. 
DATTIM	Returns UNIX time via a string in the form : 16 Sep 73 14:23.
DAYCLK	Prints the day, month, day no. & time based on DOY & decimal hour.
EPROMPT	Does nothing, for compatibility only.
_
ESIND	Function returning SIN of angle where angle is given in degrees.
ECOSD	Function returning COS of angle where angle is given in degrees.
IFAX	Integer function returning the integer part of it's argument.
EAZALT	Computes the solar azimuth & altitude angles at current time.
EPAREA	Calculates the area for any closed polygon.
ORTTRN	ordinal transform of point by transform matrix.
VECTRN	T{
Transforms a vector VECIN by the 4x4 (homogeneous) matrix
TMAT and returns the vector VECOUT.
T}
VECPLN	T{
Returns the point of intersection X,Y,Z between a line
defined by X1,Y1,Z1 & X2,Y2,Z2 and a plane defined in PEQN.
T}
HMATMUL	Multiplies the homogeneous (4x4) matrices A by B returning C.
HREVMAT	T{
Takes the homogeneous perspective transformation PER and 
returns it's inverse REP making use of CROUT.
T} 
CROUT	T{
Inverts a nonsymetric square matrix A (order N), returning
the matrix B and IERR =-1 if matrix is singular.
T}
DPACC	T{
Provides double precision accumulation of inner products for
CROUT in the form SUM(+,-)SUM(+,-)AB.
T}
EYEMAT	Provides transform eyepoint - viewpoint....
ETRANSW	Transforms default Windows/doors into global co-ordinates.
AVER	Returns the centre of gravity of an polygon array.
CROSS	Performs a cross-product on vectors A() & B() returning in C().
ZEROS	Clear a 4x4 array prior to doing viewing transforms.
ECLOSE	Checks tolerance between two real numbers.
_

TAIRFE	Returns air temperature from enthalpy & moisture content.
TSATH0	Determines the saturation temperature from enthalpy.
TDB	T{
Calculates dry bulb temperature from enthalpy and
moisture content. (Reversal of the ENTHP2).
T}
ENTHP1	Calculates enthalpy of moist air kJ/kg.
ENTHP2	Calculates enthalpy of moist air kJ/kg.
HUMRAT	Calculates humidity ratio kg/kg.
HUMRT1	Calculates humidity ratio kg/kg.
VAPRS2	Evaluates vapour pressure (mbar).
SATVP	Evaluates saturated vapour pressure (mbar).
TWB	Calculates the wet bulb temp from db and moisture content.
PCSAT1	Evaluates percentage saturation.
PCSAT2	Evaluates percentage saturation.
PCRH1	Evaluates relative humidity.
PCRH2	Evaluates relative humidity.
SPVOL1	Calculates specific volume m^3/kg dry air.
SPVOL2	Calculates specific volume m^3/kg dry air.
HUVOL1	Evaluates humid volume m^3/kg.
HUVOL2	Evaluates humid volume m^3/kg.
SPHTC1	Returns the specific heat capacity of air kJ/(kg K).
SPHTC2	Returns the specific heat capacity of air kJ/(kg K).
DEWPT	Returns dew point based on curve fit and iteration.
SHTH2O	Water specific heat capacity kJ/(kg K).
DENH2O	Water density kg/m^3.
.TE
.MT
.PP
The interface to each of the routines is listed below:
.ML

C ************* EGETI 
C EGETI keeps on trying to read NVAR integers through channel INPCH and
C stores the results in the integer array IARR, unless a severe error
C occurs which is indicated through channel IERCH; IER is then set to 1
C A line of input consists of words separated by blanks or commas.
      SUBROUTINE EGETI(INPCH,IERCH,NVAR,IARR,IER)
      DIMENSION    IARR(*)

C ************* EGETR 
C EGETR keeps on trying to read NVAR reals through channel INPCH and
C stores the results in the real array RARR, unless a severe error
C occurs which is indicated through channel IERCH; IER is then set to 1
C A line of input consists of words separated by blanks or commas.
      SUBROUTINE EGETR(INPCH,IERCH,NVAR,RARR,IER)
      DIMENSION    RARR(*)

C *************** EGETS 
C EGETS keeps on trying to read NVAR strings through channel INPCH and
C stores the results in the character array CARR, unless a severe error
C occurs which is indicated through channel IERCH; IER is then set to 1
C A line of input consists of words separated by blanks or commas.
      SUBROUTINE EGETS(INPCH,IERCH,NVAR,CARR,IER)
      CHARACTER*(*) CARR(*)

C ***************** EGETW 
C EGETW gets first WORD after position K from the STRING of
C characters. Words are separated by blanks, commas, or tab. 
C Provides a warning message if ACT='W', a failure message 
if ACT='F' and does no message if ACT='-'. Modified after:
C AIRNET; G.N. Walton, US Nat. Institute of Standards and Technology
C     IOUT  - output channel for error messages
C     LS     - maximum length of STRING
C     L      - current position in WORD
C     LW     - maximum length of WORD
      SUBROUTINE EGETW(IOUT,STRING,K,WORD,ACT,MSG,IFLAG)
      CHARACTER*(*) WORD, STRING, MSG
      character ACT*1

C ***************** EGETP 
C EGETP gets first PHRASE after position K from the STRING of
C characters. Phrases are separated by tabs. Provides a warning
C message if ACT='W', a failure message if ACT='F' and does
C no message if ACT='-'.  IOUT is output channel for error messages.
      SUBROUTINE EGETP(IOUT,STRING,K,PHRASE,ACT,MSG,ier)
      CHARACTER*(*) PHRASE, STRING, MSG

C ***************** EGETWI 
C EGETWI gets first word after position K from the STRING of
C characters and converts it into an integer IV, tests it against
C the minimum MN and the maximum MX and provides a warning
C message if ACT='W', a failure message if ACT='F' and does
C no range checking if ACT='-'. Words may be separated by blanks, 
C commas, or tab: WORD,WORD,WORD or WORD WORD WORD or WORD, WORD, WORD
C are all valid.
      SUBROUTINE EGETWI(IOUT,STRING,K,IV,MN,MX,ACT,MSG,IER)
      CHARACTER*(*) STRING, MSG

C **************** EGETWR 
C EGETWR gets first word after position K from the STRING of
C characters and converts it into a real number RV, tests it against
C the minimum RMN and the maximum RMX and provides a warning
C message if RACT='W', a failure message if RACT='F' and does
C no range checking if RACT='-'. Words may be separated by blanks, 
C commas, or tab.
      SUBROUTINE EGETWR(IOUT,STRING,K,RV,RMN,RMX,RACT,MSG,IER)
      CHARACTER*(*) STRING, MSG

C **************** EGETWRA 
C EGETWRA recovers (IRVA) reals of real array (RVA) from an ASCII file
C (unit IAF) reading as many lines as necessary to recover the data.
C IER=2 if EOF is reached before INUM items have been parsed. IER=1 if
C there was a problem reading it. Each value is tested against
C the minimum RMN and the maximum RMX and provides a warning
C message if RACT='W', a failure message if RACT='F' and does
C no range checking if RACT='-'. Words may be separated by blanks, 
C commas, or tab.
      SUBROUTINE EGETWRA(IOUT,IAF,RVA,IRVA,RMN,RMX,RACT,MSG,IER)
      DIMENSION RVA(*)
      CHARACTER*(*) MSG

C *************** EGETWIA 
C EGETWIA recovers (IRVA) integers of integer array (IVA) from an
C ASCII file (unit IAF) reading as many lines as necessary to 
C recover the data.
C IER=2 if EOF is reached before IRVA items have been parsed. IER=1 if
C there was a problem reading it. Each value is tested against
C the minimum IRMN and the maximum IRMX and provides a warning
C message if IACT='W', a failure message if IACT='F' and does
C no range checking if IACT='-'. Words may be separated by blanks, 
C commas, or tab.
      SUBROUTINE EGETWIA(IOUT,IAF,IVA,IRVA,IRMN,IRMX,IACT,MSG,IER)
      DIMENSION IVA(*)
      CHARACTER*(*) MSG

C ***************** EGETRM 
C EGETRM returns the remainder of a text string TSTR after position k
C in RSTR where RSTR has no leading blanks.
      SUBROUTINE EGETRM(IOUT,TSTR,K,RSTR,ACT,MSG,IER)
      CHARACTER*(*) TSTR,RSTR,MSG


C *************** INTCNV 
C INTCNV converts non-blank character string ANUM to an integer.
C The limiting values for short integers are +/- 32759;
C for long integers +/- 2147483649    Modified after:
C AIRNET; G.N. Walton, US Nat. Institute of Standards and Technology
      INTEGER FUNCTION INTCNV(IOUT,ANUM,IFLAG)
      CHARACTER*(*) ANUM

C ***************** INTSTR 
C INTSTR converts an integer into a string (10 char long) with no 
C leading blanks. ISWD is the length of the resulting string.
      SUBROUTINE INTSTR(IOUT,INTIN,STR,ISWD,IFLAG)
      CHARACTER*10 STR


C *********************** RELSTR 
C RELSTR converts a real into a string (10 char) with no leading
C blanks. ISWD is the actual length of the resulting string.
      SUBROUTINE RELSTR(IOUT,RELIN,STR,ISWD,IFLAG)
      CHARACTER*10 STR


C ******************* RELCNV 
C RELCNV converts non-blank character string ANUM to real number
C Modified after:
C AIRNET; G.N. Walton, US Nat. Institute of Standards and Technology
      REAL FUNCTION RELCNV(IOUT,ANUM,IFLAG)
      CHARACTER*(*) ANUM


c ******************** STRIPC 
C STRIPC strips comments from a ASCII file string and returns the data.
C It assumes that if a string begins with a '#' then the whole line is 
C a comment an the next line is read.  If a ' #' is discovered within
C a line the rest of the line is removed. 
C IER=0 if ok. MSG is a text string used in error messages. If
C IR=0 then acts silently, otherwise notes when EOF found.
      SUBROUTINE STRIPC(INPCH,IOUT,OUTSTR,ITEMS,IR,MSG,IER)
      CHARACTER*124 tmp,STRING,OUTSTR,MSG1
      CHARACTER*(*) MSG

C ********************* CHITMS 
C CHITMS checks a character string (A), returning the number of data
C items (IW) separated by ' ' tab or ','.  Note to keep from 
C overwriting the string passed, deal with a copy.
      SUBROUTINE CHITMS(A,IW)
      CHARACTER*(*) A

C ******************* CHARCH 
C CHARCH: Older routine to check a string for a number of data items.
C This is an older version of CHITMS, however it modifies the string A.
      SUBROUTINE CHARCH(A,ND,IERR)
      CHARACTER*72 A

c ******************** NOYES 
C NOYES is an INTEGER FUNCTION which is used to read the answer to a
C question.  A line is read from the user, and the value of the 
C function is as follows:-
C   1 The answer was '1', ' Y', or '  YES'
C   0 The answer was '0', ' N', or '  NO'
C  -1 otherwise.
      FUNCTION NOYES(J)

c ******************** IFIRST 
C IFIRST: Returns the ASCII value for the first character in 
C a string ISTR.
      FUNCTION IFIRST(ISTR)
      CHARACTER*(*) ISTR

c ******************** ERPFREE 
C ERPFREE is used to close any file.
      SUBROUTINE ERPFREE(IUN,ISTAT)

c ******************** EFDELET 
C EFDELET: Delete file IUN and return ISTAT for compatibility.
      SUBROUTINE EFDELET(IUN,ISTAT)


C ****************** FPOPEN 
C FPOPEN Opens the file with standard parameter conventions for
C IUN, ISTAT, MODE, and IXIST;  FNARG is the file name.
        SUBROUTINE FPOPEN(IUN,ISTAT,MODE,IXIST,FNARG)
	CHARACTER*(*) FNARG

C ******************* FPRAND 
C  Opens a random access file with name FNARG.
C  LENG determines the record length and type as follows:-
C       <0      -( LENG ) characters per record, ASCII records.

C       =0      128 words per record,   IMAGE   MODE RECORDS
C               (BUFFER COUNT IS FORCED TO 1 TO ENSURE WRITES
C               ARE PERFORMED IN ORDER REQUESTED)
C
C       >0      (LENG  ) words per record, ff BINARY   records
C IUN,ISTAT, and IXIST are the same as standard conventions.
        SUBROUTINE FPRAND(IUN,ISTAT,LENG,IXIST,FNARG)
        CHARACTER*(*) FNARG

c ******************** EDAY 
C EDAY Returns year day number IYDN when passed the day of the month
C IDAYN and the month number IMTHN. 1st Jan= 1, 31st Dec=365, no leap
C years considered.
      SUBROUTINE EDAY(IDAYN,IMTHN,IYDN)

C ************* EPERSTR 
C EPERSTR creates three strings representing the start and stop time of
C a diary period based on the preferred time & date display format.
C IFDAY  0 gives 'DOY 10', 1 gives '10 Jan', 2 gives 'Fri 10 Jan'
C IFTIME 0 gives '10h30', 1 gives '10.50', 2 gives '0.4375'
C PERST1 (14 char) is: ' 10h00  15h30 ',' 10.00  15.50 ',' 0.4375 0.6458'
C PERST3 (44 char):
C if IFDAY=0 then it is: 'Period: DOY   1    To: DOY   1   YEAR:1990'
C if IFDAY=1 then it is: 'Period:  1 Jan     To:  1 Jan    YEAR:1990'
C if IFDAY=2 then it is: 'Period: Mon  1 Jan To: Mon  1 Jan  YEAR:1990'
C PERST2 (44 char) includes the time of day but not the year. 
C ITRU is the unit number for user output, IER=0 OK, IER=1 problem.
C BTIM and PETIM are in terms of decimal fractions of a day.
      SUBROUTINE EPERSTR(ITC,ITRU,IYEAR,IBDOY,IBTIM,IEDOY,IETIM,NTSPH,
     &           IFDAY,IFTIME,PERST1,PERST2,PERST3,IER)
      CHARACTER T1H*5, T1D*5, T2H*5, T2D*5
      CHARACTER PERST1*14,PERST2*44,PERST3*44,DS*7,DS1*10,DE*7,DE1*10

C ******************** STDATE 
C STDATE takes the day of year and returns two descriptive strings.
C DESCR takes the form '12 Jan' and DESCR1 takes the form 'Fri 12 Jan'.
      SUBROUTINE STDATE(ITRU,IYEAR,IDOY,DESCR,DESCR1)
      CHARACTER DESCR*7,DESCR1*10

C ******************** ESTIME 
C ESTIME takes an integer timestep and returns two string descriptions:
C DESCRH in the form '12h28' and DESCRD which takes the form of 12.46,
C As well as the time as a fraction of a day TIMER. 
C STIME takes timestep averaging IDAVER into account ie. 0=averaging,
C 1=no averaging. NTS is the number of timesteps per hour.
      SUBROUTINE ESTIME(NTS,IDAVER,ITIME,DESCRH,DESCRD,TIMER)
      CHARACTER*5 DESCRH, DESCRD

C ******************** EDTIME 
C EDTIME takes an real time and returns two string descriptions:
C DESCRH in the form '12h28' and DESCRD which takes the form of 12.46,
C As well as the time as a fraction of a day TIMER. 
      SUBROUTINE EDTIME(TIME,DESCRH,DESCRD,TIMER)
      CHARACTER*5 DESCRH, DESCRD

C *********************** EDAYR 
C 'EDAYR' returns the day and month numbers from the day-of-year where:
C day-of-year 1 = 1st January and day-of-year 365 = 31st December.
C NO LEAP YEARS ARE CONSIDERED!
      SUBROUTINE EDAYR(IYDN,IDAYN,IMTHN)

C ********************** EWEEKD 
C 'EWEEKD' returns the day of the week given the day of month, month
C and year as integers.
C MON=1, TUE=2, WED=3, THU=4, FRI=5, SAT=6 AND SUN=7.
      SUBROUTINE EWEEKD(ITRU,ND,NM,NY,IDAY)

C ********************* EDAYCH 
C EDAYCH will check for errors in the users specification of the day and 
C month under consideration.
      SUBROUTINE EDAYCH(ITRU,ID,IM,IERR)

C ********************* DATTIM 
C DATTIM returns UNIX time via a string in the form : 16 Sep 73 14:23.
      SUBROUTINE DATTIM(DT)
      CHARACTER*(*) DT

C ******************** EPROMPT 
C EPROMPT: Does nothing, for compatibility only.
      SUBROUTINE EPROMPT

C ******************** ESIND 
      FUNCTION ESIND (DEG)
C Returns SIN of angle where angle is given in degrees.

C ******************** ECOSD 
      FUNCTION ECOSD (DEG)
C Returns COS of angel where angle is given in degrees.

C ******************** IFAX 
C IFAX is an integer function returning the integer part of it's 
C argument truncated towards negative infinity.
      FUNCTION IFAX(V)

C ******************** EAZALT 
C EAZALT computes the solar azimuth and altitude angles at the current
C time (REAL).   The 'ISUNUP' variable determines whether the sun
C is up (=1) or down (=0).   The solar angles are computed relative
C to local mean time (ie Greenwich is the reference time zone for
C Britain).
      SUBROUTINE EAZALTS(TIMEH,ID,SLAT,SLON,ISUNUP,SAZI1,SALT1)

C ************* EPAREA 
C EPAREA calculates the area for any polygon where N is the number of
C points, X & Y are arrays of coordinates around the surface and A
C is the calculated area.
      SUBROUTINE EPAREA(N,X,Y,A)
      INCLUDE '/usr/esru/include/building.h'
      DIMENSION X(MV),Y(MV)

C ****************** ORTTRN 
C ORTTRN multiplies a point (XM,YM,ZM) by the transform matrix
C TMAT to return the point XO,YO,Z0.  If the points are to close
C together then IER=-1.
      SUBROUTINE ORTTRN(XM,YM,ZM,TMAT,XO,YO,ZO,IERR)
      DIMENSION TMAT(4,4)

C ******************* VECTRN 
C VECTRN transforms a vector VECIN by the 4x4 (homogeneous) matrix TMAT
C and returns the vector VECOUT.  If IERR is < 0 then a fatal error.
      SUBROUTINE VECTRN(VECIN,TMAT,VECOUT,IERR)
      DIMENSION VECIN(3),VECOUT(3),TMAT(4,4)

C ********************* VECPLN 
C VECPLN returns the point of intersection X,Y,Z between a line defined
C by X1,Y1,Z1 & X2,Y2,Z2 and a plane defined in PEQN.
      SUBROUTINE  VECPLN(X1,Y1,Z1,X2,Y2,Z2,PEQN,X,Y,Z,IERR)
      DIMENSION  PEQN(4)

C ******************** HMATMUL 
C HMATMUL multiplies the homogeneous (4x4) matrices A by B returning C.
C Matrix A is premultiplied and matrix B is postmultiplied.
      SUBROUTINE HMATMUL(A,B,C)
      DIMENSION A(4,4),B(4,4),C(4,4)

C ******************** HREVMAT
C HREVMAT takes the homogeneous perspective transformation PER and 
C returns it's inverse REP making use of CROUT. 
      SUBROUTINE HREVMAT(ITRU,PER,REP,IERR)
      DIMENSION PER(4,4),REP(4,4),A(4,4),WS(4)

C ******************** CROUT 
C CROUT inverts a nonsymetric square matrix A (order N), returning
C the matrix B and IERR =-1 if matrix is singular.
C WS is a workspace vector of dimension N, IA is the
C first dimension of A and IB is the second dimension.
C based on crout factorization based on code from
C Alan Bridges and Wilkinson and Reinsch 'Linear Algebra'
C Springer Verlag, 1971, PP 93-110
      SUBROUTINE CROUT(A,N,WS,B,IA,IB,ITRU,IER)
      DIMENSION A(IA,N),B(IB,N),WS(N)

C ******************** DPACC 
C DPACC provides double precision accumulation of inner products for
C CROUT in the form SUM(+,-)SUM(+,-)AB.
C A is the vector on left, I & J numerical identifiers of first two 
C elements of A in the multiplication and IJ is the dimension of A.
C For vector B the parameters K,L,KL are analogous to I,J,IJ.
C X is the quantity to be added to the product of the specified 
C elements of vectors A & B.
      SUBROUTINE DPACC(A,I,J,IJ,B,K,L,KL,X,SUM,N,IND)
      DIMENSION A(IJ),B(KL)

C ****************** EYEMAT
C EYEMAT provides transform eyepoint - viewpoint....
      SUBROUTINE EYEMAT(EP,VP,SCALE,TMAT,RMAT)
      DIMENSION  EP(3),VP(3),TMAT(4,4),RMAT(4,4)

C ******************** AVER 
C AVER returns the centre of gravity CG for an array
C of vertex points PNT with NP points in it.
      SUBROUTINE AVER(NP,PNT,CG)
      INCLUDE '/usr/esru/include/building.h'
      DIMENSION PNT(MV,3),CG(3)

C ******************** CROSS 
C CROSS performs a cross-product of two vectors A(X,Y,Z) and B(X,Y,Z),
C and returns the result in C(X,Y,Z).
      SUBROUTINE CROSS(A,B,C)
      DIMENSION A(3),B(3),C(3)

C ******************** ZEROS  
C ZEROS Clear a 4x4 array prior to doing viewering transforms.
      SUBROUTINE ZEROS(A)
      DIMENSION A(4,4)

C ******************** ECLOSE 
C ECLOSE allows two real numbers R1 & R2 to be checked for closeness
C to a given tolerance TOL and returns CLOSE = .TRUE. or .FALSE. 
      SUBROUTINE ECLOSE(R1,R2,TOL,CLOSE)
      LOGICAL CLOSE

C Air psychrometrics library.
C The following functions represent the psychrometrics
C of air. Units are SI but with with kJ instead of J.
C ******************** TAIRFE  
C TAIRFE: Returns air temperature from enthalpy & moisture content.
      FUNCTION TAIRFE(ENTH,W)

C ******************** TSATH0
C TSATH0: Determines the saturation temperature from enthalpy.
      FUNCTION TSATH0(H1,PATM)

C ******************** TDB
C TDB calculates dry bulb temperature from enthalpy and
C moisture content. It is the reversal of the ENTHP2 function.
      FUNCTION TDB(H,GS)

C ******************** ENTHP1
C ENTHP1: Calculates enthalpy of moist air kJ/kg.
      FUNCTION ENTHP1(TD,TW,PATM,IOPT)

C ******************** ENTHP2
C ENTHP2: Calculates enthalpy of moist air kJ/kg.
C Find the relevant equation for enthalpy of air & water vapour based
C on equation from fundamental data for B.S. engineers, Section 8,
C Eqns 7-20.
      FUNCTION ENTHP2(TD,GS)

C ******************** HUMRAT
C HUMRAT: Calculates humidity ratio kg/kg.
C Equation C1.3 IHVE(1975). Values of FS from fundamental data
C for B.S. engineers.
C NB FS depends on atmospheric pressure - see W P Jones page 34,
C table 2.1 and ASHRAE handbook of fundamentals 1981 page 5.4, table 2.
      FUNCTION HUMRAT(TD,TW,PATMOS,IOPT)

C ******************** HUMRT1
C HUMRT1: Calculates humidity ratio kg/kg.
C Equation C1.3 IHVE(1975). Values of FS from fundamental data
C for B.S. engineers.
C NB FS depends on atmospheric pressure - see W P Jones page 34,
C table 2.1 and ASHRAE handbook of fundamentals 1981 page 5.4, table 2.
      FUNCTION HUMRT1(TD,RH,PATMOS,IOPT)

C ******************** HUMR
C Calculate humidity ratio from Eastop & McConkey Applied Thermodynamics
C for Engineering Technologists. Equation 14.3 pp 492.
      FUNCTION HUMR(TD,RH,PATMOS)

C ******************** PSATR
C Calculate percentage saturation. from Eastop & McConkey Applied
C Thermodynamics for Engineering Technologists. Equation 14.7 pp 496.
      FUNCTION PSATR(TD,RH,PATMOS)

C ******************** VAPRS2
C VAPRS2: Evaluates vapour pressure (mbar).
C Equation C1.3 IHVE(1975). Values of FS from fundamental data
C for B.S. engineers.
C NB FS depends on atmospheric pressure - See W P Jones page 34,
C table 2.1 and ASHRAE handbook of fundamentals 1981 page 5.4, table 2.
      FUNCTION VAPRS2(TD,GS,PATMOS)

C ******************** SATVP
C SATVP: Evaluates saturated vapour pressure (mbar).
      FUNCTION SATVP(TD)

C ******************** VAPRS1 
C VAPRS1: 
      FUNCTION VAPRS1(TD,TW,PATMOS,IOPT)

C ********************  TWB
C TWB: Calculates the wet bulb temperature from
C dry bulb temperature and moisture content.
      FUNCTION TWB(TD,GS,PATMOS,IOPT)

C ******************** PCSAT1
C PCSAT1: Evaluates percentage saturation.
      FUNCTION PCSAT1(TD,TW,PATMOS,IOPT)

C ******************** PCSAT2
C PCSAT2: Evaluates percentage saturation.
      FUNCTION PCSAT2(TD,GS,PATMOS)

C ******************** PCRH1
C PCRH1: Evaluates relative humidity.
      FUNCTION PCRH1(TD,TW,PATMOS,IOPT)

C ******************** PCRH2
C PCRH2: Evaluates relative humidity.
      FUNCTION PCRH2(TD,GS,PATMOS)

C ******************** SPVOL1
C SPVOL1: Calculates specific volume m^3/kg dry air.
      FUNCTION SPVOL1(TD,TW,PATMOS,IOPT)

C ******************** SPVOL2
C SPVOL2: Calculates specific volume m^3/kg dry air.
      FUNCTION SPVOL2(TD,GS,PATMOS)

C ******************** HUVOL1
C HUVOL1: Evaluates humid volume m^3/kg.
C Equation from IHVE App.C, p28.
C Factor of 100 is for mbar to kpa.
      FUNCTION HUVOL1(TD,TW,PATMOS,IOPT)

C ******************** HUVOL2
C HUVOL2: Evaluates humid volume m^3/kg.
      FUNCTION HUVOL2(TD,GS,PATMOS)

C ******************** SPHTC1
C SPHTC1: Returns the specific heat capacity of air kJ/(kg K).
      FUNCTION SPHTC1(TD,TW,PATMOS,IOPT)

C ******************** SPHTC2
C SPHTC2: Returns the specific heat capacity of air kJ/(kg K).
      FUNCTION SPHTC2(TD,GS)

C ********************  DEWPT 
C DEWPT: Makes a crude estimate of dew point based on moisture
C content using curve fit. Using this estimate it iterates to a more
C refined value.
      FUNCTION DEWPT(G1,PATMOS)

C ******************** SHTH2O
C SHTH2O: Water specific heat capacity kJ/(kg K).
      FUNCTION SHTH2O(TEMP)

C ******************** DENH2O
C DENH2O: Water density kg/m^3.
      FUNCTION DENH2O(TEMP)

.ES
.SH
esrulib_ter
.PP
The file esrulib_ter.f is a collection of text and bid-mapped terminal 
control Fortran Functions and Subroutines.  It contains the following 
functions/routines:
.mT
.TS
l l.
EASKI	T{
Ask user for an integer with prompt, error messages & range 
checking as passed parameters.
T}
EASKR	T{
Ask user for a real number with prompt, error messages & range 
checking as passed parameters.
T}
EASKS	T{
Ask user for a string with prompt, error messages & list of 
standard strings passed parameters.
T}
st2name	Given `string' swap blanks & wildcards to _ return as `name'.
EPICKS	T{
Allows several selections to be made from an array of strings.
T}
EASKOK	Generic yes/no facility returning OK as a logical parameter. 
EASKAB	T{
Generic A/B choice facility returning 1 or 2 according to which
of the choices has been chosen.
T}
_
EASKPER	Provides interface to specification of a period of days.
DAYCLK	Print day, month, day no. and time based on the julian day & time.
FDROOT	Given a file name see if it contains a path.
EFOPSEQ	Open a sequential file with existence flag & path check.
EDELSEQ	Delete a sequential file with path check.
EFOPRAN	Open a random access file with existence flag & path check.
FINDFIL	Check existence of SFILE (with path) & return logical XST. 
ADDPATH	Return file name appended onto the path and logical concat.
_
C2FSTR	Convert c function returned string to fortran format.
TERMODE	Returns logical name of terminal type.
EKPAGE	Maps key characters, pages & array indexs in long display lists.
KEYIND	Decodes EMENU index and returns the array index of the item.
EPMENSV	saves menu definitions (common block PMENU).
EPMENRC	recovers menu definitions (common block PMENU) from PMENUSV.
EPAGE	Screen control: page without waiting.
EPAGEW	Screen control: Wait before paging.
EPWAIT	Screen control: Wait without paging.
EPAGEND	Screen control: Page then close window if open.
EMPAGE	Low level screen control for paging based on terminal model.
ELINC	Controls scratch pad output for text screens.
EPAGES	Initialise terminal, set up a scratch pad & line count.
SETLINC	Allows the user to change the length of the text page.
EMENU	Control variable width menu display on various terminals.
EWMENU	Is the binding to C function for menu dialogue.
VWMENU	Is the binding to C function for variable width menu.
EMKEY	Returns key (a-z) for a menu item based on data array index.
USRMSG	Generic message/prompt facility for all terminal types.
EDISP	Generic send text to scrolling display (text or graphic).
EHELPW	Returns the width IWH of the longest help text string.
EHELPD	Displays the current contents of common EHELP.
UPDVIEW	Called from C to pass back updates to common VIEWPX & GFONT
SCANTUT	Scans a tutorial file for available topics.
READTUT	Reads a tutorial file and displays a selected topic.
.TE
.MT
.PP
The interface to each is shown in the listing below:
.ML

c EASKI is a facility for asking the user for an integer which
C incorporates the prompt, error messages and range checking
C as passed parameters as follows:

C IVAL is the integer returned, PROMP1 & PROMP2 are the prompts to be 
C given to the user (similar to the syntax of USRMSG which allows
C two lines or a leading blank line).
C MIN is the minimum value, MAX is the maximum value.
C MINACT and MAXACT are actions to take if the range is exceeded:
C   'W' means warn user but accept, 'F' means refuse/fail to
C   accept value and ask again, '-' means no range checking.
C IDEFLT is the default value if 'D','d' typed.
C If a space or carriage return is typed then IVAL is not changed.
C ERMSG is a string appended to the range checking or read error
C to identify the value. IER is the error state, if 0 then OK.
C NHELP is the number of help lines and HELP() is the array
C of text strings to be printed out if '?','H','h' is typed
C by the user. 
C Examples:
C Ask user for zone number.
C        ICOMP=1
C        HELP(1)='The zone number is required only for reporting '//
C     &           'purposes.'
C        CALL EASKI(ICOMP,' ',' What is the zone number? ',
C     &             1,'F',MCOM,'W',1,'zone number',IER,1)
C    ...
C results in the following...

      SUBROUTINE EASKI(IVAL,PROMP1,PROMP2,MIN,MINACT,
     &                 MAX,MAXACT,IDEFLT,ERMSG,IER,NHELP)

      CHARACTER*(*) PROMP1,PROMP2,ERMSG
      CHARACTER MINACT*1,MAXACT*1


c ******************** EASKE
c EASKE is a facility for asking the user for an real
C (in xxE+xx format if very large or small) which
C incorporates the prompt, error messages and range checking.
C Parameters are as in EASKR.
      SUBROUTINE EASKE(RVAL,PROMP1,PROMP2,RMIN,MINACT,
     &                 RMAX,MAXACT,DEFLT,ERMSG,IER,NHELP)
      CHARACTER*(*) PROMP1,PROMP2,ERMSG
      CHARACTER MINACT*1,MAXACT*1

c ******************** EASKR ********************
c EASKR is a facility for asking the user for an real which
C incorporates the prompt, error messages and range checking
C as passed parameters as in EASKI.
C Example:
C    ....
C Read a site latitude.
C        XLAT=50.0
C        HELP(1)='The latitude is required for calculating the '//
C     &           'sun position, it should '
C        HELP(2)='be similar to that assumed for the climate file.'
C        CALL EASKR(XLAT," "," What is the site latitude (deg) ? ",
C     &             -89.9,"F",89.9,"F",35.0,"site latitude",IER,2)
C    ...

      SUBROUTINE EASKR(RVAL,PROMP1,PROMP2,RMIN,MINACT,
     &                 RMAX,MAXACT,DEFLT,ERMSG,IER,NHELP)
      CHARACTER*(*) PROMP1,PROMP2,ERMSG
      CHARACTER MINACT*1,MAXACT*1


C ************* EASKS 
c EASKS is a facility for asking the user for a text string which
C incorporates the prompt, error messages and help facilities
C as follows:

C STRVAL is the string returned, ISTRW is its length.
C PROMP1 & PROMP2 are the prompts using the same syntax as USRMSG.
C If a space is typed then STRVAL is not changed.
C ERMSG is a string placed at the top of the selection menu and to
C any range checking or read errors to identify the value.
C  IER is the error state, if 0 then OK.
C NHELP is the number of help lines and HELP() is the array
C of text strings to be printed out if '?','H','h' is typed
C by the user. 
C DSTR is a string to use as a default.

C Example:
C    ....
C test getting a string.
C        HELP(1)='The site name is a test of the menu help facilities.'
C        XNAME=' '
C        CALL EASKS(XNAME,' ',' What is the site name ?',
C          13,'home','test sites',IER,1)
C        CALL USRMSG(IUOUT,' ',' selected string is:'//XNAME,'-')

      SUBROUTINE EASKS(STRVAL,PROMP1,PROMP2,ISTRW,DSTR,ERMSG,IER,NHELP)
      CHARACTER*(*) PROMP1,PROMP2,ERMSG,STRVAL,DSTR

C ************** st2name
C Given `string' swap blanks & wildcards to _ : return as `name'.
      SUBROUTINE st2name(string,name)
      CHARACTER*(*) string,name

C ************* EPICKS 
c EPICKS is a facility allowing a number of selections to be made
C from an array of strings passed into the routine. EPICKS 
C incorporates the prompt, error messages and returns an array of
C selected indexes as follows:

C PROMP1 & PROMP2 are the prompts using the same syntax as USRMSG.
C INPICK is passed as the number of items which are allowed to
C   be selected. If = NSTALT then the prompt will include the
C   phrase '* ALL' otherwise if INPICK < NSTALT then the prompt 
C   will be in the form '* pick 2 items'. On return INPICK becomes
C   the actual number of items selected ( if 0 then none). 
C IVALS is an array of NSTALT size such that:
C   IVALS(1) is the first index selected,
C   IVALS(2) is the second index ...
C   IVALS(INPICK) is the last index chosen.
C NSTALT is the number of selection strings STALT passed.
C ERMSG is a string appended to the range checking or read error
C to identify the value. IER is the error state, if 0 then OK.
C NHELP is the number of help lines and HELP() is the array
C of text strings to be printed out if '?','H','h' is typed
C by the user. 

C Note that there is no particular limit on the number of alternate
C strings which can be passed to the subroutine as the selection menu
C allows paging. 
C User-defined text strings and string alternatives
C will be truncated at the width ISTRW.

      SUBROUTINE EPICKS(INPICK,IVALS,PROMP1,PROMP2,
     &                ISTRW,NSTALT,STALT,ERMSG,IER,NHELP)
      CHARACTER*(*) PROMP1,PROMP2,ERMSG,STALT(*)

c ******************** EASKOK
c EASKOK Generic yes/no facility returning OK as a logical parameter. 
C MSG1 and MSG2 are text strings (upto 124 char) to be printed.  
C In the case of a graphic menu the c function abbox will be called
C and the messages will appear in a dialogue box at the bottom of the 
C graphic window.
      SUBROUTINE EASKOK(MSG1,MSG2,OK)
      CHARACTER*(*) MSG1,MSG2

c ******************** EASKAB
c EASKAB Generic choice facility returning 1 or 2 according to which
C of the choices has been chosen.
C MSG1 and MSG2 are prompts (upto 124 char) to be printed. 
C AOPT & BOPT are the text strings describing the
C options available, (these should not be too long).
C In the case of a graphic menu the c function abbox will be called
C and the messages will appear in a dialogue box at the bottom of the 
C graphic window.
      SUBROUTINE EASKAB(MSG1,MSG2,AOPT,BOPT,IWHICH,NHELP)
      CHARACTER*(*) MSG1,MSG2,AOPT,BOPT

C ************* EASKPER
C EASKPER: Provides interface to specification of a period of days. It
C returns IBDOY and IEDOY based on the current settings of IFDAY. 
      SUBROUTINE EASKPER(IBDOY,IEDOY,IFDAY,IER)

c ******************** EDAYCLK 
C DAYCLK will print the day, month, day no. and time based on the day
C of the year IYD and clock time in hours TIME.
      SUBROUTINE DAYCLK(IYD,TIME,ITU)

C ******* FDROOT
C Given a file name (string) see if it contains a (path) and a (filen).
      SUBROUTINE fdroot(itru,string,path,filen)
      CHARACTER*(*) string,path,filen

C ******************** EFOPSEQ
C EFOPSEQ: Open a sequential ASCII file and return appropriate
C messages and error status.
C IUN is the file unit number, IIN is the user input channel,
C IOUT is the message channel, SFILE is the file name. 
C EXIST is an integer flag denoting:
C   0 - should exist, no message but error -301 if not.
C   1 - should exist, message & error -301 if not. 
C   2 - should not exist, error 300 & message if exists. 
C   3 - if exists use otherwise create.
C   4 - if exists ask user before overwriting otherwise create.
C IER is the error status (0 is OK).
C If the path is other than `./' but is not `/usr/esru' then 
C concatenate path with sfile.
      SUBROUTINE EFOPSEQ(IUN,IIN,IOUT,SFILE,EXIST,IER)
      CHARACTER SFILE*72
      INTEGER EXIST

c ******************** EDELSEQ
C EDELSEQ: Delete a sequential ASCII file and return appropriate
C messages and error status. The file is opened before deletion.
C IUN is the file unit number, IIN is the user input channel,
C IOUT is the message channel, SFILE is the file name. 
C IER is the error status (0 is OK).
C If the path is other than `./' but is not `/usr/esru' then 
C concatenate path with sfile before deleting.
      SUBROUTINE EDELSEQ(IUN,IOUT,SFILE,CONFIRM,IER)
      LOGICAL CONFIRM
      CHARACTER SFILE*72

C ******************** EFOPRAN
C EFOPRAN: Open a random access file and return appropriate
C messages and error status.
C IUN is the file unit number, IIN is the user input channel,
C IOUT is the message channel, SFILE is the file name, IRW is
C record width.  EXIST is an integer flag denoting:
C   0 - should exist, no message but error -301 if not.
C   1 - should exist, message & error -301 if not. 
C   2 - should not exist, error 300 & message if exists. 
C   3 - if exists use otherwise create.
C   4 - if exists ask user before overwriting otherwise create.
C IER is the error status (0 is OK).
C If the path is other than `./' but is not `/usr/esru' then 
C concatenate path with sfile.
      SUBROUTINE EFOPRAN(IUN,IIN,IOUT,SFILE,IRW,EXIST,IER)
      CHARACTER SFILE*72
      INTEGER EXIST

c ******************** FINDFIL
C FINDFIL: Check for existence of a file SFILE (with path) & return XST. 
C If the path is other than `./' but is not `/usr/esru' then 
C concatenate path with sfile before looking.
      SUBROUTINE FINDFIL(IOUT,SFILE,XST)
      LOGICAL XST
      CHARACTER SFILE*72

C ******************** addpath
C ADDPATH: Return file name appended onto the path and logical concat.
C IOUT is the message channel, SFILE is the file name.
C If the path is other than `./' but is not `/usr/esru' then 
C concatenate path with sfile.
      SUBROUTINE addpath(IOUT,SFILE,tfile,concat)
      common/rpath/path
      LOGICAL concat
      CHARACTER SFILE*72,path*72,tfile*72

C ************ c2fstr
C Convert c function returned string to fortran format.
C Strip off the last character (end of line mark) as well as any
C leading blanks from string returned.
      SUBROUTINE c2fstr(cstr,fstr)
      CHARACTER*(*) cstr,fstr

C ******* termode
C Given a string swap all blanks to _ to make a single word (ie zone name).
      SUBROUTINE termode(mode,tmode)
      CHARACTER*(*) tmode

C ***************** EKPAGE 
C EKPAGE maps key characters, pages & array indexs in long display lists.
C No menu should have more than 26 data selections (plus heading and 
C control lines) so that key characters (a-z) for arrays will not be
C repeated. Notes on variables:
C IPACT  : page option, if IPACT= CREATE then only update the common
C          block PMENU, otherwise ask for action to be taken. 
C IPM,MPM: current and last page of menu,
C IST    : is the data array index at the beginning of the menu.
      SUBROUTINE EKPAGE(ITC,ITRU,IPACT)

C ******************* KEYIND
C KEYIND decodes the index INO and returns the array index IA of the item
C displayed and whether INO is within the list.  If IR=1 then it asks
C for confirmation. INOUT is set to a parameter from epara.h.
      SUBROUTINE KEYIND(IR,ITRU,MENUL,INO,IA,INOUT,IER)

C ********************** EPMENSV 
C EPMENSV pushes the current state of common block PMENU into common block
C PMENUSV.  Up to 3 levels are maintained.
C This is useful if a second menu is about to be called and
C knowledge of the first is required.  See also EPMENRC which pops the
C information back into common PMENU.
      SUBROUTINE EPMENSV

C *********************** EPMENRC
C EPMENRC recovers menu definitions (common block PMENU) from common 
C block PMENUSV.
C This is useful if returning from a second menu.  See also EPMENSV.
      SUBROUTINE EPMENRC

C++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
C EPAGE: Screen control: page without waiting.
      SUBROUTINE EPAGE

C++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
C EPAGEW: Screen control: Wait before paging.
      SUBROUTINE EPAGEW

C++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
C EPWAIT: Screen control: Wait without paging.
      SUBROUTINE EPWAIT

C++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
C EPAGEND: Screen control: Page then close window if open.
      SUBROUTINE EPAGEND

C++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
C EMPAGE: Low level screen control for paging based on terminal model.
C The available terminal see EPAGES.
      SUBROUTINE EMPAGE(IPAG,IW,IEND)

c ******************** ELINC 
C ELINC: Controls scratch pad output for text screens which returns:
C For TTY & LPT ELINC tests if N lines fit on the page, if yes then the
C line cout is updated to give lines left on page, if not the terminal is
C paged and a new limit is set. 
      SUBROUTINE ELINC(N)

C++++++++++ EPAGES +++++++++++++++++++++++++++++++++++++++++++++
C EPAGES: Initialise terminal, set up a scratch pad counter depending
C on terminal type.  LIMIT is the number of line output for a full page
C and is initially set at 24 lines (this can be changed by a call to
C SETLINC. The parameter TITLE will appear in the window heading.
C The method of page termination depends on the model number.
C The available terminal types are:
C type -6 = batch/shell/function button mode.
C type -2 = teletype with waiting.
C type -1 = teletype.
C type  8 = bitmapped with dialogue box.
      SUBROUTINE EPAGES(MODEL,IIN,IOUT,TITLE)
      CHARACTER*(*) TITLE

C++++++++++ EMENU +++++++++++++++++++++++++++++++++++++++++++++
C EMENU: Control menu display on various terminals.  Name is a character
C string to form the heading of menu, ITEMS is an array of character
C strings making up the menu, NITMS is the number of items in the menu,
C INO is the number of the item chosen.
      SUBROUTINE EMENU(IIN,IOUT,NAME,ITEMS,NITMS,INO)
      CHARACTER*(*) NAME,ITEMS(NITMS)

C++++++++++ EWMENU +++++++++++++++++++++++++++++++++++++++++++++
C EWMENU: Is the binding to C function for menu dialogue.  It has
C been stripped of references to TEK and allows the string widths
C to be variable widths. Uses width of items in call to evwmenu.
      SUBROUTINE EWMENU(name,items,nitms,impx,impy,irpx,irpy,ino)
      character*(*) name, items(*)

C++++++++++ VWMENU +++++++++++++++++++++++++++++++++++++++++++++
C VWMENU: Is the binding to C function for menu dialogue.  It has
C been stripped of references to TEK and allows the string widths
C to be variable widths.
      SUBROUTINE VWMENU(name,items,nitms,impx,impy,iw,irpx,irpy,ino)
      character*(*) name, items(*)

C *********************** EMKEY
C EMKEY returns a key character for a menu item (a-z) based on the array
C index of the item.  Uses ICHPK(26), 'a','b'... from esrulib...
      SUBROUTINE EMKEY(ITRU,IAI,KEY,IER)
      CHARACTER*1 KEY

c ******************** USRMSG
c Generic error reporting facility.  IOUT is the output channel, MSG1
C and MSG2 are text strings (upto 124 char) to be printed.  LEVEL is a
C single character 'W' or 'w' for warning,  'F' or 'f' for Fatal error,
C '-' to only print the messages, '?' is a prompt.  In the case of a 
C fatal error STOP will be called, otherwise execution will return to
C the calling point.
C In the case of a graphic menu the c function msg_box will be called
C and the messages will appear in a dialogue box at the bottom of the 
C graphic window. The user must have previously called open_msg_box(2).
       SUBROUTINE USRMSG(IOUT,MSG1,MSG2,LEVEL)
      CHARACTER*(*) MSG1,MSG2
      CHARACTER*1 LEVEL

C ********************* EDISP 
C EDISP is a generic routine which displays lines of text passed to it
C in a format depending on the terminal type:
C For types -1 -2 does a fortran write to channel IUOUT,
C For types -6 writes to ICOUT,
C For type 8 manages the text which is passed to egdisp for
C treatment as a scrolling window.
C Use egdispopen to open the display window with size and font details.
C Use egdispclr to clear the display window on a new page.
C The maximum width of text which can be accommodated is 124 characters.
      SUBROUTINE EDISP(ITRU,MSG)
      CHARACTER*(*) MSG

C ********************* EHELPW
C EHELPW returns the width IWH of the longest text string in the common
C EHELP where IL is the number of lines of help under consideration.
      SUBROUTINE EHELPW(ITRU,IL,IHW,IER)

C ************************ EHELPD
C EHELPD displays the current contents of common EHELP in a form 
C appropriate to the current terminal type. MSG is a short descriptive
C string for the subject. NHELP is the number of lines to be displayed.
C IBX & IBY are the preferred coords of the lower left corner if graphic.
      SUBROUTINE EHELPD(IOUT,MSG,NHELP,IBX,IBY,IER)
      CHARACTER*(*) MSG

C ********* UPDVIEW
C UPDVIEW is called from C code in wwlib.c with values to update common
C blocks GFONT, VIEWPX and SPAD. Set REFRESH=true.  Set MODIFY=true
C to force any wire-frame images to be redrawn. 
      subroutine updview(ifsc,itfsc,ilc,irc,itc,ibc,iwc,ihc,lttyc)

.ES
.MT
.SH
wwlib.c
.PP
Wwlib.c is a collection of functions which provide graphing
functions for bitmap screens based on WW calls.  
The code is divided into three
sections, the first providing initialisation and closing of
the graphics environment, the second section being older functions
which are begin phased out, and the final section being new code
as follows:
.mT
.TS
l l.
winint	initialise the ww window with message at top.
tchild	return child process terminal info.
winclr	clears the screen
wincsr	switch on (TRUE) off (FALSE) cursor
winfin	closes the ww window
_

winlin	OLD draws a line to x,y and sets the rasterop to 'draw'
winpen	changes the rasterop temporarily to 'type'
winloc	OLD returns the character or mouse button pressed
winpos	OLD returns the position of the mouse after winloc
winget	T{
OLD returns mouse position and any char pressed
without waiting for user input
T}
wintxt	OLD outputs the value ichar as a text character
winstm	OLD set the mouse to position x, y
windmp	dumps the windows image to the file name (disabled)
winlod	loads the file frame.num to the screen   (disabled)
windcl	OLD define the colour 'n' in RGB using ir,ig,ib
winscl	OLD set current colour to n
_
winfnt	changes the font (4 different sizes 0,1,2,3)
wstxpt	outputs a string beginning at pixel x and y.

winbut	T{
puts a button on the screen and 
returns the character or mouse button pressed
T}
wind3d	T{
opens a viewing box taking into account menu width and dialogue box.
T}
win3dclr	clear viewing box.
viewtext	T{
displays a line of text within the viewing
box with size and location parameters
T}
openaskbox	T{
creates a text input box within the dialogue
area positioned to match the msg's passed.
T}
askdialog	controls input of strings in the dialogue area.
einp	single line terminal emulator for askdialog.
msgbox	T{
places prompts in the dialogue box with the same syntax used in USRMSG.
T}
abbox	T{
places prompts in dialogue box as in msgbox
and presents two user supplied choices.
T}
opengdisp	opens a scrolling text display area.
egdisp	writes text in the scrolling text display area.
egdispclr	clears scrolling text display at EPAGEW.
eline	draws or moves a line @ pixel location x y.       
edline	draws a dotted line from x1 y1 to x2 y2.       
edash	draws a dashed line from x1 y1 to x2 y2. 
echain	draws a chained line from x1 y1 to x2 y2. 
ecirc	draws a filled or open circle @ location x y.
esymbol	draws one of 12 symbols at location x y.
eghelp	opens and displays help text in a box.
axiscale	T{
determines scaling parameters for horizontal and vertical axis.
T}
linescale	stores scaling parameters for lines.
vrtaxis	T{
draws a vertical axis (tic & labels on right or left side).
T}
horaxis	T{
draws a horizontal axis with tic marks and labels.
T}
dinterval	T{
determines the tic interval for an axis as well
as the number of decimal places.
T}
labelstr	T{
generates an appropriate label for the value passed.
T}
opentutorial	place tutorial button on screen.
opensetup	place environment button on screen.
aux_menu	test for mouse click in other portions of the screen.
refreshenv	pass back window information to fortran common.
runexec	execute a program based on match char string.
_
.TE
.MT
.PP
The interface to each is listed below.
.ML

/* ***** Initialise display. *************** */
winint_(term,msg,msglen)
long int *term;           /* terminal type from fortran  */
long int *msglen;         /* length of message passed from fortran */
char *msg;                /* window heading      */

/* ******* return child process terminal info. *************** */
tchild_(cterm)   long int *cterm;           /* child terminal type  */

/* *************** Change cursor ****************** */
wincsr_( state )  int state;

/* *************** Release display. *************** */
winfin_()

/* **************  Erase whole screen. ************* */
winclr_()

/* *************** Move/draw routine. OLD *************** */
winlin_(x,y) int *x,*y;	/* co-ords		*/

/* ************ pen type routine ************** */
winpen_(type) int *type;	/* line type as above */

/* ************ Cursor routine. *************** */
winloc_(ichar)
 int *ichar;	/* character returned	*/

/* *******  Return the mouse position. OLD ********** */
winpos_(x, y) int *x,*y;	/* returned co-ords	*/

/* *******  Return the cursor position. OLD ********** */
winget_(ichar,x,y) 	/* returns the position of the cursor without
			waiting for the user to press a key or button */
int *ichar, *x, *y;

/* ********* Write single character at current position. OLD ******** */
wintxt_(ichar)
 int *ichar;	/* integer value for character */

/* ********** Define colour *********** */
windcl_(n,ir,ig,ib)
int *n, *ir, *ig, *ib;

/* ********** Set colour ************* */
winscl_(n)
int *n;

/* ********** Line operation ************* */
static getop(c)
 int c;

/* ************ Sep length of pause loop **************** */
setpause_(n)  long int *n;

/* ********* Write a string beginning at pixel x and y. ******* */
wstxpt_(x,y,buff,n,len)
char *buff;
int n, len; /* len is length as passed automatically by fortran */
int *x, *y; /* x y is the position of the string*/

/* ************ Select a font **************** */
winfnt_(n)   int *n;

/* ******  Routine to place button on screen and report press ********** */
winbut_(ichar)   int *ichar;	/* character returned	*/

/* **************  Open feedback background box *************** */
/*
 Passed the character width of the main control menu, the number of
 lines of text to leave at the bottom for a dialogue box.
 dbx1 is the outer box (including axes) and viewbx is the image area.
*/
feedbox_(menu_char,d_lines,gw,gh)
	long int	*menu_char,*d_lines,*gw,*gh;

/* **************  Open a 3D viewing box *************** */
/*
 Passed the character width of the main control menu, the number of
 lines of text to leave at the bottom for a dialogue box, the width of
 the left, right inside margins in terms of number of characters
 with the current font and the top and bottom inside margins in terms
 of lines of characters.
 Returns the pixel coord of the viewing box left, right, top, bottom as well
 as its overall pixel width & height.
 dbx1 is the outer box (including axes) and viewbx is the image area.
*/
win3d_(menu_char,cl,cr,ct,cb,vl,vr,vt,vb,gw,gh)
	long int	*menu_char,*gw,*gh;
        long int	*cl,*cr,*ct,*cb;
        long int	*vl,*vr,*vt,*vb;

/* ******  Routine to clear view/3d display box. ********** */
  win3dclr_()

/* **************  Display text in viewing box *************** */
/*
 Given a string 'msg' and the 'line' where the string should be written
 and whether it should be left (side = 0), centered (side = 1), or
 right justified (side = 2) as well as the font size (0=small, 1 2 =medium,
 3=large).
*/
viewtext_(msg,linep,side,size,len)
  char  *msg;                    /* character string  */
  long int *len;                 /* length from f77   */
  long int *linep, *side, *size;     /* position indicators */

/* **************  Display text as in old teklib tlabel ******* */
/*
 Given a string 'msg' and a reference position x,y in user units
 where the string should be written based on static variables from
 previous call to linescale.
*/
etlabel_(msg,x,y,ipos,size,len)
  char  *msg;       /* character string  */
  long int *len;    /* length from f77   */
  long int *size;   /* font size */
  long int *ipos;   /* 0=centred, 1=right, 2=centred top,
                       3=left,4=centered bottom.
                    */
  float *x,*y;      /* position in user units */

/* **************  Open a dialogue input box *************** */
/*
 Passed the prompts which were sent to the dialogue box so that the
 correct position is defined. msgbx contains the prompts while
 askbx is reserved for user input.  If the width of the string
 would cause the input box to over-run the dialogue box then
 truncate the input box. If there is only a " " in the second
 prompt then position askbx against the left side.
*/
openaskbox_(msg1,msg2,asklen,len1,len2)
  char      *msg1,*msg2; /* character strings for each line */
  long int  *len1,*len2; /* lengths as supplied by fortran */
  long int  *asklen;     /* character width of the input box */

/* **************  Get string from dialogue input box *************** */
/*
 Code implements control of a single line input facility.  
 Input begins when cursor is within askbx.
*/
askdialog_(sstr,id,iq,f_len)
    char *sstr;         /* string returned to fortran (remember strip end mark) */
  long int *id,*iq;   /* flag for default and help query */
  long int  *f_len;   /* character width of the string from fortran */

/* ************** function to remove leading blanks *************** */
strip_leading_space (line)   char    *line;

/* **************  Write prompts in dialogue box *************** */
/*
 Passed two strings (as in USRMSG) and their lengths writes into
 dialogue box (msgbx) after clearing the box.
*/
msgbox_(msg1,msg2,len1,len2)
  char      *msg1,*msg2;
  long int  *len1,*len2;      /* lengths as supplied by fortran      */

/* **************  Open a two choice box *************** */
/*
 Passed the prompts which were sent to the dialogue box so that the
 correct position is defined. choicebx contains the prompts while
 a & b is reserved for user input. If there is only a " " in the second
 prompt then position askbx against the left side. If query box is
 selected then ok returned as 3 which should be trapped by calling code.
*/
abbox_(msg1,msg2,opta,optb,ok,len1,len2,len3,len4)
  char    *msg1,*msg2;         /* character strings for each line */
  char    *opta,*optb;         /* character strings for 2 options */
  long int *len1,*len2;        /* lengths as supplied by fortran (ignored) */
  long int *len3,*len4;        /* lengths as supplied by fortran (ignored) */
  long int *ok;                /* returned 1=option a picked, 2=option b picked */

/* ************** Confirm Fortran string length *************** */
/*
 Since the string length automaticly passed between Fortran and C
 tends to represent the "defined" string length rather than the actual
 string length here is a bit of code to start at the "defined" end
 and work backwards to find the last non-blank character position.
*/
f_to_c_length(msg,len)
  char    *msg;         /* character string */
  int     *len;          /* position of last non blank character */


/* **************  Open a text display box *************** */
/*
 Passed the character width of the main control menu, the number of
 lines of text to leave at the bottom for a dialogue box, the number
 of lines of text to be displayed within it, the display font to be
 used in subsequent calls to Egdisp.
 Returns the overall pixel width & height.
 disp_opend is a static flag so that other facilities know there is
 a text display box.
 Range checking to make sure that it does not squeeze any graphic
 display area beyond endurance. 
*/
opengdisp_(menu_char,displ_l,dialogue_l,fnt,gdw,gdh)
 long int *menu_char,*displ_l,*dialogue_l,*fnt,*gdw,*gdh;

/* *************** ESRU text display box. *************** */
/* 
 egdisp takes a string from f77 and attempts to display
 it in the text display box defined in opengdisp. 
 The string passed will be displayed on a single line
 however if it will  not fit in the box it will be truncated.
*/
egdisp_(msg,line,len)
  char  *msg;                  /* character string  */
  long int *len;               /* length from f77   */
  long int *line;              /* position indicator */

/* ******  Routine to clear text display box. ********** */
/*
 Clears text display box and redraws the scrolling box located on
 its right side.
*/
  egdispclr_()

/* ******  Routine to track mouse in view box. ********** */
trackview_(ichar,irx,iry)
 long int *ichar,*irx,*iry;	/* character returned, mouse position	*/

/* *************** ESRU line drawing routine. *************** */
/* 
 co-ords, operation flag equiv to fwwutil parameters: 
	1=move to absolute pixel coord, 
	0=draw line to absolute pixel coord, 
	3=move to relative pixel coord,
	2=draw line to relative pixel coord.
*/
eline_(x,y,operation)
  long int *x, *y, *operation;	

/* *************** User units to pixel coords. *************** */
/* 
 Based on scaling data passed to linescale this returns the pixel
 co-ords for a particular sets of user data.
*/
u2pixel_(ux,uy,ix,iy)
  float *ux, *uy;	
  long int *ix, *iy;	

/* *************** General line plotting. *************** */
/* 
 Based on scaling data passed to linescale this draws a solid or
 dashed or dotted line or symbol as in tplot. 
 Updown = 0 is pen up, > 0 pen down, -1 to -100 dashed line,
          -101 to -200 chain line, -201 to -300 dotted line,
 in each case the spacing of dashes etc is defined by the value
 ie. -4 is a dashed line 4 pixels long, -203 is dots @ 3 pixels.

 sym is the symbol number to plot, if 0 then no symbol, otherwise
 map tplot conventions to esymbol. 

*/
etplot_(ux,uy,updown,sym)
  float *ux, *uy;	
  long int *updown, *sym;	

/* *************** ESRU dotted line drawing routine. *************** */
/* 
 Unlike eline above this function is passed both sets of pixel co-ords.
 The ipdis is the number of pixels between each dot.  Typical values
 are 2 for a dense dotted line, 3 for a sparse one, values over 4 are
 probably not useful.
*/
edline_(x1,y1,x2,y2,ipdis)
  long int *x1, *y1, *x2, *y2, *ipdis;	

/* *************** ESRU double width line drawing routine. *************** */
/* 
 Draws a two pixel wide line between two pixel coordinates.
 Based on the slope of the line an adjacent line is drawn one pixel away.
*/
edwline_(x1,y1,x2,y2)
  long int *x1, *y1, *x2, *y2;	

/* *************** ESRU dashed line drawing routine. *************** */
/* 
 Edash draws a dashed line based on start and end point pixel co-ords.
 Ipdis is the number of pixels between each dot.  Typical values
 are 2 for a dense dashed line, 3 for a normal one, values over 4 are
 probably not useful. Two static values are used:
   dash_on : to say whether current increment is part of a dash,
   dash_rem: to give the pixel distance remainder.
  dash_on and dash_rem are cleared if edash call is made with ipdis = 0.
*/
edash_(x1,y1,x2,y2,ipdis)
  long int *x1, *y1, *x2, *y2, *ipdis;	

/* *************** ESRU chained line drawing routine. *************** */
/* 
 Echain is passed start and end point pixel co-ords.
 The ipdis is the number of pixels between each dot.  Typical values
 are 3 for a dense chain, 4 for a normal one, values over 4 are
 probably not useful. Two static values are used:
   dash_on : to say whether current increment is part of a dash,
   dash_rem: to give the pixel distance remainder.
  dash_on and dash_rem are cleared if edash call is made with ipdis = 0.
*/
echain_(x1,y1,x2,y2,ipdis)
  long int *x1, *y1, *x2, *y2, *ipdis;	

/* *************** ESRU rectangle drawing routine. *************** */
/*
 This draws a rectangle based on the size and position in user units
 and transforms into pixel positions via static values passed into
 the C code via a previous call to linescale.
*/
erectan_(x,y,dx,dy,dt)
  float *x, *y,*dx,*dy,*dt;	

/* *************** ESRU triangle drawing routine. *************** */
/*
 This draws a triangle based on the size and position in user units
 and transforms into pixel positions via static values passed into
 the C code via a previous call to linescale.
       /|
      / |dy
     /__|
  x,y dx
*/
etriang_(x,y,dx,dy,dt)
  float *x, *y,*dx,*dy,*dt;	

/* *************** ESRU circular arc routine. *************** */
/*
 This draws a circular arc based on the size and position in user units
 and transforms into pixel positions via static values passed into
 the C code via a previous call to linescale. Note: to shade the
 edge of an arc call twice with di=0. then di=0.5.
*/
ecirarc_(x,y,ths,thf,r,num,di)
  float *x, *y,*ths,*thf,*r,*di;
  long int *num;	

/* *************** ESRU symbol drawing routine. *************** */
/* 
 esymbol is passed a pixel coord, a symbol index, and a size.
 currently there are 25 symbols.
*/
esymbol_(x,y,sym,size)
  long int *x, *y, *sym, *size;	

/* *************** ESRU circle drawing routine. *************** */
/* 
 co-ords, operation flag: 
	0=draw circle is drawn with clear inside. 
	1=draw filled black circle.
	2=to be added...
	3=to be added...
*/
ecirc_(x,y,rad,operation)
  long int *x, *y, *rad, *operation;	

/* *************** ESRU help box. *************** */
/* 
 This function takes an array of strings from f77 and attempts to
 display it in a box and waits for the user to press a key
 or click a mouse to get rid of it.  The strings passed will each
 be displayed on a separate line so that the arrangement of the
 text passed will not be changed ie. no word warp etc will be
 undertaken, however if the longest string will not fit in the
 width of the box then a smaller font will be used.
*/
  eghelp_(items,nitmsptr,iw,impx,impy,len_items)

  char      *items;         /* f77 array of help text strings    */
  long int  *nitmsptr;      /* number of help lines to display   */
  long int  *iw;            /* actual max char width in items    */
  long int  *impx,*impy;    /* box position (if 0,0 use default) */
  int  len_items;           /* length of help string from f77    */

/* ************** AXSCALE ************************ */
/* 
 Determine the scaling ratios for use by ww based on the axis range of 
 XMN to XMY for the horizontal axis and YMN to YMX for the vertical 
 axis within a window "gw" pixels wide by "gh" pixels high. XSC is the 
 scaling factor for the horizontal axis, YSC for the vertical and SCA 
 is a scaling factor which gives an equal aspect ratio.  In mixed cases 
 of minimum/maximum X/Y coords being negative set a data offset Xadd & 
 Yadd to assist in line drawing ( window coords are 0,0 upper left 
 whereas line drawing is 0,0 in the lower left). 
*/

axiscale_(gw,gh,xmn,xmx,ymn,ymx,xsc,ysc,sca,xadd,yadd)
  int *gw, *gh;
  float *xmn, *xmx, *ymn, *ymx, *xsc, *ysc, *sca, *xadd, *yadd;

/* ************** LINESCALE *********************** */
/* 
 Store scaling parameters for lines so that calls to __ can be
 in user units.  The parameters are as follows and are derived
 from calls to win3d & axiscale:

   loff & boff are the pixel coords of the lower left corner of
     the drawing area is the axis origins.    
   lscale & bscale are the scaling factors.
   ladd & badd are offsets in user units for each axis so that 
     various data ranges can be accommodated (see axiscale). 
*/
linescale_(loff,ladd,lscale,boff,badd,bscale)
 float *ladd, *lscale, *badd, *bscale;
 long int *loff, *boff;

/* ************** VRTAXS *********************** */
/* 
 Construct and draw a vertical axis via WW where: YMN,YMX are the data 
 minimum & maximum values, offl & offb are the pixel coords of the     
 lower start of the axis.  SCA is the scaling factor and Yadd 
 is a data offset to adjust plotting for various data ranges. 
 Mode = 1 for time axis, Mode = 0 for other data display types. 
 Side = 0 labels and tic on left, Side = 1 labels and tic on right.
 msg is the axis label and mlen is it's length (passed from f77).
*/

vrtaxis_(ymn,ymx,offl,offb,offt,yadd,sca,mode,side,msg,mlen)

 float *ymn, *ymx,  *yadd, *sca;
 long int  *offl,*offb, *offt, *mode, *side, *mlen;
 char  *msg;

/* ************** HORAXS *********************** */
/* 
 Construct and draw a horizontal axis via WW where: XMN,XMX are the data
 minimum & maximum values, offL & offB are the pixel coords of the
 left start of the axis.  SCA is the scaling factor and Xadd is a data
 offset to adjust plotting for various data ranges.
*/

horaxis_(xmn,xmx,offl,offr,offb,xadd,sca,mode,msg,mlen)

 float *xmn, *xmx, *sca, *xadd;
 int   *offl,*offr,*offb, *mode, *mlen;
 char  *msg;


/* ******** DINTERVAL ******************** */
/* 
 DINTERVAL finds interval DV on an AXIS(V1,V2) and a suitable number of
 decimal places for the axis values. When 'mode'=0, factors of 10 are
 removed and the interval IS 0.2 for scale length 1-2
                 0.5                  2-5
                 1.0                  5-10

 When 'mode'=1 the hour interval on the graphical time (x-axis) is
 set as follow: 
 v=v2-v1     for v < 12 dv=1 
                 v < 18 dv=2 
                 v < 24 dv=3 
                 v < 48 dv=6 
                 v < 96 dv=12   else dv=24. 
*/
dinterval_(v1,v2,dv,ndec,mode)
 float *v1, *v2, *dv;
 long int *ndec, *mode;

/* ************ Generate a tic label *************** */
/*
 Generate a tic label where n is the number of decimal places,
 val is the value to be converted, Wticc is the number of pixels
 required to center the text (horizontally), sstr is the string
 returned and lenstr is its length (passed from f77).
*/
labelstr_(n,val,WticC,sstr,lenstr)
 long int *n, *WticC, *lenstr;
 float *val;
 char sstr[10];

/* --------------- esru menu ---------*/
void
evwmenu_ (
	titleptr,	     /* title for menu                   */
	items,		     /* ff7 array of items strings       */
	nitmsptr,            /* number of menu items             */
	impx,impy,	     /* menu position (upper right)      */
        iwth,                /* menu character width to print    */
        irpx,irpy,	     /* selected x and y mouse position  */
	ino,		     /* selected item number: if ino<0 dont show menu */	
	len_title, len_items /* lengths of strings (from f77 compiler) */
	)

char		*titleptr, *items;
long int	*nitmsptr;
long int	*impx,*impy,*iwth,*irpx,*irpy;
long int	*ino;
long int	len_title;
long int	len_items;


/*
***************************  emenu_display   *****************************
*/
#define DELTA	8	/* num pixels to move in x or y to step on in menu */
#define ITEMBOX(b,i)	boxbuild(b.b_left,b.b_top+(i)*lineheight,\
	b.b_right,b.b_top+((i)+1)*lineheight-1)
#define OFFEND		(-1)	/* no menu item selected */


PUBLIC int
emenu_display (title, list, xpos, ypos, iw, irpx, irpy, printflags )

char		*title;
char 		*list[];
long int	*xpos, *ypos;
long int        *iw;
int		*irpx,*irpy,printflags;

/* ****************** auxiliary menu   
  Used to test for mouse click in other portions of the screen.
*/
aux_menu()

/* ********** refresh display *************** */
refreshenv_()

/* ******  Place tutorial button on screen ********** */
opentutorial_(fnt)
  long int *fnt;     /* font number and length of file string */

/* ******  Place setup button on screen ********** */
opensetup_(fnt)
  long int *fnt;

/* ************ execute a program ********** */
/*
 match is a string denoting which program to execute,
 forbk is a string FG for foreground, BG for background.
*/
void
runexec_(match,forbk,len_m,len_fb)

char		*match,*forbk;
long int	*len_m,*len_fb;

.ES
.MT
.bp
.SH
/usr/esru/esp/src/esrucom/egeometry.f
.PP
This is a collection of ESP compatible geometry and site obstruction
file reading, reporting and creation 
facilities implemented as Fortran Subroutines.  Each allows 
for comments to be included in the ASCII files either as 
whole lines or at the end of a line.  No limit is imposed on the number
and placement of whole comment lines, however data lines longer than
124 characters will be truncated.  In most cases only the 
name of the file to be read is passed along with its unit number.  
The subroutine checks for its existence, opens it, reads the data 
and closes it before returning. 
.PP 
Standard within all of the file reading facilities is an English language 
and/or tabular report on the data read in.  This is available at three
levels; none, minimal and verbose.  In most cases, the terse number 
combinations found in the file are decoded into an English equivalent.
.PP
Generally data is placed in common blocks after it has been read and
processed.  For example, it does not matter which type of geometry file
format is encountered in the file, the common block data is that of a 
GEN format, fully transformed into site coordinates. Most of the
reporting facilities are based on common block data so that an
application can provide reporting facilities at any point, rather
than just during file reading.
.PP
Each of the file creation facilities takes information from common blocks
and generates an annotated file.
.PP
The file /usr/esru/esp-r/src/esrucom/egeometry.f contains the 
following Subroutines:
.mT
.TS
l l.
EGOMIN	T{
Reads zone geometry data as ASCII strings, with or without
range checking and printed summary
T}
EMKGEO	T{
Write a plain or annotated geometry file (GEN type) based on  
common blocks G0 G1 G2 G3 G4 G5
T}
ERECC	Converts REC into a GEN description
EREGC	Converts REG into a GEN description
ECROT	Rotate a zone by ANG degrees
SURINFO	Display surface details and attributes in a tabular format.
ZINFO	T{
Takes zone geometry data and returns descriptive information
T}
INSINFO	English description of default insolation options.
DWDINFO	Prints a table about the location and size of windows & doors.
VERINFO	Prints vertex/surface list summaries.
.TE
.MT
.PP 
The interface to each of the routines is listed below:
.ML
 
C ******************** EGOMIN 
C EGOMIN reads zone geometry data from a user-constructed data
C file. There are three levels of geometry data input corresponding
C to RECtangular (REC), REGular (REG) and GENeral (GEN) shaped zones.
C Data is placed in common blocks G0 G1 G2 G3 G4 G5.
      SUBROUTINE EGOMIN(IUNIT,LGEOM,ICOMP,IR,ITRC,ITRU,IER)
      CHARACTER LGEOM*72

C ************* EMKGEO 
C Generic routine to write a geometry file (GEN type) based on infor-
C mation currently held in common blocks G0 G1 G2 G3 G4 G5.  It is 
C assumed that this information has been checked.
C GENFIL is the name of the file to be written to (any existing file
C by this name is overwritten).  
C ICOMP is the zone number, ATR=true attribute file ATR=false plain file.
C IR=1 range checking IR=0 no range checking, ITRC unit number for
C user output, IER=0 OK IER=1 problem.
      SUBROUTINE  EMKGEO(IFILG,GENFIL,ICOMP,ITRU,IER)
      CHARACTER*72 GENFIL

C ******************** ERECC
C ERECC converts a REC (rectilinear) description into a GEN description.
C The X,Y, & Z coordinates of the 'Bottom left-hand' corner (when viewed
C from the south), the length (from the BL-HC towards the east), width,
C height of the enclosure and angle of rotation between the length side
C and due east (anticlockwise positive) are passed from the calling code
C (typically EGOMIN) and the GEN description returned via common block G1.
      SUBROUTINE ERECC(XO,YO,ZO,DX,DY,DZ,A)

C ******************** EREGC
C EREGC converts a REG (extruded) geometry description into a Gen form.
C The number of vertical walls, X & Y coords of the bottom corner of 
C each wall in an anticlockwise direction (defining a polygon in a plan
C view) as well as the floor & ceiling heights are passed to EREGC and
C the GEN description returned via common G1.
      SUBROUTINE EREGC(NW,Z1,Z2,XX,YY)
      DIMENSION XX(MS),YY(MS)

C ******************** ECROT
C Rotate a zone by ANG degrees and return information via common G1.
      SUBROUTINE ECROT(ANG)

C ******************** ESCROT 
C Rotate a zone by ANG degrees and return information via common G1.
C X1,Y1 is the point to rotate about.

      SUBROUTINE ESCROT(ANG,X1,Y1)

C ************* SURINFO
C Display Surface details and attributes in a tabular format. Make use 
C of information currently in Common blocks G1 G5.
      SUBROUTINE SURINFO(ICOMP,ITRU)

C ********************** ZINFO
C 'ZINFO' takes data from the zone geometry commons G1,G2,G3 and returns
C the following parameters:
C SNA   - opaque surface area of each multilayered construction
C ZOA   - total opaque surface area bounding zone
C ZGA   - total glazing surface area
C ZDA   - total door surface area
C GSA   - gross surface area of each zone bounding surface.
C GWA   - total window area associated with surface.
C PAZI  - plane azimuth angle
C PELV  - plane elevation angle
C VOL   - zone bounded volume
      SUBROUTINE ZINFO(IOUT,SNA,ZOA,ZGA,ZDA,GSA,GWA,PAZI,PELV,VOL)
      DIMENSION SNA(MS),GSA(MS),GWA(MS),PAZI(MS),PELV(MS)

C ********************** FILSUR
C 'FILSUR' Fills the common block G5 with default assumptions.
C If ISUR=0 do all surfaces otherwise if ISUR>0 for one surface.
      SUBROUTINE FILSUR(itru,ICOMP,ISUR)

C ******************** INSINFO 
C INSINFO provides an English description of default insolation 
C options chosen by the user in the geometry file based on 
C NDP(ICOMP) and IDPN(ICOMP,?) from common G4.
      SUBROUTINE INSINFO(ICOMP,ITRU)

C ********************* DWDINFO 
C DWDINFO prints a descriptive table about the location, size and
C optical properties of all default windows and doors in a zone. 
      SUBROUTINE DWDINFO(ITRU)

C ********************** VERINFO 
C VERINFO prints two summaries, the first includes vertex coordinates
C and a list of surfaces associated with each vertex.  The second
C prints a list of surface numbers and the list of vertices which 
C define them.  Information is gathered from common block G1. 
      SUBROUTINE VERINFO(ITRU)

.ES
.MT
.SH
/usr/esru/esp/src/esrucom/econstr.f
.PP
The file /usr/esru/esp/src/esrucom/econstr.f contains the following Subroutines:
.mT
.TS
l l.
ECONST	Reads zone construction file with or without comments.  
EMKCON	Creates a zone construction file based on blocks T1 T2 T3 T3ADD T4.
CONINF	T{
Provides a description of the constructions in a zone based
on common blocks.
T}
ERTWIN	T{
Reads all transparent wall properties and blind/shutter
operational details from an annotated ascii file.
T}
.TE
.MT
.PP 
The interface to each of the routines is listed below:
.ML

C ******************** ECONST 
C ECONST reads zone thermophysical data from a user-constructed data
C file as ASCII strings and with or without comments.  LCONS is the
C name of the file, ICOMP is the zone number, IR=1 range checking
C on, IR=0 no range checking, ITRC trace level, ITRU output unit,
C IER error reading file.  Geometry data is taken from the current
C contents of common blocks G0 G1 G2 G3 G4 G5.
      SUBROUTINE ECONST(LCONS,IUNIT,ICOMP,IR,ITRC,ITRU,IER)
      CHARACTER LCONS*72

C ************* EMKCON 
C Generic routine to write a construction file based on information cur-
C rently held in common blocks T1 T2 T3 T3ADD T4.
C CONFIL is the name of the file to be written to (any existing file
C by this name is overwritten).  ZNAME is the zone name (15 char), ICOMP
C is the zone number.
C ITRU unit number for user output, IER=0 OK, IER=1 problem.
      SUBROUTINE EMKCON(CONFIL,IFILT,ICOMP,ITRU,IER)
      CHARACTER*72 CONFIL

C ****************** CONINF 
C CONINF provides a description of the constructions in a zone based
C on common blocks. If isur=0 then all, otherwise for one surface. 
      SUBROUTINE CONINF(ICOMP,ISUR,ITRU)

c ******************** ERTWIN 
c ERTWIN reads all transparent wall properties and blind/shutter
c operational details from an annotated ascii file.
      SUBROUTINE ERTWIN(ITRC,ITRU,IUA,LUA,ICOMP,IER)
      CHARACTER LUA*72

.ES
.MT
.SH
/usr/esru/esp/src/esrucom/edatabase.f
.PP
The file /usr/esru/esp/src/esrucom/edatabase.f contains the following:
.mT
.TS
l l.
ERMLDB	Read an ASCII or binary mlc db and return data via block MLC.
ETMLDB	Provides reporting on current description of a composite.
EPKMLC	Select a composite construction with display of details.
ERPCDB	Reads one element from a binary primitive construction db.
EMKAMLD	Creates an ascii composite constr db based on common MLC.
EROPTDB	Returns optical properties for def window and TMC.
EDWINO	Allow user to select a glazing type by name.
.TE
.MT
.PP 
The interface to each of the routines is listed below:
.ML

C ************* ERMLDB
C Given file name and unit number, read  an ASCII composite 
C construction database and return data via common block MLC.
C IFMUL is the database unit, ITRU unit number for user output,
C IER=0 OK, IER=1 problem. 
C DRAIR is the default air gap resistance for 3 orientations.

      SUBROUTINE ERMLDB(ITRC,ITRU,IER)

C *************** ETMLDB
C ETMLDB provides reporting on current description of a composite
C construction based on contents of common MLC.
      SUBROUTINE ETMLDB(ITRC,ITRU,IFCON,IFOC)

C ************* EPKMLC 
C EPKMLC Select a composite construction with display of details.
C Information is available via common block MLC.
C ITRU unit number  for user output, IER=0 OK, IER=1 problem.
      SUBROUTINE EPKMLC(ITRU,IER,ISEL)

C *************** ERPCDB
C ERPCDB reads one element from a binary primitive construction db.
C returning them via parameter list.
C IFCON is the unit number of the database,  IEL the requested 
C element, ITRU unit number for user output, IER=0 OK, IER=1 problem.
C ITRC is the trace level.  It is assumed that the database has been
C previously opened and other parts of the code will close it when
C appropriate.  E is the element emissivity, A is the solar absorb, DRV
C is the diffusion resistance, TITL is the classification title, PNAM is
C the primitive element name.
      SUBROUTINE ERPCDB(IFCON,IEL,ITRU,IER,DBCON,DBDEN,DBSHT,E,A,
     &                  DRV,TITL,PNAM)
      CHARACTER PNAM*72,TITL*72

C *************** EMKAMLD 
C EMKAMLD: Creates an ascii composite construction database based on the
C current contents of common MLC.  In the case of an air layer sub-
C stitute the U value for each layer.
      SUBROUTINE EMKAMLD(ITRU,IER)

C ******************* EROPTDB 
C EROPTDB reads the glazing optical database and searches for
C data on the named type SOPT returning info via COMMON/GOPT.
      SUBROUTINE EROPTDB(ITRC,ITRU,SOPT,GDESCR,IER)
      CHARACTER SOPT*12,GDESCR*36

C ************* EDWINO 
C EDWINO Allow user to select a glazing type by name for inclusion
C in the geometry file attributes. SOPT is a 12 Char identity string
C for the optical properties choice. Displays choices held in common
C GPICK which was derived from a call to ___.
      SUBROUTINE EDWINO(ITRU,SOPT,IER)
      CHARACTER SOPT*12

.ES
.MT 
.PP 
Standard within all of the file reading facilities is an English language 
and/or tabular report on the data read in.  This is available at three
levels; none, minimal and verbose.  In many cases, the terse number 
combinations found in the file are decoded into an English equivalent.
.sp 1
.SH
/usr/esru/esp/src/esrucom/esystem.f
.PP
The file /usr/esru/esp/src/esrucom/esystem.f contains the following Subroutines:
.mT
.TS
l l.
ERSYS	Reads a commented system configuration file.
SITEINFO	English description of the site information.
CONXINFO	English description of the inter-connection common blocks.
.TE
.MT 
.PP
The interface to each of the routines is listed below:
.ML

C ******************** ERSYS 
C ERSYS reads a system configuration file which defines the building
C and/or plant definition for simulation with or without comments
C and with several levels of verbosity in reporting.  
C If MODE='NONE' ERSYS fills the common block with file names only. 
C IF MODE='ALL ' then all geom files scanned.
C EN is a character flag: "E" "e" English parsing of connections.
C                         "N" "n" number reporting of connections.
      SUBROUTINE ERSYS(LFCFG,IFCFG,IAPROB,IR,MODE,EN,ITRC,ITRU,IER)
      CHARACTER MODE*4,EN*1


C *************** SITEINFO 
C SITEINFO provides an English description of the site information in
C common blocks C4, C5, C5R, PREC8 which are filled by reading the
C system configuration file.
      SUBROUTINE SITEINFO(ITRU)

C **************** CONXINFO 
C CONXINFO returns an English description in CXSTR of the inter-connection 
C information in common blocks  which are filled by reading the
C system configuration file. If ICF=-1 the string is composed of numbers
C within a table, if ICF=1 then display with zone and surface names 
C if possible. If ICON=0 then generate a text heading.
      SUBROUTINE CONXINFO(ICF,ICON,CXSTR)
      CHARACTER CXSTR*78

.ES
.MT 
.SH
/usr/esru/esp/src/esrucom/emfnetw.F
.PP
The file /usr/esru/esp/src/esrucom/emfnetw.F contains the following:
.mT
.TS
l l.
EMFREAD	Reads a mass flow network description file.
MFCKCN	Check validity of control supplementary data.
MFERR	Error trap routine.
MFLIST	List mass flow network description file.
MFLNAME	Display list of current components or nodes.
ASKNOD	Presents a selection list of mass flow nodes.
ASKCMP	Presents a selection list of mass flow components.
ASKCON	Presents a selection list of mass flow connections. 
.TE
.MT 
.PP
The interface to each of the routines is listed below:
.ML

C ************************* EMFREAD 
C EMFREAD reads a mass flow network description file.
C Reads allow comments and most input data checks are performed.
C It assumes that the file is already open.
      SUBROUTINE EMFREAD(IFPRB,ITRC,ITRU,IER)

C *******************MFCKCN
C MFCKCN - Check the validity of control supplementary data for 
C          subroutines: MF010C,MF015C,MF017C,MF020C,MF025C,MF030C,
C                       MF040C,MF050C,MF110C,MF120C,MF130C,MF210C.
C     IDTP   - control period day type
C     TSTART - control period start hour
C     TSTOP  - control period finish hour
C     IOUT   - open(1) shut(0) outside period
C     ISTP   - index for the sensed property
C     ISPN   - number of connection level supplementary data items
      SUBROUTINE MFCKCN(IDTP,TSTART,TSTOP,IOUT,ISTP,ISPN,ICMP)

C ****************** MFERR 
C MFERR Error trap routine.
      SUBROUTINE MFERR(ICMP,MSG,IER)
      character*(*) MSG

C ************************* MFLIST 
C MFLIST Fluid flow problem file: list common block contents.
      SUBROUTINE MFLIST

C ******************** MFLNAME
C MFLCOMP: Display list of current components or nodes.
      SUBROUTINE MFLNAME(itru,WHICH,ier)
      character WHICH*1

C ********************** ASKNOD
C ASKNOD presents a list of mass flow nodes returning the index IS.
C If MOD = 'M' then include option to add an item then the appropriate
C          interaction is begun.
      SUBROUTINE ASKNOD(ITRU,head,MOD,IS,IER)
      character*(*) head
      CHARACTER MOD*1

C ********************** ASKCMP
C ASKCMP presents a list of mass flow components returning the index IS.
C If MOD = 'M' then include option to add an item then the appropriate
C interaction is begun.
      SUBROUTINE ASKCMP(ITRU,head,MOD,IS,IER)
      character*(*) head
      CHARACTER MOD*1

C ********************** ASKCON
C ASKCON presents a list of mass flow connections returning the 
C Starting and ending node numbers.
C If MOD = 'M' then include option to add an item then the appropriate
C          interaction is begun.
      SUBROUTINE ASKCON(ITRU,head,MOD,INODPS,INODNE,IC,IER)
      character*(*) head
      CHARACTER MOD*1

.ES
.MT 
.SH
/usr/esru/esp/src/esrucom/econtrol.f
.PP
The file /usr/esru/esp/src/esrucom/econtrol.f contains the following:
.mT
.TS
l l.
EZCTLR	Reads the configuration control strategy file.
EZCTLI	Zeroises all control data in common BCTL and CCTL.
EVCNTRL	T{
Decodes & returns string describing a control file sensors,
actuators, control types, control laws.
T}
EZCTLC	Checks all building control functions and plant for validity.
.TE
.MT
.PP
The interface to each of the routines is listed below:
.ML

C ******************** EZCTLR ********************
C EZCTLR: reads the configuration control strategy file.
      SUBROUTINE EZCTLR(IUNIT,IR,ITRC,ITRU,IER)

c ******************** EZCTLI ********************
c EZCTLI: Zeroises all control data in common BCTL and CCTL.
      SUBROUTINE EZCTLI

c ******************** EVCNTRL 
c EVCNTRL: Decodes and returns a string (72 char)describing a config
C control file sensors, actuator, control types, control laws.
      SUBROUTINE EVCNTRL(II,JJ,KK,WHICH,SSTR)
      CHARACTER WHICH*1

C ******************** ezctlc 
C Ezctlc checks all building control functions and plant
C control loops for legality.
      subroutine ezctlc(itrc,itru,ier)

.ES
.MT
.SH
/usr/esru/esp/src/esrucom/esru_misc.f
.PP
This is a collection of facilities which support the reading and
creation of ESP compatible files implemented as Fortran Subroutines.  

.PP
Esru_misc.f contains the following Subroutines:
.mT
.TS
l l.
ERUTIL	Reads a commented zone utility file.
ECRUTL	Read in a utility file or create a fresh common block.
EMKUTIL	Creates a zone utility file.
EGOMST	Reads site obstruction data.
MKGOMST	Creates an site obstruction file based on common GS5.
ERMRT	Read the viewfactor/ MRT sensor definition file.
EMKMRT	Write viewfactor/MRT sensor definition file.
ERBLDF	Read a default window blind shutter control file.
EMKBLDF	Write default window blind control common block data.
_
ETILE	Writes transformed doors & windows to viewer file.
EMKVIEW	Constructs a 'viewer' format file.
EPLNEQN	Finds equation of plane containing a polygon in PNTLST format. 
ETRANSW	Transforms default Windows or doors into global co-ordinates.
ESZONE	Saves the current contents of common blocks G1 G2 G3 G4 G5.
ERZONE	Recovers the saved contents of common blocks G1 G2 G3 G4 G5.
EASKGEOF	Presents a list of zones (by name).
EASKSUR	Presents a list of surfaces in a zone IZONE.
SURADJ	Returns information about connection for a particular surf.
.TE 
.MT
.PP
The interface to each of the routines is listed below:
.ML


C ***************** ERUTIL 
C ERUTIL Reads a zone utility file and fills the common blocks INDICS
C and UDESC. ITRU unit number for user output, IER=0 OK. 
      SUBROUTINE ERUTIL(ITRC,ITRU,IFIL,LFIL,IZ,IER)
      CHARACTER LFIL*72

C ************* ECRUTL 
C ECRUTL Read in a utility file or create a fresh common block.
C ITRU unit number for user output, IER=0 OK. 
      SUBROUTINE ECRUTL(ITRC,ITRU,IUF,ICOMP,IER)

C **************** EMKUTIL 
C MKUTIL Creates a zone utility file based on the common blocks __.
C ITRU unit number for user output, IER=0 OK. 
      SUBROUTINE EMKUTIL(ITRU,IFIL,LFIL,IZ,IER)
      CHARACTER LFIL*72

C ************** EGOMST 
C EGOMST:  Reads site obstruction data as ASCII strings, with or without
C range checking and printed summary. An obstruction block name (up to
C 12 characters) may be included as an option and is returned via BLKNAME. 
      SUBROUTINE EGOMST(IUNIT,LOBS,IR,ITRC,ITRU,IER)
      CHARACTER LOBS*72

C ************** MKGOMST 
C MKGOMST: Creates an annotated site obstruction file based 
C on passed parameters and the contents of common GS5.
      SUBROUTINE MKGOMST(IAF,ZOBS,ITRU,ICOMP,IER)
      CHARACTER*72 ZOBS


C ************* ERMRT 
C ERMRT Read the MRT sensor definition file. IC is the zone index
C (for use in mrt).  IER=0 OK, IER=1 problem.
      SUBROUTINE ERMRT(ITRC,ITRU,IUF,LMRT,IC,IER)
#include "building.h"
      CHARACTER LMRT*72

C ************* EMKMRT
C EMKMRT Write viewfactor/MRT sensor definition file based on 
C information currently held in common blocks MRTC, MRTF.
C LMRT is the name of the file to be written to (any existing file
C by this name is overwritten). ICOMP is the zone number.  
C ITRU unit number for user output, IER=0 OK, IER=1 problem.
      SUBROUTINE EMKMRT(ITRU,LMRT,LGEOM,NZS,IUF,ICOMP,IER)
      CHARACTER LMRT*72,LGEOM*72

C ************* ERBLDF
C Open and read blind shutter control data file.
c Common block variables are:
      SUBROUTINE ERBLDF(ITRC,ITRU,IUF,LBLIN,ICOMP,IER)
      CHARACTER LBLIN*72

C **************** EMKBLDF
C Write out blind control common block data.
      SUBROUTINE EMKBLDF(ITRU,IUF,LBLIN,ICOMP,IER)
      character LBLIN*72

C ****************** ETILE 
C ETILE transforms default doors and windows to world coordinates
C and outputs to the viewer format file on unit IUO.
      SUBROUTINE ETILE(ITRC,ITRU,IUO,IER)

C ******************* EMKVIEW 
C EMKVIEW constructs a 'viewer' format file. The trace level defines 
C whether information about the zones is displayed or not.  Open the 
C viewer file (LFIL), open it on unit IUO, (query user if existing
C before overwriting it).
      SUBROUTINE EMKVIEW(ITRC,ITRU,LFIL,IUO,CFGOK,IER)
      LOGICAL  CFGOK
      CHARACTER*72 LFIL

C ******************** EPLNEQN *****************************************
C EPLNEQN finds the equation EQN to a plane containing a polygon which
C is defined as a set of X Y Z vertices tracing in order the edges of 
C the polygon (this information is contained in PNTLST).  The plane is
C the best fit from PNTLST and its equation is in the form:
C       A*X + B*Y + C*Z = D
C where the vector (A<B<C) is the unit normal vector to the plane.
C This normal will be in the direction given by the right hand rotation
C rule MORS is the handedness of the axes defining the polygon
C vertices.  For solid bodies whose faces have been described anti-
C clockwise when viewed from the outside the unit normals within this
C routine will point outwards from the body.
      SUBROUTINE EPLNEQN(ITRC,ITRU,MORS,ISTA,PNTLST,CG,EQN,IERR)
      DIMENSION PNTLST(100),CG(3),EQN(4)

C ********************* ETRANSW 
C ETRANSW transforms default windows or doors into global co-ordinates.
C OFFSET is the offset from the polygon (0.02 typically).
C N is the number of surface vertices, X,Y,Z are the surface vertex arrays,
C DX,DZ are the window offsets, DDX,DDZ are the window width & height,
C XXW,YYW,ZZW are the transformed window coords in surface coord system.
      SUBROUTINE ETRANSW(ITRC,ITRU,N,X,Y,Z,OFFSET,DX,DZ,DDX,DDZ,
     &                   XXW,YYW,ZZW)
      DIMENSION  X(MV),Y(MV),Z(MV),XXW(4),YYW(4),ZZW(4)

C ***************** ESCZONE 
C ESZONE makes a copy of the current contents of common blocks G1 G2 G3
C G4 G5 into SG1 SG2 SG3 SG4 SG5.
      SUBROUTINE ESCZONE(ICOMP)

C **************** ERCZONE 
C ERZONE recovers the saved contents of common blocks G1 G2 G3
C G4 G5 from SG1 SG2 SG3 SG4 SG5.
      SUBROUTINE ERCZONE(ICOMP)

C **************** EASKGEOF 
C EASKGEOF asks for the zone number and geometry file name. If the
C configuration file has been read present a list of zone names,
C otherwise ask for a specific zone number and file name.
C If MOD = m or M then allowing a new zone to be created or one
C to be deleted (passed back as a negative zone number).
C It is assumed that the user will make one selection only.
      SUBROUTINE EASKGEOF(ITRU,CFGOK,IZONE,MOD,IER)
      LOGICAL CFGOK
      CHARACTER MOD*1

C ******************* EASKSUR 
C EASKSUR presents a list of surfaces in a zone IZONE returning the
C index IS. It assumes that a geometry file has been read in.
      SUBROUTINE EASKSUR(ITRU,IZONE,IS,MOD,IER)
      CHARACTER MOD*1

C ******************** SURADJ 
C SURADJ is a updated version of MOFADJ which returns information about
C connections between surfaces.  Given IZONE & ISFN (the zone and
C surface under consideration) it returns the following information:
C IE identifies the zone coupling index

C IE=0 : external and both TMP=0.0/ISC=0
C IE=1 : internal to identical environment, both TMP=0.0/ISC=0
C IE=2 : internal to environment with temperature TMP.
C IE=3 : internal where IZC,ISC defines other zone & surface.
C IE=4 : ground connection, both TMP=0.0/ISC=0
C IE=5 : adiabatic, both TMP=0.0/ISC=0
C DESCR: descriptive string 25 characters wide
C IC   : connection number.

      SUBROUTINE SURADJ(IZONE,ISFN,IE,TMP,IZC,ISC,IC,DESCR)
      CHARACTER*25 DESCR

.ES
.MT
.SH
/usr/esru/esp/src/esrucom/e3dviews.f
.PP
The file e3dviews.f is a collection of support facilities for 
producing 3d images of configurations, implemented as Fortran 
Functions and Subroutines and also making use of C code in wwlib.c.
LENS, MATPOL, CLIPFL, PLNBX, CUTPOL have been revised from code
initially supplied by Mike Grant.
The file /usr/esru/esp/src/esrucom/e3dviews.f contains the following:
.mT
.TS
l l.
LENS	Initialise viewing parameters
MATPOL	Transforms polygon described in 3dv format.
CLIPFL	T{
Takes a polygon description and returns clipping flags based
on viewing frustrum.
T}
PLNBX	Checks a polygon against a clipping plane.
CUTPOL	Cuts a polygon within a viewing frustrum.
VERTLBL	T{
Displays a vertex label based on the coords passed and the
vertex number.
T}
ORIGESP	Returns a surface/body indicating the site origin.
SITE2D	T{
Returns the 2D viewing coords of the current site extremes
found in common block RAY5.
T}
BNDOBJ	Does range checking on objects to be displayed.
.TE
.MT 
.PP
The interface to each of the routines is listed below:
.ML

C--------- LENS --------------------------------------------------------
C     LENS - initialise viewing parameters
      SUBROUTINE LENS(ITRU,IER)

C----------------------------------------------------------
C MATPOL transforms polygon (defined by arrays AX,AY,AZ) 
C where:
C NA is the no of polygons on surface, NAP is the number of
C vertices on surface, IAPNT points to the first vertex of the
C polygon, IANTX is the index of the next point.  Structured
C so that a negative vertex number marks the beginning of a
C hole -
C into polygon B represented by NB,NBP,IBPNT,BX,BY,BZ... 
C
      SUBROUTINE  MATPOL(NA,NAP,IAPNT,AX,AY,AZ,IANXT,TMAT,IFREV,
     &                   SBBOX,NB,NBP,IBPNT,BX,BY,BZ,IBNXT,IERR)
	parameter( MIP = 10, MPL = 200)
      DIMENSION  IAPNT(MIP), AX(MPL),AY(MPL),AZ(MPL),IANXT(MPL)
      DIMENSION  IBPNT(MIP), BX(MPL),BY(MPL),BZ(MPL),IBNXT(MPL)
      DIMENSION  SBBOX(3,2),TMAT(4,4)

C-----------CLIPFL -----------------------------------------------------
C CLIPFL takes a polygon description and returns clipping flags based
C on viewing frustrum where ISTAT:
C     ISTAT =  0 ALL OF THE POLYGON IS WITHIN THE VIEW FRUSTRUM
C     ISTAT =  1 ALL THE POLYGON IS OUTSIDE THE VIEW FRUSTRUM
C     ISTAT = -1 THE POLYGON STRADDLES THE VIEW FRUSTRUM

      SUBROUTINE CLIPFL(NAP,AX,AY,AZ,ISTAT)
      DIMENSION  AX(MPL),AY(MPL),AZ(MPL)

C-------- PLNBX --------------------------------------------------------
      SUBROUTINE  PLNBX(NA,AX,AY,AZ,EQN,IFBOX)
      INCLUDE '/usr/esru/include/prj3dv.h'
      DIMENSION  AX(MPL),AY(MPL),AZ(MPL),EQN(4)

C------- CUTPOL ------------------------------------------------------
C CUTPOL: cuts a polygon within a viewing frustrum.
      SUBROUTINE  CUTPOL(NA,NAP,IAPNT,AX,AY,AZ,IANXT,ISTAT)
      INCLUDE '/usr/esru/include/prj3dv.h'
      DIMENSION  IAPNT(MIP),AX(MPL),AY(MPL),AZ(MPL),IANXT(MPL)
      DIMENSION  EQNP(4),ADST(100)

C-----VERTLBL ----------------------------------------------------------
C VERTLBL writes out a vertex label based on the coordinates passed
C and the vertex number.
      SUBROUTINE VERTLBL(ix,iy,IP,ier)

C-----ORIGESP -----------------------------------------------------------
C ORIGESP returns a surface/body indicating the site origin. It is 1 
C metre in each direction.
      SUBROUTINE ORIGESP(ier)

C---- SITE2D -----------------------------------------------------------
C SITE2D Returns the 2D viewing coords of the current site extremes
C found in common block RAY5.
      SUBROUTINE SITE2D(SXMX,SXMN,SYMX,SYMN,ier)

C ***************** BNDOBJ 
C BNDOBJ: Does range checking on objects to be displayed.
      SUBROUTINE BNDOBJ(ITRC,ITRU,INPIC,IVALS,IFOC,IER)
      DIMENSION IVALS(MCOM)

C ********** INLNST
C INLNST: Initializes surface linestyle array line style.
      SUBROUTINE INLNST(ITYP)

.ES
.MT
.bp
.SH
Include files
.PP
The include files used by ESP-r are:

.ML
building.h      flows.h         plant.h         plylib.h        tdf.h
epara.h         gagge.h         plantdb.h       prj3dv.h        wwinfo.h
flow_ed.h       monitor.h       plantdf.h       tbridge.h

.ES
.MT
