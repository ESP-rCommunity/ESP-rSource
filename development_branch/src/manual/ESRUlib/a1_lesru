.de MT    \"macro to start text
.nr VS 12
.nr PS 10
.vs 12
.ps 10
..
.de mT    \"macro to start table text
.nr VS 10
.nr PS 8
.vs 10
.ps 8
..
.de ML    \"macro to start listing
.LD
.vs 7
.ps 6
.cs 1 24
.cs 3 24
..
.de ES    \"macro to end code listing
.DE
.cs 1
.cs 2
.cs 3
..
.EQ
delim $$
gsize 10
gfont R
.EN
.nr HM 0.5i
.ll 6.4i
.nr LL 6.4i
.MT
.ce
\fB\s+2Facilities available in ESRU libraries\fR\s0
.sp 0.5
.ce
\fB\s+2and common source directory\fR\s0
.sp 0.5
.sp 1
.ce
30 September 1991
.sp 1
.ce
by Jon Hand
.ce
Energy Simulation Research Unit
.ce
of the University of Strathclyde
.sp 2
.SH
Summary
.PP
Over the last six months a number of structural changes have been applied
to application software developed and supported within ESRU.  This report
is a reference to two of these, namely the development of a library of
interface facilities and the creation of a directory of standard code
for reading, reporting and creating files which are compatible with several
ESRU application.  The
code has been written by the staff of the Energy Simulation Research Unit,
modified from code within the Unit, or from the public domain.
This document is a guide to the use of the libraries and common code and
includes a summary, the interface to each of the procedures as well as
examples of their use.  The
following libraries have been produced:
.LP
libesru.a is the primary library for ESUR applications.  On Sun workstations 
it requires access to libww.a as well as 
suntools, sunwindows, and pixrect. libesru.a on a X terminal requires
the use of libXww.a and libX.a. It includes the following object files:
.IP "esrulib_low.o" 5
low level facilities for reading and writing strings, stripping
comments, date checking, solar angles, pshchrometrics and vector
math as well as ASCII and binary file access.
.IP "esrulib_ter.o" 5
terminal interaction, paging, graphic and text menus
.IP "wwlib.o" 5
c interface (callable from fortran code) to the ww toolkit of graphics
facilities and dialogue facilities.
.IP "esrumenu.o" 5
low level graphics code for graphic menu facilities within libesru.a
.LP
libesru.nb.a : which includes all of the facilities of libesru.a except
that no bit mapped graphic facilities are included and thus no
other graphic libraries are required.
.LP
In /usr/esru/esp/src/esrucom are a number of standard subroutines for ESP compatible
file reading, creation and reporting.  These were, at one point, within
the above libraries but have been moved into /usr/esru/esp/src/esrucom
so that the common blocks that they require, and which
they share with other ESRU applications will be less opaque to the user,
easier to maintain and more amenable to selective use.
.IP " esystem.o" 5
reading and reporting on system configuration files - requires the application
also make use of egeometry.o.
.IP " eleakage.o" 5
reading of leakage distribution files.
.IP " edatabase.o" 5
reading and creation of primitive and composit thermophysical databases and
climate files.
.IP " egeometry.o" 5
reading, reporting, creation, rotation, conversion of zone geometry files as
well as site obstructions.
.IP " econstr.o" 5
reading, reporting and creation of zone constrution files, as well as
reading multilayer construciton databases and primitive construction 
databases.
.IP " econtrol.o" 5
reading and reporting on system control files.
.IP " esru_misc.o" 5
math facilities.
.IP " e3dviews.o" 5
typical transforms, clipping, and labeling facilities for producing
3d views of geometry with attribution.
.sp 1
.SH
Changes since April notes
.PP
 The basic use of 
libesru.a or libesru.nb.a has not
changed, however, application Makefiles must now be altered to access
the common directory /usr/esru/esp/src/esrucom.  The intent of this
scheme is to have all applications with require the common facilities
to copy the source from esrucom so that it is accessible to the
user and part of the application.  Any updates to the common code can
then be accessed by the various applications via a recompilation (although
with some implementations of
\fBmake\fR it is necessary to run the command \fImake clean\fR to remove
the \fB*.o\fR and common code so that a fresh copy is taken from esrucom. 
.PP
A number of modifications and additions to the library code and
common directory are summarised in the table below. These include 
mid-level routines
for asking users for integer, real or character strings - each of which
allows, prompts, error messages and range checking information to be
passed as parameters.  In addition there are now routines which support
the use of multi-page menu's within an application.  This will allow
long lists (say may hundreds of items) to be displayed and 
edited in a consistent way.  
.PP
A new terminal type 8 has been added which provides prompts and user
input via a dialogue box and help via pop-up boxes for applications 
which make use of the mid-level calls above.
.PP
The previous library \fIesrulibw.a\fR has been removed and its functions
translated into "C" and placed in \fIwwlib.c\fR.  This removes the
requirement for the Fortran interface to the ww toolkit.
.PP
It is now possible for ESRU applications to omitt reference to the
older \fIlibwin_teklib.a, libwin_util.a and libwin_wslib.a\fR.  Indeed
the conversion of many applications is well underway.
.PP
The ESP compatible file facilities have been restructured and place
in /usr/esru/esp/src/esrucom.  In addition a number of mid-level conversion/\^range-
checking routines and mid-level routines geared to reading of commented 
ASCII text files have have been added. This has lead to
a more compact code with additional functionality.
.PP
All the file reading and creation facilities now include an
addition parameter representing the file unit number so that the
calling code can manage such unit numbers.
.PP
Following the trend within ESRU, the parameters for the libraries now are
in the file \fI/usr/esru/include/epara.h\fR rather than \fIEPARA.DEF\fR.  
A number of parameters
have been included with are required for the manipulation of multi-page
menus.  The file facilites also make use of /usr/esru/include/building.h
and /usr/esru/include/flows.h
for parameters.  Remember that a recompilation of the libraries and/\^or
common directory files is required if these *.h files change.
.sp 1
.mT
.TS
box center expand;
cb s
c c
l lw(5.1i).
Changes in esrulib_ter.f and esrulib_tnb.f
Routine	Change
_
.TH
EASKI	T{
NEW: Mid-level routine to query a user for an integer, includes range checking,
help and error reporting facilities.
T}
EASKR	T{
NEW: Mid-level routine to query a user for a real number, includes range checking,
help and error reporting facilities.
T}
EASKS	T{
NEW: Mid-level routine to query a user for a character string, includes passing
of alternative strings to choose from, multi-page menu selection,
help and error reporting facilities.
T}
EKPAGE	T{
NEW: Maps key characters, pages & array indexs in long display lists.
T}
KEYIND	T{
NEW: Decodes EMENU paged selection index and returns the array index of the item.
T}
EPMENSV	T{
NEW: saves the current state of a muti-page menu for later recovery.
T}
EPMENRC	T{
NEW: recovers the state of a muti-page menu from previous EPMENUSV.
T}
ELINC	T{
Revised: Changed from Function to Subroutine.
T}
SETLINC	T{
NEW: Allows the user to change the length of the text page.
T}
EHELPW	T{
NEW: Returns the width of the longest help text string. Necessary due
to Fortran-C string passing conventions.
T}
EHELPD	T{
NEW: Displays the current contents of common EHELP in text window or
a pop-up display.
T}
EDISP	T{
Display text in a scrolling window depending on the terminal type.
T}
.TE
.sp 1
.mT
.TS
box center expand;
cb s
c c
l lw(5.1i).
Changes in esrulib_low.f
Routine	Change
_
.TH
EFOPSEQ	T{
Open a sequential file with existance expectation flag. Allows an existing
file to be overwritten or allows user to supply a new file name.
T}
EGETWI	T{
NEW: Similar to EGETI with range checking and error messages.
T}
EGETWR	T{
NEW: Similar to EGETR with range checking and error messages.
T}
RELSTR	T{
NEW: Converts a real number into a string with no leading blanks.
T}
STRIPC	T{
Revised: Better error reporting and range checking now included.
T}
RFNAM, RFNAM2	T{
Moved from old library: check file titles.
T}
RPOPEN, RPFILE	T{
Moved from old library: opens a file for sequential read or write access.
T}
RPRAND	T{
Moved from old library: opens a random access file.
T}
ORTTRN	T{
New: Coordinate transform.
T}
VECTRN	T{
New: Coordinate transform for vector by homogeneious matrix.
T}
VECPLN	T{
New: Returns point of intersection between line and plane.
T}
HMATMUL	T{
New: Multiplies the homogenous (4x4) matrices A by B returning C.
T}
HREVMAT	T{
New: Returns inverse of perspective transform via CROUT.
T}
CROUT	T{
Revised: Inverts a nonsymetric square matrix.
T}
DPACC	T{
Revised: Provides double precision accumulation of inner products for CROUT.
T}
EYEMAT	T{
New: Coordinate transform eyepoint - viewpoint.
T}
AVER	T{
New: Returns the centre of gravity of a polygon vertex array.
T}
CROSS	T{
New: Performs a cross-product on vectors A() & B() returning in C().
T}
TAIRFE,TSATH0...	T{
Moived from old library: psychrometrics routines and functions.
T}
.TE
.sp 1
.mT
.TS
box center expand;
cb s
c c
l lw(5.1i).
Changes in wwlib.c
Routine	Change
_
.TH
winint	T{
Revised: now takes two parameters, term so that the window will be
appropriately sizes and msg so that the window banner can be defined
in the application. There are now 4 fonts initialised.
T}
wstxpt	T{
Revised: outputs a string beginning at pixel x and y.
T}
winbut	T{
Revised: puts a "MORE" button on the screen and 
returns the charcter or mouse button pressed
T}
wind3d	T{
New: opens a viewing box taking into account menu
width and dialogue box.
T}
viewtext	T{
New: displays a line of text within the viewing
box with size and location parameters.
T}
openaskbox	T{
New: creates a text input box within the dialogue
area positioned to match the msg's passed.
T}
askdialog	T{
New: controls input of strings in the dialogue area.
T}
msgbox	T{
New: places prompts in the dialogue box with the
same syntax used in USRMSG.
T}
okbox	T{
passed prompts it displays the choices yes no in boxes for the user
to respond to.
T}
eline	T{
New: draws or moves a line @ pixel location x y.
T}
edline	T{
New: draws a dotted line between two point at a specified density.
T}
ecirc	T{
New: draws an open or black filled circle at a given point and radius.
T}
egdisp	T{
New: displays a string within a scrolling window (associated with EDISP)
T}
opengdisp	T{
New: opens a scrolling text display area which acts as a text window
T}
eghelp	T{
New: opens and displays help text in a pop-up box.
T}
axiscale	T{
Revised: determines scaling parameters for horizontal
and vertical axis.
T}
vrtaxis	T{
Revised: draws a vertical axis (tic & labels on right
or left side).
T}
horaxis	T{
draws a horizontal axis with tic marks and labels.
T}
dinterval	T{
Revised: determins the tic interval for an axis as well
as the number of decimal places with modes for time
and other data types.
T}
labelstr	T{
Revised: generates an appropriate label for the value passed.
T}
.TE
.sp 1
.mT
.TS
box center expand;
cb s
c c
l lw(5.0i).
Changes in eleakage.f
Routine	Change
_
.TH
EMFREAD	T{
Moved from esystem.f: Reads a commented leakage distribution file.
T}
EMFCDAT	T{
Moved from esystem.f:Fills fluid flow comp description arrays 
(called before EMFREAD).
T}
.TE
.sp 1
.mT
.TS
box center expand;
cb s
c c
l lw(5.0i).
Changes in edatabases.f
Routine	Change
_
.TH
ERMLDB	T{
Moved from econstr.f: Read an ASCII or binary mlc db and return 
data via common block MLC.
T}
ERPCDB	T{
Moved from econstr.f: Reads one element from a binary primitives 
construction db.
T}
EDMLDB	T{
Moved from econstr.f: Display an ASCII or binary multi-layer construction db.
T}
EMKBMLD	T{
New: Creates a binary composite constr db based on common MLC.
T}
EMKAMLD	T{
New: Creates an ascii composite constr db based on common MLC.
T}
.TE
.sp 1
.mT
.TS
box center expand;
cb s
c c
l lw(5.0i).
Changes in egeometry.f
Routine	Change
_
.TH
EGOMIN	T{
Revised: added IUNIT for file unit number and make use of EGETWI &
EGETWR calls. Removed ZNAM parameter.
T}
EGOMST	T{
Revised: added IUNIT for file unit number.
T}
EMKGEO	T{
Revised: added IFILG for file unit number.
T}
.TE
.sp 1
.mT
.TS
box center expand;
cb s
c c
l lw(5.1i).
Changes in other common code
Routine	Change
_
.TH
ECONST	T{
Revised: make use of EGETWI & EGETWR calls.
T}
EZCTLR	T{
New: reads and reports on a system control file.
T}
EPLNEQN	T{
New: Finds equation of plane containing a polygon in PNTLST format.
T}
.TE
.sp 1
.mT
.TS
box center expand;
cb s
c c
l lw(5.0i).
Changes in e3dviews.f
Routine	Change
_
.TH
LENS	T{
New (used to be in separate file): Initialise viewing parameters.
T}
MATPOL	T{
New: Transforms polygon described in 3dv format.
T}
CLIPFL	T{
New: Takes a polygon description and returns clipping flags based
on viewing frustrum.
T}
PLNBX	T{
New: Checks a polygon against a clipping plane.
T}
CUTPOL	T{
New: Cuts a polygon within a viewing frustrum.
T}
VERTLBL	T{
New: Displays a vertex label based on the coords passed and the
vertex number.
T}
ORIGESP	T{
New: returns a surface/body indicating the site origin.
T}
SITE2D	T{
New: Returns the 2D viewing coords of the current site extremes
found in common block RAY5.
T}
BNDOBJ	T{
New: Does range checking on objects to be displayed.
T}
.TE
.MT
.bp
.SH
Details of source files
.PP
The following discussion looks into the details of each of the files
mentioned above, first providing a synopsis and then the interface
to each of the subroutines included.
.SH
esrulib_low
.PP
The files esrulib_low.f is a collection of low level support Fortran 
Functions and Subroutines.  None of the routines makes use of common blocks.
The latest version is 29 July 1991.  Esrulib_low.f contains the 
following input conversion functions/routines:
.mT
.TS
l l.
EGETI	Reads several integers from input channel.
EGETR	Reads several reals from input channel.
EGETW	Finds kth word in a string (' 'or','separated)
EGETS	Reads several strings from input channel.
EGETWI	Similar to EGETI with range checking & error messages.
EGETWR	Similar to EGETW with range checking & error messages.

INTCNV	Converts word (20 char) into integer.
INTSTR	Converts integer into a string (10 char) with no leading blanks.
RELSTR	Converts a real into a string (10 char) with no leading blanks.
RELCNV	Converts word (20 char) into real.
USRMSG	Generic message/warning/fatal error reporting facility.
STRIPC	Strips comments from a ASCII file string and returns the data.
CHITMS	Checks a character string & returns the number of data items.
NOYES	INTEGER FUNCTION to read the answer Y,y,1,N,n,0 to a question.
IFIRST	Returns the ASCII value for the first character in a string ISTR.
_
ERPFREE	Is used to close any file.
EFDELET	Delete file IUN and return ISTAT for compatibility.
EFOPSEQ	Opens a sequential file with existance expectation flag.
RPOPEN	Opens a file for sequential read or write access,
RPRAND	Opens a random access file.
RPFILE	T{
Equivalent to a special case of RPOPEN to open a file for input only.
T}
FPOPEN	Open a file when the title has been read by RFNAME.
FPRAND	Open a file for random access after RFNAME.
RFNAME	Read a file title and then FPOPEN and/or FPRAND.
RFNAM2	Used to check the file title only.
_
EDAY	Returns the year day number when passed the day of month & month.
STDATE	T{
Takes the day of year and returns two descriptive strings:
DESCR takes the form '12 Jan' & DESCR1 takes the form 'Fri 12 Jan'.
T}
ESTIME	T{
Takes an integer timestep and returns two string descriptions:
DESCRH in the form '12h28' & DESCRD which takes the form of 12.46.
T}
EDAYR	Returns the day and month numbers from the day-of-year.
EWEEKD	T{
Returns the day of the week given the day of month, month and year as integers.
T}
EDAYCH	Checks for errors in the users specification of the day & month. 
PROMPT	Does nothing, for compatibility only.
_
ESIND	Function returning SIN of angle where angle is given in degrees.
ECOSD	Function returning COS of angle where angle is given in degrees.
IFAX	Integer function returning the integer part of it's argument.
EAZALT	Computes the solar azimuth & altitude angles at current time.
EPAREA	Calculates the area for any closed polygon.
ORTTRN	ordinal transform of point by transform matrix.
VECTRN	T{
Transforms a vector VECIN by the 4x4 (homogeneious) matrix
TMAT and returns the vector VECOUT.
T}
VECPLN	T{
Returns the point of intersection X,Y,Z between a line
defined by X1,Y1,Z1 & X2,Y2,Z2 and a plane defined in PEQN.
T}
HMATMUL	Multiplies the homogenous (4x4) matrices A by B returning C.
HREVMAT	T{
Takes the homogenous perspective transformation PER and 
returns it's inverse REP making use of CROUT.
T} 
CROUT	T{
Inverts a nonsymetric square matrix A (order N), returning
the matrix B and IERR =-1 if matrix is singular.
T}
DPACC	T{
Provides double precision accumulation of inner products for
CROUT in the form SUM(+,-)SUM(+,-)AB.
T}
EYEMAT	Provides transform eyepoint - viewpoint....
AVER	Returns the centre of gravity of an polygon array.
CROSS	Performs a cross-product on vectors A() & B() returning in C().
_

TAIRFE	Returns air temperature from enthalpy & moisture content.
TSATH0	Determines the saturation temperature from enthalpy.
TDB	T{
Calculates dry bulb temperature from enthalpy and
moisture content. (Reversal of the ENTHP2).
T}
ENTHP1	Calculates enthalpy of moist air kJ/kg.
ENTHP2	Calculates enthalpy of moist air kJ/kg.
HUMRAT	Calculates humidity ratio kg/kg.
HUMRT1	Calculates humidity ratio kg/kg.
VAPRS2	Evaluates vapour pressure (mbar).
SATVP	Evaluates saturated vapour pressure (mbar).
TWB	Calculates the wet bulb temp from db and moisture content.
PCSAT1	Evaluates percentage saturation.
PCSAT2	Evaluates percentage saturation.
PCRH1	Evaluates relative humidity.
PCRH2	Evaluates relative humidity.
SPVOL1	Calculates specific volume m^3/kg dry air.
SPVOL2	Calculates specific volume m^3/kg dry air.
HUVOL1	Evaluates humid volume m^3/kg.
HUVOL2	Evaluates humid volume m^3/kg.
SPHTC1	Returns the specific heat capacity of air kJ/(kg K).
SPHTC2	Returns the specific heat capacity of air kJ/(kg K).
DEWPT	Returns dew point based on curve fit and iteration.
SHTH2O	Water specific heat capacity kJ/(kg K).
DENH2O	Water density kg/m^3.
.TE
.MT
.PP
The interface to each of the routines is listed below:
.ML

C ******************** EGETI ********************
C EGETI reads NVAR integers through channel INPCH and stores the results
C in the integer array IARR. If a severe error occurs it is reported on
C via channel IERCH and the parameter IER is set to 1.
C A line of input consists of words separated by blanks or commas:
C WORD,WORD,WORD or WORD WORD WORD or WORD, WORD, WORD  are all valid.
      SUBROUTINE EGETI(INPCH,IERCH,NVAR,IARR,IER)

C *** EGETR ***********************************************************
C EGETR reads NVAR reals through channel INPCH and stores the results
C in the real array RARR. If a severe error occurs it is reported on
C via channel IERCH and the parameter IER is set to 1.
C A line of input consists of words separated by blanks or commas:
C WORD,WORD,WORD or WORD WORD WORD or WORD, WORD, WORD  are all valid.
      SUBROUTINE EGETR(INPCH,IERCH,NVAR,RARR,IER)

C *** MFGETS ***********************************************************
C EGETS reads NVAR strings through channel INPCH and stores the results
C in the character array CARR. If a severe error occurs it is reported on
C via channel IERCH and the parameter IER is set to 1.
C A line of input consists of words separated by blanks or commas:
C WORD,WORD,WORD or WORD WORD WORD or WORD, WORD, WORD  are all valid
      SUBROUTINE MFGETS(INPCH,IERCH,NVAR,CARR,IER)

C *** EGETW ***********************************************************
C EGETW gets first WORD after position K from the STRING of characters.
C Words may be separated by blanks or commas: WORD,WORD,WORD or
C WORD WORD WORD or WORD, WORD, WORD. Modified after:
C AIRNET; G.N. Walton, US Nat. Institute of Standards and Technology
      SUBROUTINE EGETW(IOUT,STRING,K,WORD,IFLAG)

C *** EGETWI **********************************************************
C EGETWI gets first word after position K from the STRING of
C characters and converts it into an integer IV, tests it against
C the minimum MN and the maximum MX and provides a warning
C message if ACT="W", a failure message if ACT="F" and does
C no range checking if RACT="-". Words may be separated by blanks, 
C commas, or tab: WORD,WORD,WORD or WORD WORD WORD or WORD, WORD, WORD
C are all valid.
      SUBROUTINE EGETWI(IOUT,STRING,K,IV,MN,MX,ACT,MSG,IER)

C *** EGETWR **********************************************************
C EGETWR gets first word after position K from the STRING of
C characters and converts it into a real number RV, tests it against
C the minimum RMN and the maximum RMX and provides a warning
C message if RACT="W", a failure message if RACT="F" and does
C no range checking if RACT="-". Words may be separated by blanks, 
C commas, or tab: WORD,WORD,WORD or WORD WORD WORD or WORD, WORD, WORD
C are all valid.
      SUBROUTINE EGETWR(IOUT,STRING,K,RV,RMN,RMX,RACT,MSG,IER)

C *** INTCNV ***********************************************************
C INTCNV converts non-blank character string ANUM to an integer.
C The limiting values for short integers are +/- 32759;
C for long integers +/- 2147483649    Modified from: G.N. Walton, US NIST
      INTEGER FUNCTION INTCNV(IOUT,ANUM,IFLAG)

C *** INTSTR ***********************************************************
C INTSTR converts an integer into a string (10 char long) with no leading
C blanks. ISWD is the length of the resulting string.
      SUBROUTINE INTSTR(IOUT,INTIN,STR,ISWD,IFLAG)

C *** RELSTR ***********************************************************
C RELSTR converts a real into a string (10 char) with no leading
C blanks. ISWD is the actual length of the resulting string.
      SUBROUTINE RELSTR(IOUT,RELIN,STR,ISWD,IFLAG)

C *** RELCNV ***********************************************************
C RELCNV converts non-blank character string ANUM to real number
C Modified from: G.N. Walton, US NIST
      REAL FUNCTION RELCNV(IOUT,ANUM,IFLAG)


c ******************** STRIPC ********************
C STRIPC strips comments from a ASCII file string and returns the data.
C It assumes that if a string begins with a "#" then the whole line is 
C a comment an the next line is read.  If a " #" is discovered within
C a line the rest of the line is removed. 
C IER=0 if ok. MSG is a text string used in error messages. If
C IR=0 then acts silently, otherwise notes when EOF found.
       SUBROUTINE STRIPC(INPCH,IOUT,OUTSTR,ITEMS,IR,MSG,IER)

C *** CHITMS **********************************************************
C CHITMS checks a character string (A), returning the number of data
C items (IC) separated by ' ' or ','.
      SUBROUTINE CHITMS(A,IC)

C *** CHARCH **********************************************************
C CHARCH: Older routine to check a string for a number of data items.
C This is an older version of CHITMS, however it modifies the string A.
      SUBROUTINE CHARCH(A,ND,IERR)

c ******************** NOYES ********************
C NOYES is an INTEGER FUNCTION which is used to read the answer to a
C question.  A line is read from the user, and the value of the function
C is as follows:-
C   1 The answer was '1', ' Y', or '  YES'
C   0 The answer was '0', ' N', or '  NO'
C  -1 otherwise.
      FUNCTION NOYES(J)

c ******************** IFIRST ********************
C IFIRST: Returns the ASCII value for the first character in a string ISTR.
      FUNCTION IFIRST(ISTR)

c ******************** ERPFREE ********************
C ERPFREE is used to close any file.
      SUBROUTINE ERPFREE(IUN,ISTAT)

c ******************** EFDELET ******************************
C EFDELET: Delete file IUN and return ISTAT for compatibility.
      SUBROUTINE EFDELET(IUN,ISTAT)

c ******************** EFOPSEQ ******************************
C EFOPSEQ: Open a sequential ASCII file and return appropriate
C messages and error status.
C IUN is the file unit number, IIN is the user input channel,
C IOUT is the message channel, SFILE is the file name.
C EXIST is an integer flag denoting:
C   0 - should exist, no message but error -301 if not.
C   1 - should exist, message & error -301 if not.
C   2 - should not exist, error 300 & message if exists.
C   3 - if exists use otherwise create new.
C   4 - if exists ask user before overwriting otherwise create new.
C IER is the error status (0 is OK).
      SUBROUTINE EFOPSEQ(IUN,IIN,IOUT,SFILE,EXIST,IER)

C-------- RPOPEN -----------------------------------------------------------
C  RPOPEN  is used to open a file for sequential read or write access,
        SUBROUTINE RPOPEN(IUN,ISTAT,MMODE,IXIST)

C---------- RPRAND -------------------------------------------------------
C  RPRAND behaves like RPOPEN but opens the file for random access;   
C  LENG determines the record length and type as follows:-
C       <0      -( LENG ) characters per record, ASCII records.
C       =0      128 words per record,   IMAGE   MODE RECORDS
C               (BUFFER COUNT IS FORCED TO 1 TO ENSURE WRITES
C               ARE PERFORMED IN ORDER REQUESTED)
C       >0      (LENG  ) words per record, ff BINARY   records
C IUN,ISTAT, and IXIST are the same as for RPOPEN.

      SUBROUTINE RPRAND(IUN,ISTAT,LENG,IXIST)

C-------- RPFILE -------------------------------------------------------------
C RPFILE Is equivalent to  CALL RPOPEN(IUN,ISTAT,1,1)
C i.e. it opens a file, expected to exist, for reading only.
        SUBROUTINE RPFILE(IUN,ISTAT)

C------ RFNAME -----------------------------------------------------------
C RFNAME: Reads in and decodes a file title but does not try to open it. 
C The result is left in FNARG as follows:
C ISTAT is an integer variable which returns a status value 
C of 0, -1, or -2 with meaning as above for RPOPEN.
        SUBROUTINE RFNAME(FNARG,ISTAT)

C------ FPOPEN ----------------------------------------------------------
C FPOPEN Opens the file exactly as for RPOPEN.
C IUN, ISTAT, MODE, and IXIST are the same as for RPOPEN; 
C FNARG must contain the result of an earlier call to RFNAME.
        SUBROUTINE FPOPEN(IUN,ISTAT,MODE,IXIST,FNARG)

C------ FPRAND ----------------------------------------------------------
C This is like RPRAND except that it obtains the filename from FNARG.
        SUBROUTINE FPRAND(IUN,ISTAT,LENG,IXIST,FNARG)

C------ RFNAM2 ---------------------------------------------------------
C RFNAM2 decodes a given file title (line) but does not
C try to open it. The result is left in FNARG
C ISTAT is an integer variable which returns a status value
C       of 0, -1, or -2 with meaning as above for RPOPEN.
C FNARG is file name to be checked.
        SUBROUTINE RFNAM2(FNARG,ISTAT)


c ******************** EDAY ******************************
C EDAYturns year day number IYDN when passed the day of the month IDAYN
C and month number IMTHN. 1st Jan= 1, 31st Dec=365, no leap years considered.
      SUBROUTINE EDAY(IDAYN,IMTHN,IYDN)

C ************* EPERSTR ******************************************
C EPERSTR creates three strings representing the start and stop time of
C a period based on the preferred time & date display format.
C IFDAY  0 gives "DOY 10", 1 gives "10 Jan", 2 gives "Fri 10 Jan"
C IFTIME 0 gives "10h30", 1 gives "10.50", 2 gives "0.4166"
C PERST1 (14 char) is: " 10h00  15h30 "," 10.00  15.50 "," 0.5833 0.6458"
C PERST3 (44 char):
C if IFDAY=0 then it is: "Period: DOY   1    To: DOY   1   YEAR:1990"
C if IFDAY=1 then it is: "Period:  1 Jan     To:  1 Jan    YEAR:1990"
C if IFDAY=2 then it is: "Period: Mon  1 Jan To: Mon  1 Jan  YEAR:1990"
C PERST2 (44 char) includes the time of day but not the year. 
C ITRU is the unit number for user output, IER=0 OK, IER=1 problem.
      SUBROUTINE EPERSTR(ITC,ITRU,IYEAR,IBDOY,IBTIM,IEDOY,IETIM,NTSPH,
     &           IFDAY,IFTIME,PERST1,PERST2,PERST3,IER)

C ******************** STDATE ********************
C STDATE takes the day of year and returns two descriptive strings.
C DESCR takes the form '12 Jan' and DESCR1 takes the form 'Fri 12 Jan'.
      SUBROUTINE STDATE(ITRU,IYEAR,IDOY,DESCR,DESCR1)

C ******************** ESTIME ********************
C ESTIME takes an integer timestep and returns two string descriptions:
C DESCRH in the form '12h28' and DESCRD which takes the form of 12.46,
C As well as the time as a fraction of a day TIMER. 
C STIME takes timestep averaging IDAVER into account ie. 0=averaging,
C 1=no averaging. NTS is the number of timesteps per hour.
      SUBROUTINE ESTIME(NTS,IDAVER,ITIME,DESCRH,DESCRD,TIMER)

C ******************** EDTIME ********************
C EDTIME takes an real time and returns two string descriptions:
C DESCRH in the form '12h28' and DESCRD which takes the form of 12.46,
C As well as the time as a fraction of a day TIMER. 
      SUBROUTINE EDTIME(TIME,DESCRH,DESCRD,TIMER)

C *** EDAYR **********************************************************
C 'EDAYR' returns the day and month numbers from the day-of-year where:
C day-of-year 1 = 1st January and day-of-year 365 = 31st December.
C NO LEAP YEARS ARE CONSIDERED!
      SUBROUTINE EDAYR(IYDN,IDAYN,IMTHN)

C *** EWEEKD **********************************************************
C 'EWEEKD' returns the day of the week given the day of month, month
C and year as integers.
C MON=1, TUE=2, WED=3, THU=4, FRI=5, SAT=6 AND SUN=7.
      SUBROUTINE EWEEKD(ITRU,ND,NM,NY,IDAY)

C *** EDAYCH **********************************************************
C EDAYCH will check for errors in the users specification of the day and 
C month under consideration.
      SUBROUTINE EDAYCH(ITRU,ID,IM,IERR)

C *** DATTIM **********************************************************
C DATTIM returns UNIX time via a string in the form : 16 Sep 73 14:23.
      SUBROUTINE DATTIM(DT)

c ******************** EDAYCLK *****************************************
C DAYCLK will print the day, month, day no. and time based on the day
C of the year IYD and clock time in hours TIME.
      SUBROUTINE DAYCLK(IYD,TIME,ITU)

c ******************** PROMPT *****************************************
C PROMPT: Does nothing, for compatibility only.
      SUBROUTINE PROMPT

c ******************** ESIND ******************************************
C Returns SIN of angle where angle is given in degrees.
      FUNCTION ESIND (DEG)

c ******************** ECOSD ******************************************
C Returns COS of angel where angle is given in degrees.
      FUNCTION ECOSD (DEG)

c ******************** IFAX ******************************************
C IFAX is an integer function returning the integer part of it's argument
C truncated towards negative infinity as follows:
      FUNCTION IFAX(V)

C ******************** EAZALT *****************************************
c EAZALT computes the solar azimuth and altitude angles at the current
c time (REAL).   The 'ISUNUP' variable determines whether the sun
c is up (=1) or down (=0).   The solar angles are computed relative
c to local mean time (ie Greenwich is the reference time zone for Britain).
      SUBROUTINE AZALTS(TIMEH,ID,SLAT,SLON,ISUNUP,SAZI1,SALT1)

C ************* EPAREA ************************************************
C EPAREA calculates the area for any polygon where N is the number of
C points, X & Y are arrays of coordinates around the surface and A
C is the calculated area.
      SUBROUTINE EPAREA(N,X,Y,A)

C+++++++++++++++ ORTTRN +++++++++++++++++++++++++++++++++++++++++++++++
C ORTTRN multiplies a point (XM,YM,ZM) by the transform matrix
C TMAT to return the point XO,YO,Z0.  If the points are to close
C together then IER=-1.
      SUBROUTINE ORTTRN(XM,YM,ZM,TMAT,XO,YO,ZO,IERR)

C----------- VECTRN ---------------------------------------------------
C VECTRN transforms a vector VECIN by the 4x4 (homogeneious) matrix TMAT
C and returns the vector VECOUT.  If IERR is < 0 then a fatal error.
      SUBROUTINE VECTRN(VECIN,TMAT,VECOUT,IERR)

C----- VECPLN --------------------------------------------------
C VECPLN returns the point of intersection X,Y,Z between a line defined
C by X1,Y1,Z1 & X2,Y2,Z2 and a plane defined in PEQN.
      SUBROUTINE  VECPLN(X1,Y1,Z1,X2,Y2,Z2,PEQN,X,Y,Z,IERR)

C----------- HMATMUL --------------------------------------------------
C HMATMUL multiplies the homogenous (4x4) matrices A by B returning C.
C Matrix A is premultiplied and matrix B is postmultiplied.
      SUBROUTINE HMATMUL(A,B,C)

C------------ HREVMAT -------------------------------------------------
C HREVMAT takes the homogenous perspective transformation PER and 
C returns it's inverse REP making use of CROUT. 
      SUBROUTINE HREVMAT(ITRU,PER,REP,IERR)

C ******************** CROUT ******************************************
C CROUT inverts a nonsymetric square matrix A (order N), returning
C the matrix B and IERR =-1 if matrix is singular.
C WS is a workspace vector of dimension N, IA is the
C first dimension of A and IB is the second dimension.
C based on crout factorization based on code from
C Alan Bridges and Wilkinson and Reinsch 'Linear Algebra'
C Springer Verlag, 1971, PP 93-110
      SUBROUTINE CROUT(A,N,WS,B,IA,IB,ITRU,IER)

C ******************** DPACC ******************************************
C DPACC provides double precision accumulation of inner products for
C CROUT in the form SUM(+,-)SUM(+,-)AB.
C A is the vector on left, I & J numerical identifiers of first two 
C elements of A in the multiplaction and IJ is the dimension of A.
C For vector B the parameters K,L,KL are analogous to I,J,IJ.
C X is the quantity to be added to the product of the specified 
C elements of vectors A & B.
      SUBROUTINE DPACC(A,I,J,IJ,B,K,L,KL,X,SUM,N,IND)

C+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
C EYEMAT provides transform eyepoint - viewpoint....
      SUBROUTINE EYEMAT(EP,VP,SCALE,TMAT,RMAT)

C ******************** AVER *******************************************
C AVER returns the centre of gravity CG for an array
C of vertex points PNT with NP points in it.
      SUBROUTINE AVER(NP,PNT,CG)

C ******************** CROSS ******************************************
C CROSS performs a cross-product of two vectors A(X,Y,Z) and B(X,Y,Z),
C and returns the result in C(X,Y,Z).
      SUBROUTINE CROSS(A,B,C)

C-------- ZEROS  -------------------------------------------------
C ZEROS Clear a 4x4 array prior to doing viewering transforms.
      SUBROUTINE ZEROS(A)

C-------- TAIRFE  -------------------------------------------------
C TAIRFE: Returns air temperature from enthalpy & moisture content.
      FUNCTION TAIRFE(ENTH,W)

C-------- TSATH0  -------------------------------------------------
C TSATH0: Determines the saturation temperature from enthalpy.
      FUNCTION TSATH0(H1,PATM)

C-------- TDB  -------------------------------------------------
C TDB calculates dry bulb temperature from enthalpy and
C moisture content. It is the reversal of the ENTHP2 function.
      FUNCTION TDB(H,GS)

C-------- ENTHP1  -------------------------------------------------
C ENTHP1: Calculates enthalpy of moist air kJ/kg.
      FUNCTION ENTHP1(TD,TW,PATM,IOPT)

C-------- ENTHP2  -------------------------------------------------
C ENTHP2: Calculates enthalpy of moist air kJ/kg.
C Find the relevant equation for enthalpy of air & water vapour based
C on equation from fundamental data for B.S. engineers, Section 8,
C Eqns 7-20.
      FUNCTION ENTHP2(TD,GS)

C-------- HUMRAT  -------------------------------------------------
C HUMRAT: Calculates humidity ratio kg/kg.
C Equation C1.3 IHVE(1975). Values of FS from fundemental data
C for B.S. engineers.
C NB FS depends on atmospheric pressure - see W P Jones page 34,
C table 2.1 and ASHRAE handbook of fundamentals 1981 page 5.4, table 2.
      FUNCTION HUMRAT(TD,TW,PATMOS,IOPT)

C-------- HUMRT1  -------------------------------------------------
C HUMRT1: Calculates humidity ratio kg/kg.
C Equation C1.3 IHVE(1975). Values of FS from fundemental data
C for B.S. engineers.
C NB FS depends on atmospheric pressure - see W P Jones page 34,
C table 2.1 and ASHRAE handbook of fundamentals 1981 page 5.4, table 2.
      FUNCTION HUMRT1(TD,RH,PATMOS,IOPT)

C-------- VAPRS2  -------------------------------------------------
C VAPRS2: Evaluates vapour pressure (mbar).
C Equation C1.3 IHVE(1975). Values of FS from fundemental data
C for B.S. engineers.
C NB FS depends on atmospheric pressure - See W P Jones page 34,
C table 2.1 and ASHRAE handbook of fundamentals 1981 page 5.4, table 2.
      FUNCTION VAPRS2(TD,GS,PATMOS)

C-------- SATVP  -------------------------------------------------
C SATVP: Evaluates saturated vapour pressure (mbar).
      FUNCTION SATVP(TD)

C-------- VAPRS1  -------------------------------------------------
C VAPRS1: 
      FUNCTION VAPRS1(TD,TW,PATMOS,IOPT)

C--------  TWB -------------------------------------------------
C TWB: Calculates the wet bulb temperature from
C dry bulb temperature and moisture content.
      FUNCTION TWB(TD,GS,PATMOS,IOPT)

C-------- PCSAT1  -------------------------------------------------
C PCSAT1: Evaluates percentage saturation.
      FUNCTION PCSAT1(TD,TW,PATMOS,IOPT)

C-------- PCSAT2  -------------------------------------------------
C PCSAT2: Evaluates percentage saturation.
      FUNCTION PCSAT2(TD,GS,PATMOS)

C-------- PCRH1  -------------------------------------------------
C PCRH1: Evaluates relative humidity.
      FUNCTION PCRH1(TD,TW,PATMOS,IOPT)

C-------- PCRH2  -------------------------------------------------
C PCRH2: Evaluates relative humidity.
      FUNCTION PCRH2(TD,GS,PATMOS)

C-------- SPVOL1  -------------------------------------------------
C SPVOL1: Calculates specific volume m^3/kg dry air.
      FUNCTION SPVOL1(TD,TW,PATMOS,IOPT)

C-------- SPVOL2  -------------------------------------------------
C SPVOL2: Calculates specific volume m^3/kg dry air.
      FUNCTION SPVOL2(TD,GS,PATMOS)

C-------- HUVOL1  -------------------------------------------------
C HUVOL1: Evaluates humid volume m^3/kg.
C Equation from IHVE App.C, p28.
C Factor of 100 is for mbar to kpa.
      FUNCTION HUVOL1(TD,TW,PATMOS,IOPT)

C-------- HUVOL2  -------------------------------------------------
C HUVOL2: Evaluates humid volume m^3/kg.
      FUNCTION HUVOL2(TD,GS,PATMOS)

C-------- SPHTC1  -------------------------------------------------
C SPHTC1: Returns the specific heat capacity of air kJ/(kg K).
      FUNCTION SPHTC1(TD,TW,PATMOS,IOPT)

C-------- SPHTC2  -------------------------------------------------
C SPHTC2: Returns the specific heat capacity of air kJ/(kg K).
      FUNCTION SPHTC2(TD,GS)

C--------  DEWPT -------------------------------------------------
C DEWPT: Makes a crude estimate of dew point based on moisture
C content using curve fit. Using this estimate it iterates to a more
C refined value.
      FUNCTION DEWPT(G1,PATMOS)

C-------- SHTH2O  -------------------------------------------------
C SHTH2O: Water specific heat capacity kJ/(kg K).
      FUNCTION SHTH2O(TEMP)

C-------- DENH2O  -------------------------------------------------
C DENH2O: Water density kg/m^3.
      FUNCTION DENH2O(TEMP)

.ES
.SH
esrulib_ter
.PP
The file esrulib_ter.f is a collection of text and bid-mapped terminal 
control Fortran Functions and Subroutines. Note: the routines makes use 
of common blocks defined in esrublk.f.  The current version
is 10 August 1991. Esrulib_ter.f contains the following terminal control 
functions/routines:
.mT
.TS
l l.
EASKI	T{
Ask user for an integer with prompt, error messages & range 
checking as passed parameters.
T}
EASKR	T{
Ask user for a real number with prompt, error messages & range 
checking as passed parameters.
T}
EASKS	T{
Ask user for a string with prompt, error messages & list of 
standard strings passed parameters.
T}
EPICKS	T{
Allows several selections to be made from an array of strings.
T}
EASKGEOF	T{
Asks for zone number & geometry file name. If a configuration
file has been read present a list of zone names.
T}
EKPAGE	T{
Maps key characters, pages & array indexs in long display lists.
T}
KEYIND	T{
Decodes EMENU index and returns the array index of the item.
T}
EPMENSV	saves menu definitions (common PMENU).
EPMENRC	recovers menu definitions (common PMENU) from PMENUSV.
EPAGE	Screen control: page without waiting
EPAGEW	Screen control: Wait before paging
EPWAIT	Screen control: Wait without paging
EPAGEND	Screen control: Page then close window if open
EMPAGE	Low level screen control for paging based on terminal model
ELINC	Controls scratch pad output for text screens
EPAGES	Initialise terminal, set up a scratch pad & line count (24)
SETLINC	Allows the user to change the length of the text page.
EMENU	Control variable width menu display on various terminals
EWMENU	Is the binding to C function for menu dialogue
EMKEY	Returns key (a-z) for a menu item based on data array index.
USRMSG	Generic message/prompt facility for all terminal types.
EHELPW	Returns the width IWH of the longest help text string.
EHELPD	Displays the current contents of common EHELP.
.TE
.MT
.PP
The interface to each is shown in the listing below:
.ML


c ******************** EASKI ********************
c EASKI is a facility for asking the user for an integer which
C incorporates the prompt, error messages and range checking
C as passed parameters as follows:
C  INPCH is the input channel, IUOUT the output channel, IVAL is
C  the interger returned, PROMP1 & PROMP2 are the prompts to be 
C  given to the user (similar to the syntax of USRMSG which allows
C  two lines or a leading blank line).
C  MIN is the minimum value, MAX is the maximum value.
C  MINACT and MAXACT are actions to take if the range is exceeded:
C   "W" means warn user but accept, "F" means refuse/fail to
C   accept value and ask again, "-" means no range checking.
C  IDEFLT is the default value if 'D','d' typed.
C  If a space or carrage return is typed then IVAL is not changed.
C  ERMSG is a string appended to the range checking or read error
C  to identify the value. IER is the error state, if 0 then OK.
C  NHELP is the number of help lines and HELP() is the array
C  of text strings to be printed out if '?','H','h' is typed
C  by the user. 
C Examples:
C Ask user for zone number.
C        ICOMP=1
C        HELP(1)='The zone number is required only for reporting '//
C     &           'purposes.'
C        CALL EASKI(IUIN,IUOUT,ICOMP," "," What is the zone number? ",
C     &             1,"F",MCOM,"W",1,"zone number",IER,1)
C    ...
      SUBROUTINE EASKI(INPCH,IOUT,IVAL,PROMP1,PROMP2,MIN,MINACT,
     &                 MAX,MAXACT,IDEFLT,ERMSG,IER,NHELP)


c ******************** EASKR ********************
c EASKR is a facility for asking the user for an real which
C incorporates the prompt, error messages and range checking
C as passed parameters as in EASKI.
C Example:
C    ....
C Read a site latitude.
C        XLAT=50.0
C        HELP(1)='The latitude is required for calculating the '//
C     &           'sun position, it should '
C        HELP(2)='be similar to that assumed for the climate file.'
C        CALL EASKR(IUIN,IUOUT,XLAT," ",
C     &             " What is the site latitude (deg) ? ",
C     &             -89.9,"F",89.9,"F",35.0,"site latitude",IER,2)
C    ...

      SUBROUTINE EASKR(INPCH,IOUT,RVAL,PROMP1,PROMP2,RMIN,MINACT,
     &                 RMAX,MAXACT,DEFLT,ERMSG,IER,NHELP)


C ************* EASKS *************************************************
c EASKS is a facility for asking the user for a text string which
C incorporates the prompt, error messages and alternative
C text strings as follows:
C      CALL EASKS(INPCH,IOUT,STRVAL,IVAL,PROMP1,PROMP2,
C     &           ISTRW,NSTALT,STALT,ERMSG,IER,NHELP)

C INPCH is the input channel, IUOUT the output channel, STRVAL is
C the string returned, ISTRW is its length.
C PROMP1 & PROMP2 are the prompts using the same syntax as USRMSG.
C NSTALT is the number of alternate strings STALT passed, the
C first being the default.  Editing is allowed if STALT="USR_DEFINED"
C IVAL is the index of which string alternative was selected, this
C is 0 if no selection was made or the current value accepted.
C If a space is typed then STRVAL is not changed.
C ERMSG is a string appended to the range checking or read error
C to identify the value. IER is the error state, if 0 then OK.
C NHELP is the number of help lines and HELP() is the array
C of text strings to be printed out if '?','H','h' is typed
C by the user. 

C Note that there is no particular limit on the number of alternate
C strings which can be passed to the subroutine as the selection menu
C allows paging.  The width of the text strings influences the
C width of the selection menu:
C if 6  < ISTRW <=  8 then menu 10 char wide. 
C if 6  < ISTRW <= 18 then menu 20 char wide. 
C if 18 < ISTRW <= 28 then menu 30 char wide. 
C if 28 < ISTRW <= 48 then menu 50 char wide.
C if 48 < ISTRW <= 72 then menu 74 char wide.
C In all cases user-defined text strings and string alternatives
C will be truncated at the width ISTRW.
C Example:
C    ....
C test getting a string.
C        HELP(1)='The site name is a test of the menu help facilities.'
C        XNAME=' '
C        XALT(1)='Hull'
C        XALT(2)='London'
C        XALT(3)='Dallas'
C        XALT(4)='USR_DEFINED'
C        CALL EASKS(IIN,IUOUT,XNAME,IX," ",
C     &   " What is the site name ?",13,4,XALT,"test sites",IER,1)
C        CALL USRMSG(IUOUT," "," selected string is:"//XNAME,"-")

      SUBROUTINE EASKS(INPCH,IOUT,STRVAL,IVAL,PROMP1,PROMP2,
     &                ISTRW,NSTALT,STALT,ERMSG,IER,NHELP)


C ************* EPICKS ******************************************
c EPICKS is a facility allowing a number of selections to be made
C from an array of strings passed into the routine. EPICKS 
C incorporates the prompt, error messages and returns an array of
C selected indexes as follows:

C INPCH is the input channel, IUOUT the output channel.
C PROMP1 & PROMP2 are the prompts using the same syntax as USRMSG.
C INPICK is the total number of items selected, if 0 then none.
C IVALS is an array of NSTALT size such that:
C   IVALS(1) is the first index selected,
C   IVALS(2) is the second index ...
C   IVALS(INPICK) is the last index chosen.
C NSTALT is the number of selection strings STALT passed.
C ERMSG is a string appended to the range checking or read error
C to identify the value. IER is the error state, if 0 then OK.
C NHELP is the number of help lines and HELP() is the array
C of text strings to be printed out if '?','H','h' is typed
C by the user. 

C Note that there is no particular limit on the number of alternate
C strings which can be passed as in EASKS.
C In all cases user-defined text strings and string alternatives
C will be truncated at the width ISTRW.
C Example:
C    ....
C        DIMENSION IRR(3)
C test getting a string.
C        HELP(1)='The site name is a test of the menu help facilities.'
C        XALT(1)='Hull'
C        XALT(2)='London'
C        XALT(3)='Dallas'
C        CALL EASKS(IIN,IUOUT,IX,IRR," ",
C     &   " What are possible sites ?",13,3,XALT,"test sites",IER,1)
C         DO 10 I=1,IX
C         CALL USRMSG(IUOUT," "," selected:"//XALT(IRR(I)),"-")
C    ...

      SUBROUTINE EPICKS(INPCH,IOUT,INPICK,IVALS,PROMP1,PROMP2,
     &                ISTRW,NSTALT,STALT,ERMSG,IER,NHELP)

C *** EASKGEOF **********************************************************
C EASKGEOF asks for the zone number and geometry file name. If the
C configuration file has been read present a list of zone names,
C otherwise ask for a specific zone number and file name.
      SUBROUTINE EASKGEOF(ITRU,CFGOK,IZONE,LFILG,IER)

C *** EKPAGE **********************************************************
C EKPAGE maps key characters, pages & array indexs in long display lists.
C No menu should have more than 26 data selections (plus heading and 
C control lines) so that key characters (a-z) for arrays will not be
C repeated. Notes on variables:
C IPACT  : page option, if IPACT= CREATE then only update the common
C          block PMENU, otherwise ask for action to be taken. 
C IPM,MPM: current and last page of menu,
C IST    : is the data array index at the beginning of the menu.
      SUBROUTINE EKPAGE(ITC,ITRU,IPACT)

C *** KEYIND **********************************************************
C KEYIND decodes the index INO and returns the array index IA of the item
C displayed and whether INO is within the list.  If IR=1 then it asks
C for confirmation. INOUT is set to a parameter from epara.h.
      SUBROUTINE KEYIND(IR,ITRU,MENUL,INO,IA,INOUT,IER)

C *** EPMENSV **********************************************************
C EPMENSV saves the current state of common block PMENU into common block
C PMENUSV.  This is useful if a second menu is about to be called and
C knowledge of the first is required.  See also EPMENRC which pops the
C information back into common PMENU.
      SUBROUTINE EMENSV

C *** EPMENRC **********************************************************
C EPMENRC recovers menu definitions (common block PMENU) from common 
C block PMENUSV.
C This is useful if returning from a second menu.  See also EPMENSV.
      SUBROUTINE EMENRC

C++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
C EPAGE: Screen control: page without waiting.
      SUBROUTINE EPAGE

C++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
C EPAGEW: Screen control: Wait before paging.
      SUBROUTINE EPAGEW

C++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
C EPWAIT: Screen control: Wait without paging.
      SUBROUTINE EPWAIT

C++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
C EPAGEND: Screen control: Page then close window if open.
      SUBROUTINE EPAGEND

C++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
C EMPAGE: Low level screen control for paging based on terminal model.
C The available terminal types are:
C type -6 = batch/shell/function button mode.
C type -3 = line printer with no paging.
C type -2 = teletype with waiting.
C type -1 = teletype.
C type  8 = sunwindow, X window, Whitechappel window with dialogue box.
C type  9 = suntools, X window, Whitechappel window.
      SUBROUTINE EMPAGE(IPAG,IW,IEND)

c ******************** ELINC ********************
C ELINC: Controls scratch pad output for text screens.
C For terminal types -2 -1 9 ELINC tests if N lines fit on the page, if
C yes then the line cout is updated to give lines left on page, if not
C the terminal is paged and a new limit is set.
      SUBROUTINE ELINC(N)

C++++++++++ EPAGES +++++++++++++++++++++++++++++++++++++++++++++
C EPAGES: Initialise terminal, set up a scratch pad of line count depending
C on terminal type.  LIMIT is the number of line output for a full page.
C The method of page termination depends on the model number.
C The available terminal types as in EMPAGE.
      SUBROUTINE EPAGES(MODEL,IIN,IOUT)

C++++++++++ SETLINC +++++++++++++++++++++++++++++++++++++++++++++
C SETLINC: Allows the user to change the length of the text scratch
C pad for the various terminal types.  Call after EPAGES.
C LIMIT is the number of line output for a full page.
C The available terminal types are as in EPAGES.
      SUBROUTINE SETLINC(IIN,IOUT)

C++++++++++ EMENU +++++++++++++++++++++++++++++++++++++++++++++++++++++
C EMENU: Control menu display on various terminals.  Name is a character
C string to form the heading of menu, ITEMS is an array of character
C strings making up the menu, NITMS is the number of items in the menu,
C INO is the number of the item chosen. NAME and ITEMS can be of any width,
C but usually a maximum of 79 characters.
      SUBROUTINE EMENU(IIN,IOUT,NAME,ITEMS,NITMS,INO)

C++++++++++ EWMENU ++++++++++++++++++++++++++++++++++++++++++++++++++++
C EWMENUT: Is the binding to C function for menu dialogue.  It has
C been stripped of references to TEK and allows the string widths
C to be variable widths.
      SUBROUTINE EWMENU(name,items,nitms,ino)

C *** EMKEY ************************************************************
C EMKEY returns a key character for a menu item (a-z) based on the array
C index of the item.  Uses ICHPK(26), 'a','b'... from libesru...
      SUBROUTINE EMKEY(ITRU,IAI,KEY,IER)

c ******************** USRMSG ********************
c Generic error reporting facility.  IOUT is the output channel, MSG1
C and MSG2 are text strings (upto 124 char) to be printed.  LEVEL is a
C single character 'W' or 'w' for warning,  'F' or 'f' for Fatal error,
C '-' to only print the messages, '?' is a prompt.  In the case of a 
C fatal error STOP will be called, otherwise execution will return to
C the calling point.
C In the case of a graphic menu the c function msg_box will be called
C and the messages will appear in a dialogue box at the bottom of the 
C graphic window. The user must have previously called open_msg_box(2).
C Examples:
C       MSG2=' '
C       CALL USRMSG(IUOUT," Did not understand...",MSG2,"-")
C       CALL USRMSG(IUOUT," Did not understand..."," XXXX ","w")
C       MSG2=' Second line '
C       CALL USRMSG(IUOUT," Did not understand",MSG2,"-")
C       CALL USRMSG(IUOUT," Did not understand..."," ","w")
C       CALL USRMSG(IUOUT," Did not understand...",MSG2,"-")
C    ...
C results in the following...
C  Did not understand...
C  Warning message:  Did not understand...
C  XXXX
C  Did not understand
C  Second line
C  Warning message:  Did not understand...
C  Did not understand...
C  Second line
 
      SUBROUTINE USRMSG(IOUT,MSG1,MSG2,LEVEL)

C *** EHELPW ************************************************************
C EHELPW returns the width IWH of the longest text string in the common
C EHELP where IL is the number of lines of help under consideration.
      SUBROUTINE EHELPW(ITRU,IL,IHW,IER)

C *** EHELPD ************************************************************
C EHELPD displays the current contents of common EHELP in a form 
C appropriate to the current terminal type. MSG is a short descriptive
C string for the subject. NHELP is the number of lines to be displayed.
      SUBROUTINE EHELPD(IOUT,MSG,NHELP,IER)

.ES
.MT
.SH
esrulib_tnb.f
.PP
This file is the same as esrulib_ter.f except that all references to 
bit mapped screens have been removed.  For text based applications this
means that none of the ww libraries, X or suntools are required.
.SH
wwlib.c
.PP
Wwlib.c is a collection of functions which provide graphing
functions for bitmap screens based on WW calls.  This includes
code which have previously been written in Fortran and which made
use of "fwwinfo.h".
The code has
been tested on several applications and is divided into three
sections, the first providing initialisation and closing of
the graphics environment, the second section being older functions
which are begin phased out, and the final section being new code
as follows:
.mT
.TS
l l.
winint	initialise the ww window with message at top.
winclr	clears the screen
wincsr	switch on (TRUE) off (FALSE) cursor
winfin	closes the ww window
_

winlin	OLD draws a line to x,y and sets the rasterop to 'draw'
winpen	changes the rasterop temporarily to 'type'
winloc	OLD returns the charcter or mouse button pressed
winpos	OLD returns the position of the mouse after winloc
winget	T{
OLD returns mouse position and any char pressed
without waiting for user input
T}
wintxt	OLD outputs the value ichar as a text character
winstm	OLD set the mouse to position x, y
windmp	dumps the windows image to the file name (disabled)
winlod	loads the file frame.num to the screen   (disabled)
windcl	OLD define the colour 'n' in RGB using ir,ig,ib
winscl	OLD set current colour to n
_
winfnt	changes the font (4 different sizes 0,1,2,3)
wstxpt	outputs a string beginning at pixel x and y.

winbut(ichar)	T{
puts a button on the screen and 
returns the charcter or mouse button pressed
T}
wind3d	T{
opens a viewing box taking into account menu width and dialogue box.
T}
win3dclr	clear viewing box.
viewtext	T{
displays a line of text within the viewing
box with size and location parameters
T}
openaskbox	T{
creates a text input box within the dialogue
area positioned to match the msg's passed.
T}
askdialog	controls input of strings in the dialogue area.
einp	single line terminal emulator for askdialog.
msgbox	T{
places prompts in the dialogue box with the same syntax used in USRMSG.
T}
okbox	T{
places prompts in dialogue box as in msgbox
but ok=1 if yes and ok=0 if no.
T}
opengdisp	opens a scrolling text display area.
eline	draws or moves a line @ pixel location x y.       
ecirc	draws a filled or open circle @ location x y.
eghelp	opens and displays help text in a box.
axiscale	T{
determines scaling parameters for horizontal and vertical axis.
T}
vrtaxis	T{
draws a vertical axis (tic & labels on right or left side).
T}
horaxis	T{
draws a horizontal axis with tic marks and labels.
T}
dinterval	T{
determins the tic interval for an axis as well
as the number of decimal places.
T}
labelstr	T{
generates an appropriate label for the value passed.
T}
_
LBLSTR	No longer exists
VRTAXS	No longer exists
HORAXS	No longer exists
AXSCALE	No longer exists
POPSEL	No longer exists
DINTT	No longer exists
GRWOFFS	No longer exists
.TE
.MT
.PP
The interface to each is listed below.
.ML

/* *************** Initialise display. *************** */
winint_(term,msg)
long int *term;           /* terminal type from fortran  */
char *msg;                /* window heading      */

/* *************** Change cursor ****************** */
wincsr_( state )  int state;

/* *************** Release display. *************** */
winfin_()

/* **************  Erase whole screen. ************* */
winclr_()

/* *************** Move/draw routine. OLD *************** */
winlin_(x,y) int *x,*y;	/* co-ords		*/

/* ************ pen type routine ************** */
winpen_(type) int *type;	/* line type as above */

/* ************ Cursor routine. *************** */
winloc_(ichar)
 int *ichar;	/* character returned	*/

/* *******  Return the mouse position. OLD ********** */
winpos_(x, y) int *x,*y;	/* returned co-ords	*/

/* *******  Return the cursor position. OLD ********** */
winget_(ichar,x,y) 	/* returns the position of the cursor without
			waiting for the user to press a key or button */
int *ichar, *x, *y;

/* ********* Write single character at current position. OLD ******** */
wintxt_(ichar)
 int *ichar;	/* integer value for character */

/* ********** Define colour *********** */
windcl_(n,ir,ig,ib)
int *n, *ir, *ig, *ib;

/* ********** Set colour ************* */
winscl_(n)
int *n;

/* ********** Line operation ************* */
static getop(c)
 int c;

/* ********* Write a string beginning at pixel x and y. ******* */
wstxpt_(x,y,buff,n,len)
char *buff;
int n, len; /* len is length as passed automatically by fortran */
int *x, *y; /* x y is the position of the string*/

/* ************ Select a font **************** */
winfnt_(n)
 int *n;

/* ******  Routine to place button on screen and report press ********** */
winbut_(ichar)
 int *ichar;	/* character returned	*/

/* **************  Open a 3D viewing box *************** */
/*
 Passed the character width of the main control menu, the number of
 lines of text to leave at the bottom for a dialogue box, the width of
 the left, right inside margins in terms of number of characters
 with the current font and the top and bottom inside margins in terms
 of lines of characters.
 Returns the pixel coord of the viewing box left, right, top, bottom as well
 as its overall pixel width & height.
 dbx1 is the outer box (including axes) and viewbx is the image area.
*/
win3d_(menu_char,dialogue_lines,cl,cr,ct,cb,vl,vr,vt,vb,gw,gh)
	int	*menu_char,*dialogue_lines,*gw,*gh;
        int	*cl,*cr,*ct,*cb;
        int	*vl,*vr,*vt,*vb;

/* ******  Routine to clear view/3d display box. ********** */
  win3dclr_()

/* **************  Display text in viewing box *************** */
/*
 Given a string 'msg' and the 'line' where the string should be written
 and whether it should be left (side = 0), centered (side = 1), or
 right justified (side = 2) as well as the font size (0=small, 1 2 =medium,
 3=large).
*/
viewtext_(msg,line,side,size,len)
  char  *msg;                    /* character string  */
  int	*len;                    /* length from f77   */
  int   *line, *side, *size;     /* position indicators */

/* **************  Open a dialogue input box *************** */
/*
 Passed the prompts which were sent to the dialogue box so that the
 correct position is defined. msgbx contains the prompts while
 askbx is reserved for user input.  If the width of the string
 would cause the input box to over-run the dialogue box then
 truncate the input box. If there is only a " " in the second
 prompt then position askbx against the left side.
*/
openaskbox_(msg1,msg2,asklen,len1,len2)
  char    *msg1,*msg2; /* character strings for each line */
  int	*len1,*len2; /* lengths as supplied by fortran */
  int     *asklen;     /* character width of the input box */

/* **************  Get string from dialogue input box *************** */
/*
 Code implements control of a single line input facility.  
 This should be upgraded to make use of ww txinfo facilities.
 Note unpredictable if the cusror passes the end of askbx.
 Input begins when cursor is within askbx and one
 of the mouse buttons has been pressed.
*/
askdialog_(sstr,asklen)
    char *sstr;       /* string returned to fortran (remember strip end mark) */
    int  *asklen;     /* character width of the input box */

/* *********** Read string at current position. *********** */
/* This code implements a one-line terminal emulator. */
einp_(x,y,retbuf, buflen, rlen)
 int  x,y;      /* cursor position              */
 char *retbuf;	/* buffer for return		*/
 int buflen;	/* length of retbuf		*/
 int  *rlen;	/* length of returned string	*/

/* **************  Write prompts in dialogue box *************** */
/*
 Passed two strings (as in USRMSG) and their lengths writes into
 dialogue box (msgbx) after clearing the box. Allows for pause after 
 display which is useful in the case of warning messages.
*/
msgbox_(dialogue_lines,msg1,msg2,pause,len1,len2)
  char    *msg1,*msg2;
  int	*pause;           /* number of seconds to pause for warnings */
  int	*len1,*len2;      /* lengths as supplied by fortran          */
  int	*dialogue_lines;  /* number of text lines nominally 2.       */

/* *************** ESRU line drawing routine. *************** */
/* 
 co-ords, operation flag equiv to fwwutil parameters: 
	1=move to absolute pixel coord, 
	0=draw line to absolute pixel coord, 
	3=move to relitive pixel coord,
	2=draw line to relitive pixel coord.
*/
eline_(x,y,operation)
 int *x, *y, *operation;	

/* *************** ESRU dotted line drawing routine. *************** */
/* 
 Unlike eline above this function is passed both sets of pixel co-ords.
 The ipdis is the number of pixels between each dot.  Typical values
 are 2 for a dense dotted line, 3 for a sparce one, values over 4 are
 probably not useful.
*/
edline_(x1,y1,x2,y2,ipdis)
  long int *x1, *y1, *x2, *y2, *ipdis;	

/* *************** ESRU circle drawing routine. *************** */
/* 
 co-ords, operation flag: 
	0=draw circle is drawn with clear inside. 
	1=draw filled black circle.
	2=to be added...
	3=to be added...
*/
ecirc_(x,y,rad,operation)
  long int *x, *y, *rad, *operation;	

/* **************  Open an ok box *************** */
/*
 Passed the prompts which were sent to the dialogue box so that the
 correct position is defined. msgbx contains the prompts while
 askbx is reserved for user input.  If the width of the string
 would cause the input box to over-run the dialogue box then
 truncate the input box. If there is only a " " in the second
 prompt then position askbx against the left side.
*/
okbox_(msg1,msg2,ok,len1,len2)
  char    *msg1,*msg2;         /* character strings for each line */
  long int *len1,*len2;        /* lengths as supplied by fortran (ignored) */
  long int *ok;                /* returned 0=no 1=yes */

/* **************  Open a text display box *************** */
/*
 Passed the character width of the main control menu, the number of
 lines of text to leave at the bottom for a dialogue box, the number
 of lines of text to be displayed within it, the display font to be
 used in subsequent calls to egdisp.
 Returns the overall pixel width & height.
 disp_opend is a static flag so that other facilities know there is
 a text display box.
*/
opengdisp_(menu_char,displ_l,dialogue_l,fnt,gdw,gdh)
 long int *menu_char,*displ_l,*dialogue_l,*fnt,*gdw,*gdh;

/* *************** ESRU text display box. *************** */
/* 
 egdisp takes a string from f77 and attempts to display
 it in the text display box defined in opengdisp. 
 The string passed will be displayed on a single line
 however if it will  not fit in the box it will be truncated.
*/
egdisp_(msg,iw,line,len)
  char  *msg;                       /* character string  */
  long int *len;                    /* length from f77   */
  long int *line, *iw;              /* position & width indicator */

/* ******  Routine to clear text display box. ********** */
  egdispclr_()

/* *************** ESRU help box. *************** */
/* 
 This function takes an array of strings from f77 and attempts to
 display it in a box and waits for the user to press a key
 or click a mouse to get rid of it.  The strings passed will each
 be displayed on a separate line so that the arangement of the
 text passed will not be changed ie. no word warp etc will be
 undertaken, however if the longest string will not fit in the
 width of the box then a smaller font will be used.
*/
  eghelp_(items,nitmsptr,iw,impx,impy,len_items)

  char      *items;         /* f77 array of help text strings    */
  long int  *nitmsptr;      /* number of help lines to display   */
  long int  *iw;            /* actual max char width in items    */
  long int  *impx,*impy;    /* box position (if 0,0 use default) */
  long int  len_items;      /* length of help string from f77    */

/* ************** AXSCALE ************************ */
/* 
 Determine the scaling ratios for use by ww based on the axis range of 
 XMN to XMY for the horizontal axis and YMN to YMX for the vertical 
 axis within a window "gw" pixels wide by "gh" pixels high. XSC is the 
 scaling factor for the horizontal axis, YSC for the vertical and SCA 
 is a scaling factor which gives an equal aspect ratio.  In mixed cases 
 of minimum/maximum X/Y coords being negative set a data offset Xadd & 
 Yadd to assist in line drawing ( window coords are 0,0 upper left 
 whereas line drawing is 0,0 in the lower left). 
*/

axiscale_(gw,gh,xmn,xmx,ymn,ymx,xsc,ysc,sca,xadd,yadd)
  int *gw, *gh;
  float *xmn, *xmx, *ymn, *ymx, *xsc, *ysc, *sca, *xadd, *yadd;

/* ************** VRTAXS *********************** */
/* 
 Construct and draw a vertical axis via WW where: YMN,YMX are the data 
 minimum & maximum values, offl & offb are the pixel coords of the     
 lower start of the axis.  SCA is the scaling factor and Yadd 
 is a data offset to adjust plotting for various data ranges. 
 Mode = 1 for time axis, Mode = 0 for other data display types. 
 Side = 0 lables and tic on left, Side = 1 labels and tic on right.
 msg is the axis label and mlen is it's length (passed from f77).
*/

vrtaxis_(ymn,ymx,offl,offb,offt,yadd,sca,mode,side,msg,mlen)
 float *ymn, *ymx,  *yadd, *sca;
 int  *offl,*offb, *offt, *mode, *side, *mlen;
 char  *msg;

/* ************** HORAXS *********************** */
/* 
 Construct and draw a horizontal axis via WW where: XMN,XMX are the data
 minimum & maximum values, offL & offB are the pixel coords of the
 left start of the axis.  SCA is the scaling factor and Xadd is a data
 offset to adjust plotting for various data ranges.
*/

horaxis_(xmn,xmx,offl,offr,offb,xadd,sca,mode,msg,mlen)
 float *xmn, *xmx, *sca, *xadd;
 int   *offl,*offr,*offb, *mode, *mlen;
 char  *msg;

/* ******** DINTERVAL ******************** */
/* 
 DINTERVAL finds interval DV on an AXIS(V1,V2) and a suitable number of
 decimal places for the axis values. When 'mode'=0, factors of 10 are
 removed and the interval IS 0.2 for scale length 1-2
                 0.5                  2-5
                 1.0                  5-10

 When 'mode'=1 the hour interval on the graphical time (x-axis) is set as follow: 
 v=v2-v1  for v < 12 dv=1, v < 18 dv=2, v < 24 dv=3, v < 48 dv=6 
              v < 96 dv=12   else dv=24. 
*/

dinterval_(v1,v2,dv,ndec,mode)
 float *v1, *v2, *dv;
 int *ndec, *mode;

/* ************ Generate a tic label *************** */
/*
 Generate a tic label where n is the number of decimal places,
 val is the value to be converced, Wticc is the number of pixels
 required to center the text (horizontally), sstr is the string
 returned and lenstr is its length (passed from f77).
*/
labelstr_(n,val,WticC,sstr,lenstr)
 int *n, *WticC,*lenstr;
 float *val;
 char sstr[10];

.ES
.MT
.bp
.SH
/usr/esru/esp/src/esrucom/egeometry.f
.PP
This is a collection of ESP compatible geometry and site obstruction
file reading, reporting and creation 
facilities implemented as Fortran Subroutines.  Each allows 
for comments to be included in the ASCII files either as 
whole lines or at the end of a line.  No limit is imposed on the number
and placement of whole comment lines, however data lines longer than
124 characters will be truncated.  In most cases only the 
name of the file to be read is passed along with its unit number.  
The subroutine checks for its existence, opens it, reads the data in either a 
standard ESP or alternative syntax and closes it before returing. 
One may invoke range checking of the
input, typically on first reading, and bypass this code on subsequent
reads.  Both range checking and other errors generally provide both
a statement of the nature of the problem and the line of information
where the problem was detected.
.PP 
Standard within all of the file reading facilities is an English language 
and/or tabular report on the data read in.  This is available at three
levels; none, minimal and verbose.  In most cases, the terse number 
combinations found in the file are decoded into an English equivalent.
.PP
Generally data is placed in common blocks after it has been read and
processed.  For example, it does not matter which type of geometry file
format is encountered in the file, the common block data is that of a 
GEN format, fully transformed into site coordinates. Most of the
reporting facilities are based on common block data so that an
application can provide reporting facilities at any point, rather
than just during file reading.
.PP
Each of the file creation facilities takes information from common blocks
and provides the option to choose either a plain ESP compatible format,
an annotated version of an ESP file (readable by the library file reading
facilities), or in some cases a third format which is not ESP compatible.
.PP
The file /usr/esru/esp/src/esrucom/egeometry.f contains the following Subroutines:
.mT
.TS
l l.
EGOMIN	T{
Reads zone geometry data as ASCII strings, with or without
range checking and printed summary
T}
EMKGEO	T{
Write a plain or annotated geometry file (GEN type) based on  
common blocks G0 G1 G2 G3 G4 G5
T}
ERECC	Converts REC into a GEN description
EREGC	Converts REG into a GEN description
ECROT	Rotate a zone by ANG degrees
SURINFO	Display surface details and attributes in a tabular format.
ZINFO	T{
Takes zone geometry data and returns descriptive information
T}
INSINFO	English description of default insolation options.
DWDINFO	Prints a table about the location and size of windows & doors.
VERINFO	Prints vertex/surface list summaries.
.TE
.MT
.PP 
The interface to each of the routines is listed below:
.ML

C ******************** EGOMIN ********************
C EGOMIN reads zone geometry data from a user-constructed data file.
C There are three levels of geometry data input corresponding to
C RECtangular (REC), REGular (REG) and GENeral (GEN) shaped zones.
C If IR=1 then range checking is enabled, otherwise only minimal checking
C is performed on the data as read in.  LGEOM is the name of the
C file to be read, ICOMP is the zone number, IR=1 do range checking
C IR=0 omit range checking, ITRC is the trace level, ITRU is the user
C output unit, IER=1 error reading, IER=0 ok, 
C Data is placed in common blocks G0 G1 G2 G3 G4 G5.
      SUBROUTINE EGOMIN(IUNIT,LGEOM,ICOMP,IR,ITRC,ITRU,IER)

C ************* EMKGEO *************************************************
C Generic routine to write a geometry file (GEN type) based on infor-
C mation currently held in common blocks G0 G1 G2 G3 G4 G5.
C GENFIL is the name of the file to be written to (any existing file
C by this name is overwritten).  
C ICOMP is the zone number, ATR=1 attribute file ATR=0 plain file.
C IR=1 range checking IR=0 no range checking, ITRU unit number for
C user output, IER=0 OK IER=1 problem.
      SUBROUTINE  EMKGEO(IFILG,GENFIL,ICOMP,ATR,ITRC,ITRU,IER)


C ******************** ERECC ******************************************
C ERECC converts a REC (rectilinear) description into a GEN description.
C The X,Y, & Z coordinates of the 'Bottom left-hand' corner (when viewed
C from the south), the length (from the BL-HC towards the east), width,
C height of the enclosure and angle of rotation between the length side
C and due east (anticlockwise positive) are passed from the calling code
C (typically EGOMIN) and the GEN description returned via common block G1.
      SUBROUTINE ERECC(XO,YO,ZO,DX,DY,DZ,A)

C ******************** EREGC ******************************************
C EREGC converts a REG (extruded) geometry description into a Gen form.
C The number of vertical walls, X & Y coords of the bottom corner of 
C each wall in an anticlockwise direction (defining a polygon in a plan
C view) as well as the floor & ceiling heights are passed to EREGC and
C the GEN description returned via common G1.
      SUBROUTINE EREGC(NW,Z1,Z2,XX,YY)

C ******************** ECROT ******************************************
C Rotate a zone by ANG degrees and return information via common G1.
      SUBROUTINE ECROT(ANG)

C ************* SURINFO ******************************************
C Display Surface details and attributes in a tabular format. Make use 
C of information currently in Common blocks G1 G5.
      SUBROUTINE SURINFO(ICOMP,ITRU)

C *** ZINFO **********************************************************
C 'ZINFO' takes data from the zone geometry commons G1,G2,G3 and returns
C the following parameters:
C SNA   - opaque surface area of each multilayered construction
C ZOA   - total opaque surface area bounding zone
C ZGA   - total glazing surface area
C ZDA   - total door surface area
C GSA   - gross surface area of bounding surface.
C GWA   - total window area associated with each surface.
C PAZI  - plane azimuth angle
C PELV  - plane elevation angle
C VOL   - zone bounded volume
      SUBROUTINE ZINFO(IOUT,SNA,ZOA,ZGA,ZDA,GSA,GWA,PAZI,PELV,VOL)


C *** INSINFO **********************************************************
C INSINFO provides an English description of default insolation options
C chosen by the user in the geometry file based on NDP(ICOMP) and
C IDPN(ICOMP,?) which are found in common G4.
      SUBROUTINE INSINFO(ICOMP,ITRU)

C *** DWDINFO **********************************************************
C DWDINFO prints a descriptive table about the location and size of all
C default windows and doors in a zone from information contained in
C common blocks G1, G2 & G3. 
      SUBROUTINE DWDINFO(ICOMP,ITRU)

C *** VERINFO **********************************************************
C VERINFO prints two summaries, the first includes vertex coordinates and
C a list of surfaces associated with each vertex.  The second prints a
C list of surface numbers and the list of vertices which define them.
C Information is gathered from common block G1. 
      SUBROUTINE VERINFO(ITRU)

.ES
.MT
.SH
/usr/esru/esp/src/esrucom/econstr.f
.PP
The file /usr/esru/esp/src/esrucom/econstr.f contains the following Subroutines:
.mT
.TS
l l.
ECONST	Reads zone construction file with or without comments.  
EMKCON	Creates a zone construction file based on blocks T1 T2 T3 T3ADD T4.
CONINFO	Description of constructions in a zone based on common blocks 
.TE
.MT
.PP 
The interface to each of the routines is listed below:
.ML

C ******************** ECONST ********************
C ECONST reads zone thermophysical data from a user-constructed data
C file as ASCII strings and with or without comments.  LCONS is the
C name of the file, ICOMP is the zone number, IR=1 range checking
C on, IR=0 no range checking, ITRC trace level, ITRU output unit,
C IER error reading file.  Geometry data is taken from the current
C contents of common blocks G0 G1 G2 G3 G4 G5.
      SUBROUTINE ECONST(LCONS,IUNIT,ICOMP,IR,ITRC,ITRU,IER)

C ************* EMKCON ******************************************
C Generic routine to write a construction file based on information cur-
C rently held in common blocks T1 T2 T3 T3ADD T4.
C CONFIL is the name of the file to be written to (any existing file
C by this name is overwritten). ICOMP is the zone number.
C ATR determines what format of file is written:
C ATR=2 ESRU file, ATR=1 attributed file, ATR=0 std ESP file.
C IR=1 range checking IR=0 no range checking, ITRC= trace verbose level.
C ITRU unit number for user output, IER=0 OK, IER=1 problem.
      SUBROUTINE EMKCON(CONFIL,IFILT,ICOMP,ATR,ITRC,ITRU,IER)

C *** CONINFO **********************************************************
C CONINFO provides a description of the constructions in a zone based
C on common blocks.
      SUBROUTINE CONINFO(ICOMP,ITRU)

.ES
.MT
.SH
/usr/esru/esp/src/esrucom/edatabase.f
.PP
The file /usr/esru/esp/src/esrucom/edatabase.f contains the following:
.mT
.TS
l l.
ERMLDB	Read an ASCII or binary mlc db and return data via block MLC.
ERPCDB	Reads one element from a binary primitive construction db.
EDMLDB	Display an ASCII or binary multi-layer construction db.
EMKBMLD	Creates a binary composite constr db based on common MLC.
EMKAMLD	Creates an ascii composite constr db based on common MLC.
.TE
.MT
.PP 
The interface to each of the routines is listed below:
.ML

C ************* ERMLDB ******************************************
C Given file name and unit number, read  an ASCII or binary multilayer 
C database and return data via common block MLC.
C IFMUL is the database unit, ITRU unit number for user output,
C IER=0 OK, IER=1 problem. 
C DRAIR is the default air gap resistance for 4 orientations.
      SUBROUTINE ERMLDB(LFMUL,IFMUL,IBASCI,IFCON,ITRC,ITRU,IER)
      INCLUDE '/usr/esru/include/building.h'

C ************* ERPCDB *************************************************
C ERPCDB reads one element from a binary primitive construction db.
C returning them via parameter list.
C IFCON is the unit number of the database,  IEL the requested 
C element, ITRU unit number for user output, IER=0 OK, IER=1 problem.
C ITRC is the trace level.  It is assumed that the database has been
C previously opened and other parts of the code will close it when
C appropriate.  E is the element emissivity, A is the solar absorb, DRV
C is the diffusion resistance, TITL is the classification title, PNAM is
C the primitive element name.

      SUBROUTINE ERPCDB(IFCON,IEL,ITRC,ITRU,IER,DBCON,DBDEN,DBSHT,E,A,
     &                  DRV,TITL,PNAM)
      CHARACTER*72 PNAM,TITL

C ************* EDMLDB *************************************************
C EDMLDB Display an ASCII or binary multi-layer construction db.
C IFCON is the unit for the associated primitive constructions db.
C ITRU unit number  for user output, IER=0 OK, IER=1 problem.
C Information is available via common block MLC. 

      SUBROUTINE EDMLDB(ITRC,ITRU,IER,ISEL)
      INCLUDE '/usr/esru/include/building.h'

C ************* EMKBMLD ************************************************
C EMKBMLD: Creates a binary composit construction database based on the
C current contents of common MLC.  In the case of an air layer sub-
C stitute the U value for each layer.
      SUBROUTINE  EMKBMLD(ITRU,ITRC,IER)
      INCLUDE '/usr/esru/include/building.h'
      COMMON/OUTIN/IUOUT,IUIN
      COMMON/CONDB/LFCON,IFCON,LFMUL,IFMUL,IBASCI
      COMMON/MLC/NMLC,DESC(MMLC),DTHK(MMLC,ME),IPR(MMLC,ME),
     &           LAYERS(MMLC),DRAIR(MMLC,MGP,4)

C ************* EMKAMLD ************************************************
C EMKAMLD: Creates an ascii composit construction database based on the
C current contents of common MLC.  In the case of an air layer sub-
C stitute the U value for each layer.
      SUBROUTINE EMKAMLD(ITRU,ITRC,LASCI,IFA,ATR,IER)
      INCLUDE '/usr/esru/include/building.h'
      COMMON/OUTIN/IUOUT,IUIN
      COMMON/CONDB/LFCON,IFCON,LFMUL,IFMUL,IBASCI
      COMMON/MLC/NMLC,DESC(MMLC),DTHK(MMLC,ME),IPR(MMLC,ME),
     &           LAYERS(MMLC),DRAIR(MMLC,MGP,4)

.ES
.MT 
.PP 
Standard within all of the file reading facilities is an English language 
and/or tabular report on the data read in.  This is available at three
levels; none, minimal and verbose.  In many cases, the terse number 
combinations found in the file are decoded into an English equivalent.
.sp 1
.SH
/usr/esru/esp/src/esrucom/esystem.f
.PP
The file /usr/esru/esp/src/esrucom/esystem.f contains the following Subroutines:
.mT
.TS
l l.
ERSYS	Reads a commented system configuration file.
SITEINFO	English description of the site information.
CONXINFO	English description of the inter-connection common blocks.
EZCTLI	Zeroises all control data in common BCTL and CCTL.
SURADJ	Returns information about connection for a particular surf.
.TE
.MT 
.PP
The interface to each of the routines is listed below:
.ML

C ******************** ERSYS *******************************************
C ERSYS reads a system configuration file which defines the building
C and/or plant definition for simulation with or without comments and with
C several levels of verbosity in reporting.  
C If MODE='NONE' ERSYS fills the common block with file names only. 
C If MODE='GEOM' then all geometry files are scanned, 

C EN is a character flag: "E" "e" English parsing of connections.
C                         "N" "n" number reporting of connections.
      SUBROUTINE ERSYS(LFCFG,IFCFG,IAPROB,IR,MODE,EN,ITRC,ITRU,IER)


C *** SITEINFO **********************************************************
C SITEINFO provides an English description of the site information in
C common blocks C4, C5, C5R, PREC8 which are filled by reading the
C system configuration file.
      SUBROUTINE SITEINFO(ITRU)

C *** CONXINFO **********************************************************
C CONXINFO returns an English description in CXSTR of the inter-connection 
C information in common blocks  which are filled by reading the
C system configuration file. If ICF=-1 the string is composed of numbers
C within a table, if ICF=1 then display with zone and surface names 
C if possible. If ICON=0 then generate a text heading.
      SUBROUTINE CONXINFO(ITRU,ICF,ICON,CXSTR)
      INCLUDE '/usr/esru/include/epara.h'
      COMMON/PREC8/SLAT,SLON,ZNAME(MCOM)
      COMMON/C3/IC1(MCON),IE1(MCON),ICT(MCON),IC2(MCON),IE2(MCON)
      COMMON/G5/SNAME(MCOM,MS),SOTF(MS),SMLCN(MS),SVFC(MS),SOTHER(MS)
      CHARACTER CXSTR*78,SST1*12,ZST1*15,SST2*12,ZST2*15
      CHARACTER ZNAME*15,SOTHER*15,SNAME*12,SMLCN*12,SVFC*4,SOTF*4


C ******************** SURADJ ********************
C SURADJ is a updated version of MOFADJ which returns information about
C connections between surfaces.  Given IZONE & ISFN (the zone and
C surface under consideration) it returns the following information:
C IE identifies the zone coupling index:

C IE=0 : external and both TMP=0.0/ISC=0
C IE=1 : internal to identical environment, both TMP=0.0/ISC=0
C IE=2 : internal to environment with temperature TMP.
C IE=3 : internal where IZC,ISC defines other zone & surface.
C IE=4 : ground connection, both TMP=0.0/ISC=0
C IE=5 : adabetic, both TMP=0.0/ISC=0
C DESCR adescriptive string 25 characters wide
      SUBROUTINE SURADJ(IZONE,ISFN,IE,TMP,IZC,ISC,DESCR)

.ES
.MT 
.SH
/usr/esru/esp/src/esrucom/eleakage.f
.PP
The file /usr/esru/esp/src/esrucom/eleakage.f contains the following:
.mT
.TS
l l.
EMFREAD	Reads a commented leakage distribution/ Fluid flow problem file.
EMFCDAT	Fills fluid flow comp description arrays (called before EMFREAD).
.TE
.MT 
.PP
The interface to each of the routines is listed below:
.ML

C *** EMFREAD ***********************************************************
C EMFREAD reads a leakage distribution/ Fluid flow problem file.
C Reads allow comments but no input data checks are performed.
      SUBROUTINE EMFREAD(IFPRB,IR,ITRC,ITRU,IER)

C EMFCDAT of ESPmfs #####################################################
C EMFCDAT Fills valid fluid flow component type arrays
      SUBROUTINE EMFCDAT

.ES
.MT 
.SH
/usr/esru/esp/src/esrucom/econtrol.f
.PP
The file /usr/esru/esp/src/esrucom/econtrol.f contains the following:
.mT
.TS
l l.
EZCTLR	Reads the configuration control strategy file.
EZCTLI	Zeroises all control data in common BCTL and CCTL.
EVCNTRL	T{
Decodes & returns string describing a control file sensors,
actuators, control types, control laws.
T}
.TE
.MT
.PP
The interface to each of the routines is listed below:
.ML

C ******************** EZCTLR ********************
C EZCTLR: reads the configuration control strategy file.
      SUBROUTINE EZCTLR(IUNIT,IR,ITRC,ITRU,IER)

c ******************** EZCTLI ********************
c EZCTLI: Zeroises all control data in common BCTL and CCTL.
      SUBROUTINE EZCTLI

c ******************** EVCNTRL ****************************************
c EVCNTRL: Decodes and returns a string (72 char)describing a config
C control file sensors, actuator, control types, control laws.
      SUBROUTINE EVCNTRL(II,JJ,KK,WHICH,SSTR)

.ES
.MT
.SH
/usr/esru/esp/src/esrucom/esru_misc.f
.PP
This is a collection of facilities which support the reading and
creation of ESP compatible files implemented as Fortran Subroutines.  
ESZONE and ERZONE are used by the image creation facilities to save
and recover the state of the current zone being edited so that the 
common blocks can be used by other facilities.
.PP
Esru_misc.f contains the following Subroutines:
.mT
.TS
l l.
ERUTIL	Reads a commented zone utility file.
EMKUTIL	Creates a zone utility file.
EGOMST	T{
Reads site obstruction data as ASCII strings, with or without
range checking and printed summary
T}
ETILE	Writes transformed doors & windows to viewer file.
EMKVIEW	Constructs a 'viewer' format file.
EPLNEQN	finds the equation EQN to a plane in PNTLST format
ETRANSW	transforms default Windows or doors into global co-ordinates.
ESZONE	T{
Saves the current contents of common blocks G1 G2 G3 G4 G5
into SG1 SG2 SG3 SG4 SG5.
T}
ERZONE	T{
Recovers the saved contents of common blocks G1 G2 G3 G4 G5
from SG1 SG2 SG3 SG4 SG5.
T}
EASKGEOF	T{
Asks for zone number & geometry file name. If a configuration
file has been read present a list of zone names.
T}
EASKSUR	presents a list of surfaces in a zone IZONE.
.TE 
.MT
.PP
The interface to each of the routines is listed below:
.ML

C ************* ERUTIL *************************************************
C ERUTIL Reads a zone utility file and fills the common blocks INDICS
C and UDESC. ITRU unit number for user output, IER=0 OK. 
      SUBROUTINE ERUTIL(ITRC,ITRU,IFIL,LFIL,IZ,IER)

C ************* EMKUTIL *************************************************
C MKUTIL Creates a zone utility file based on the common blocks  INDICS
C and UDESC. ITRU unit number for user output, IER=0 OK. 
      SUBROUTINE EMKUTIL(ITRC,ITRU,IFIL,LFIL,IZ,ATR,IER)

C ************** EGOMST ************************
C EGOMST:  Reads site obstruction data as ASCII strings, with or without
C range checking and printed summary. An obstruction block name (up to
C 12 characters) may be included as an option and is returned via BLKNAME. 
      SUBROUTINE EGOMST(IUNIT,LOBS,IR,ITRC,ITRU,IER,XLAT,XLON,NOX,NOZ,
     &           NGX,NGZ,BLKNAME)
      INCLUDE '/usr/esru/include/building.h'
      COMMON/OUTIN/IUOUT,IUIN
      COMMON/GS5/NB,XO(MB),YO(MB),ZO(MB),DX(MB),DY(MB),DZ(MB),ANG(MB)
      CHARACTER*72 LOBS

C ********************* ETILE *****************************************
C ETILE transforms default doors and windows to world coordinates
C and outputs to the viewer format file on unit IUO.
      SUBROUTINE ETILE(ITRC,ITRU,IUO,IER)
      INCLUDE '/usr/esru/include/building.h'

C ********************* EMKVIEW *****************************************
C EMKVIEW constructs a 'viewer' format file. The trace level defines whether
C information about the zones is displayed or not.  First get the
C name of the viewer file, open it (querry user if existing before
C overwriting it).
      SUBROUTINE EMKVIEW(ITRC,ITRU,LFIL,IUO,CFGOK,IER)

C ******************** EPLNEQN *****************************************
C EPLNEQN finds the equation EQN to a plane containing a polygon which
C is defined as a set of X Y Z verticies tracing in order the edges of 
C the polygon (this information is contained in PNTLST).  The plane is
C the best fit from PNTLST and its equation is in the form:
C       A*X + B*Y + C*Z = D
C where the vector (A<B<C) is the unit normal vecotr to the plane.
C This normal will be in the direction given by the right hand rotation
C rule MORS is the handedness of the axes defining the polygon
C verticies.  For solid bodies whose faces have been described anti-
C clockwise when viewed from the outside the unit normals within this
C routine will point outwards from the body.
      SUBROUTINE EPLNEQN(ITRC,ITRU,MORS,ISTA,PNTLST,CG,EQN,IERR)
      INCLUDE 'ESPMFS.PAR'

C ************** EGOMST ************************
C EGOMST:  Reads site obstruction data as ASCII strings, with or without
C range checking and printed summary. An obstruction block name (up to
C 12 characters) may be included as an option and is returned via BLKNAME.
C Any characters following a # will be treated as comments. 
      SUBROUTINE EGOMST(IUNIT,LOBS,IR,ITRC,ITRU,IER,XLAT,XLON,
     &           NOX,NOZ,NGX,NGZ,BLKNAME)

C ********************* ETILE *****************************************
C ETILE transforms default doors and windows to world coordinates
C and outputs to the viewer format file on unit IUO.
      SUBROUTINE ETILE(ITRC,ITRU,IUO,IER)

C ********************* ETRANSW ********************
C ETRANSW transforms default Windows or doors into global co-ordinates.
C OFFSET is the offset from the polygon (0.02 typically).
C N is the number of surface vertices, X,Y,Z are the surface vertex arrays,
C DX,DZ are the window offsets, DDX,DDZ are the window width & hieght,
C XXW,YYW,ZZW are the transformed window coords in surface coord system.
      SUBROUTINE ETRANSW(ITRC,ITRU,N,X,Y,Z,OFFSET,DX,DZ,DDX,DDZ,
     &                   XXW,YYW,ZZW)


C ************* ESCZONE *************************************************
C ESZONE makes a copy of the current contents of common blocks G1 G2 G3
C G4 G5 into SG1 SG2 SG3 SG4 SG5.
      SUBROUTINE ESCZONE(ICOMP)
      INCLUDE '/usr/esru/include/building.h'
      COMMON/OUTIN/IUOUT,IUIN
      COMMON/G0/CTYPE
      COMMON/SG0/CTYPE1
      COMMON/G1/X(MTV),Y(MTV),Z(MTV),NSUR,JVN(MS,MV),NVER(MS),NTV
      COMMON/SG1/X1(MTV),Y1(MTV),Z1(MTV),NSUR1,JVN1(MS,MV),NVER1(MS),
     &           NTV1
      COMMON/G2/NGL(MS),XGL(MS,MG),ZGL(MS,MG),DXGL(MS,MG),DZGL(MS,MG)
      COMMON/SG2/NGL1(MS),XGL1(MS,MG),ZGL1(MS,MG),DXGL1(MS,MG),
     &           DZGL1(MS,MG)
      COMMON/G3/NDO(MS),XDO(MS,MD),DXDO(MS,MD),DZDO(MS,MD)
      COMMON/SG3/NDO1(MS),XDO1(MS,MD),DXDO1(MS,MD),DZDO1(MS,MD)
      COMMON/G4/NDP(MCOM),IDPN(MCOM,3)
      COMMON/SG4/NDP1,IDPN1(3)
      COMMON/G5/SNAME(MCOM,MS),SOTF(MS),SMLCN(MS),SVFC(MS),SOTHER(MS)
      COMMON/SG5/SNAME1(MS),SOTF1(MS),SMLCN1(MS),SVFC1(MS),SOTHER1(MS)

      CHARACTER CTYPE*3,SOTHER*15,SNAME*12,SMLCN*12
      CHARACTER CTYPE1*3,SOTHER1*15,SNAME1*12,SMLCN1*12
      CHARACTER SVFC*4,SOTF*4,SVFC1*4,SOTF1*4

C ************* ERCZONE *************************************************
C ERZONE recovers the saved contents of common blocks G1 G2 G3
C G4 G5 from SG1 SG2 SG3 SG4 SG5.
      SUBROUTINE ERCZONE(ICOMP)
      INCLUDE '/usr/esru/include/building.h'

      COMMON/OUTIN/IUOUT,IUIN
      COMMON/G0/CTYPE
      COMMON/SG0/CTYPE1
      COMMON/G1/X(MTV),Y(MTV),Z(MTV),NSUR,JVN(MS,MV),NVER(MS),NTV
      COMMON/SG1/X1(MTV),Y1(MTV),Z1(MTV),NSUR1,JVN1(MS,MV),NVER1(MS),
     &           NTV1
      COMMON/G2/NGL(MS),XGL(MS,MG),ZGL(MS,MG),DXGL(MS,MG),DZGL(MS,MG)
      COMMON/SG2/NGL1(MS),XGL1(MS,MG),ZGL1(MS,MG),DXGL1(MS,MG),
     &           DZGL1(MS,MG)
      COMMON/G3/NDO(MS),XDO(MS,MD),DXDO(MS,MD),DZDO(MS,MD)
      COMMON/SG3/NDO1(MS),XDO1(MS,MD),DXDO1(MS,MD),DZDO1(MS,MD)
      COMMON/G4/NDP(MCOM),IDPN(MCOM,3)
      COMMON/SG4/NDP1,IDPN1(3)
      COMMON/G5/SNAME(MCOM,MS),SOTF(MS),SMLCN(MS),SVFC(MS),SOTHER(MS)
      COMMON/SG5/SNAME1(MS),SOTF1(MS),SMLCN1(MS),SVFC1(MS),SOTHER1(MS)

      CHARACTER CTYPE*3,SOTHER*15,SNAME*12,SMLCN*12
      CHARACTER CTYPE1*3,SOTHER1*15,SNAME1*12,SMLCN1*12
      CHARACTER SVFC*4,SOTF*4,SVFC1*4,SOTF1*4

C *** EASKGEOF **********************************************************
C EASKGEOF asks for the zone number and geometry file name. If the
C configuration file has been read present a list of zone names,
C otherwise ask for a specific zone number and file name.
C If IZONE has been passed as a negative number then add an item at the
C end allowing a new zone to be created.
      SUBROUTINE EASKGEOF(ITRU,CFGOK,IZONE,LFILG,IER)
      INCLUDE '/usr/esru/include/building.h'

C *** EASKSUR **********************************************************
C EASKSUR presents a list of surfaces in a zone IZONE returning the
C index IS. NHELP is the number of help lines available. It assumes
C that a geometry file has been read in.
      SUBROUTINE EASKSUR(ITRU,IZONE,IS,IER,NHELP)
      INCLUDE '/usr/esru/include/building.h'

.ES
.MT
.SH
/usr/esru/esp/src/esrucom/e3dviews.f
.PP
The file e3dviews.f is a collection of support facilities for 
producing 3d images of configurations, implemented as Fortran 
Functions and Subroutines and also making use of C code in wwlib.c.
LENS, MATPOL, CLIPFL, PLNBX, CUTPOL have been revised from code
initially supplied by Mike Grant.
The file /usr/esru/esp/src/esrucom/e3dviews.f contains the following:
.mT
.TS
l l.
LENS	Initialise viewing parameters
MATPOL	Transforms polygon described in 3dv format.
CLIPFL	T{
Takes a polygon description and returns clipping flags based
on viewing frustrum.
T}
PLNBX	Checks a polygon against a clipping plane.
CUTPOL	Cuts a polygon within a viewing frustrum.
VERTLBL	T{
Displays a vertex label based on the coords passed and the
vertex number.
T}
ORIGES	returns a surface/body indicating the site origin.
SITE2D	T{
Returns the 2D viewing coords of the current site extremes
found in common block RAY5.
T}
BNDOBJ	Does range checking on objects to be displayed.
.TE
.MT 
.PP
The interface to each of the routines is listed below:
.ML

C--------- LENS --------------------------------------------------------
C     LENS - initialise viewing parameters
      SUBROUTINE LENS(ITRU,IER)
      INCLUDE '/usr/esru/include/prj3dv.h'

C----------------------------------------------------------
C MATPOL transforms polygon (defined by arrays AX,AY,AZ) 
C where:
C NA is the no of polygons on surface, NAP is the number of
C vertices on surface, IAPNT points to the first vertex of the
C polygon, IANTX is the index of the next point.  Structured
C so that a negative vertex number marks the beginning of a
C hole -
C into polygon B represented by NB,NBP,IBPNT,BX,BY,BZ... 
C
      SUBROUTINE  MATPOL(NA,NAP,IAPNT,AX,AY,AZ,IANXT,TMAT,IFREV,
     &                   SBBOX,NB,NBP,IBPNT,BX,BY,BZ,IBNXT,IERR)
	parameter( MIP = 10, MPL = 200)

C-----------CLIPFL -----------------------------------------------------
C CLIPFL takes a polygon description and returns clipping flags based
C on viewing frustrum where ISTAT:
C     ISTAT =  0 ALL OF THE POLYGON IS WITHIN THE VIEW FRUSTRUM
C     ISTAT =  1 ALL THE POLYGON IS OUTSIDE THE VIEW FRUSTRUM
C     ISTAT = -1 THE POLYGON STRADDLES THE VIEW FRUSTRUM

      SUBROUTINE CLIPFL(NAP,AX,AY,AZ,ISTAT)

C-------- PLNBX --------------------------------------------------------
      SUBROUTINE  PLNBX(NA,AX,AY,AZ,EQN,IFBOX)
      INCLUDE '/usr/esru/include/prj3dv.h'
      DIMENSION  AX(MPL),AY(MPL),AZ(MPL),EQN(4)

C------- CUTPOL ------------------------------------------------------
C CUTPOL: cuts a polygon within a viewing frustrum.
      SUBROUTINE  CUTPOL(NA,NAP,IAPNT,AX,AY,AZ,IANXT,ISTAT)
      INCLUDE '/usr/esru/include/prj3dv.h'
      DIMENSION  IAPNT(MIP),AX(MPL),AY(MPL),AZ(MPL),IANXT(MPL)
      DIMENSION  EQNP(4),ADST(100)

C-----VERTLBL -----------------------------------------------------------
C VERTLBL writes out a vertex label based on the coords passed and the
C vertex number.
      SUBROUTINE VERTLBL(ITRU,ix,iy,IP,ier)
      COMMON/GFONT/IFS,ITFS
      COMMON/RAY2/IDISP,IBND,IEPT,IZNAM,ISNM,IVNO,ISTO,ISNOR,IREFR

C-----ORIGESP -----------------------------------------------------------
C ORIGESP returns a surface/body indicating the site origin. It is 1 
C metre in each direction.
      SUBROUTINE ORIGESP(ITRU,ier)
      include '/usr/esru/include/building.h'
      COMMON/G1/X(MTV),Y(MTV),Z(MTV),NSUR,JVN(MS,MV),NVER(MS),NTV

C---- SITE2D -----------------------------------------------------------
C SITE2D Returns the 2D viewing coords of the current site extremes
C found in common block RAY5.
      SUBROUTINE SITE2D(ITRU,SXMX,SXMN,SYMX,SYMN,ier)
      INCLUDE '/usr/esru/include/building.h'
      include '/usr/esru/include/prj3dv.h'
      COMMON/RAY5/ZCOG(MCOM,3),XMN,YMN,ZMN,XMX,YMX,ZMX

C---- BNDOBJ -----------------------------------------------------
C BNDOBJ: Does range checking on objects to be displayed.
      SUBROUTINE BNDOBJ(ITRC,ITRU,INPIC,IVALS,IFOC,IER)
      include '/usr/esru/include/building.h'
      INCLUDE '/usr/esru/include/prj3dv.h'
      DIMENSION IVALS(MCOM)

.ES
.MT
.bp
.SH
Include files
.PP
The following is a listing of the parameter files which are included in
several of common files as well as the libraries.
.ML

C epara.h
C The following is a parameter file used by ESRU library libesru.a 
C and libesru.nb.a.

C Configuration parameters.
      integer BUILD, PLANT, BLDPLN, USED, UNUSED
      PARAMETER (BUILD=1, PLANT=2, BLDPLN=3, USED=1, UNUSED=0)
      integer CKRANGE,NORANGE
      PARAMETER (CKRANGE=1,NORANGE=0)

C Parameters hide values for file format types.
      integer GRTOOL,BINARY,ASCII,UNKNOWN,ITEMDB
      PARAMETER (ITEMDB=4,GRTOOL=3,BINARY=2,ASCII=1,UNKNOWN=0)

C For page control of the menus.
      integer NONE,CREATE,REDRAW
      PARAMETER (NONE=0,CREATE=1,REDRAW=-1)
      integer FIRST,PREV,HALFPRV,HALFNXT,NEXT,LAST
      PARAMETER (FIRST=2,PREV=3,HALFPRV=4,HALFNXT=5,NEXT=6,LAST=7)
      integer INSERT,DELETE,COPY,IMPORT,EXPORT,EDIT,VIEW,LIST
      PARAMETER (INSERT=10,DELETE=11,COPY=12,IMPORT=13,EXPORT=14)
      PARAMETER (EDIT=20,VIEW=21,LIST=22)

C Selection within the displayed list or menu.
      integer INSIDE,OUTSIDE
      PARAMETER (INSIDE=1,OUTSIDE=0)

C Parameters previously in fwwinfo.h.
      integer LNMVAB, LNDRAB, LNMVRL, LNDRRL
      parameter (LNMVAB=1, LNDRAB=0, LNMVRL=3, LNDRRL=2)


C raytrack.h
C---------------------------------------------------------------
C --- Changed by Sars/Pernot, Working Group FAGO-TNO-TUE, april 1988
C --- Updated to work with building.h and esru libraries July 1991.

C Parameters defining the size of the data structures in DIM

C MSUR  =  Max. number of surfaces (may be > MS in building.h)
C MGC   =  Max. size of grid cell list
C MPATCH=  Max. number of patches in ring on a bubble

      PARAMETER  (MSUR=50, MGC=800,MPATCH=200)

      PARAMETER  (Cgfact=1,Cnpatch=100,Bgfact=2,Bnpatch=50)

C Cgfact  = Default value for griddiv. with CUBE
C Cnpatch = Default value for patchdiv. with CUBE
C Bgfact  = Default value for griddiv. with BODY
C Bnpatch = Default value for patchdiv. with BODY
C------------------------------------------------------------

      COMMON /FIL/IFIL, IOFIL, IFPOL, IFCEL
      COMMON /TOTALS/ NSURF, NGRID, NTRPOL, NTRCEL

C NSURF  -  total number of surfaces
C NGRID  -  number of grid cells
C NTRPOL -  total number of records in polygon file
C NTRCEL -  total number of records in cell file

      COMMON /PLANE/ PEQN(4,MSUR), PCG(3,MSUR), BOX(3,2,MSUR),
     &               STMAT(4,4,MSUR), SRMAT(4,4,MSUR)

C PEQN   -  plane equation of surface
C PCG    -  centroid of surface

      COMMON /CELLS/ NCELL(MSUR), NCPT(MSUR), GFACT

C NCELL  -  number of grid cells in surface
C NCPT   -  pointer to first cell in cell list

      COMMON /SURPNT/ ISPNT(6,MSUR), GAREA(MSUR), EMISI(MSUR)

C ISPNT(1,)  -  pointer to polygon in polygon file
C ISPNT(2,)  -  pointer to transf. polygon in polygon file
C ISPNT(3,)  -  pointer to transformation matrix
C ISPNT(4,)  -  pointer to reverse transf. matrix
C ISPNT(5,)  -  pointer to bound box polygon in polygon file

      COMMON /FORMF/ FF(MSUR,MSUR), FFS

C FF     -  surface form factor matrix
C FFS    -  solid angle of each cell


      COMMON /VISIB/ IVIS(MSUR,MSUR), ARECT(MSUR,MSUR)

C IVIS   -  surface visibility matrix
C ARECT  -  surface rectangle matrix (filled in checkrec.f)

      COMMON /GRIDS/ IDG(MGC), XC(MGC), YC(MGC), ZC(MGC),
     &               XLUM(MGC), IGPNT(MGC)

C IDG   -  surface identity ie. parent surface
C XC    -  x co -ordinate of cell centre
C YC    -  y co-ordinate of cell centre
C ZC    -  z co-ordinate of cell centre

      COMMON /XXX/  XMIN(MSUR,MSUR), XMAX(MSUR,MSUR)
      COMMON /YYY/  YMIN(MSUR,MSUR), YMAX(MSUR,MSUR)
      COMMON /ZZZ/  ZMIN(MSUR,MSUR), ZMAX(MSUR,MSUR)

      COMMON /BUBXYZ1/ NPATCH, NBUB
      COMMON /BUBXYZ2/ XBB(11000), YBB(11000), ZBB(11000)

C NPATCH  - Number of patches in one patch-ring
C           There are NPATCH/4 rings on a bubble
C NBUB    - Number of patches on a bubble
C           (=1/4(NPATCH**2)

      REAL*4  PEQN, PCG, XC, YC, ZC
      INTEGER*2  IGPNT
      INTEGER*2  NCPT, ISPNT, GFACT
      INTEGER*2  NCELL, IVIS, ARECT, IDG


C prj3dv.h
C------------------------------------------------------------
C 3dv  -  PARAMETERS AND COMMON BLOCKS

C MSUR  =  Max. number of surfaces in view
C MMRT  =  Max. number of surface in a MRT type zone (should match
C          MSUR in raytrack.h).
C MVER  =  Max. number of vertices in data structure
C MIP   =  Max. number of polygons in polygon structure
C MPL   =  Max. number of vertices in polygon structure
C MAXL  =  Max. number of links in stack
C MAXS  =  Max. number of divisions

      PARAMETER  (MSUR = 400, MVER = (MSUR*6))
      PARAMETER  (MMRT = 50)
      PARAMETER  (MIP = 10,  MPL = 200 )

C Model parameters and file totals
      COMMON/TOTALS/NSURF,NBOD

C surface plane equations.
      COMMON/PLANE/PEQN(4,MSUR)

C visibility extents
      COMMON/VISIB/XMIN(MSUR),XMAX(MSUR),YMIN(MSUR),YMAX(MSUR),
     &             ZMIN(MSUR),ZMAX(MSUR)

C Viewing transformation matrices
C TEMAT is transform to eye. 
      COMMON/DRWMAT/TEMAT(4,4), TSMAT(4,4),
     &              ETMMAT(4,4), ETSMAT(4,4), TBOX(3,2)

C View frustrum clip flags
      COMMON/CLIP/TPCLIP(3),IFCLIP(6),CLIPLN(6,4)

      COMMON/IMAGE/IMT,EYEM(3),VIEWM(3),HITH,YON,ANG,HANG,WIDE

.ES
.MT
.bp
.SH
Common blocks
.PP
Many of the library functions make use of common blocks which are
shared with application programs.  As such the items in the common
blocks and the parameters which they use must be initialised via
a Fortran BLOCKDATA ZERO facility.  This is included in the file
\fIesrublk.f\fR as well as the beginning of each of the files in
the /usr/esru/esp/src/esrucom directory - although in the latter case some have
been commented out.
The files are listed below for reference.
.ML

esrublk.f
C The following is a block data for libesru.a and libesru.nb.a commons.
C Used in applications written by staff of the Energy Simulation 
C Research Unit of the University of Strathclyde.
C Version 13 August 1991.
C
      BLOCK DATA EZERO

      COMMON/OUTIN/IUOUT,IUIN
      COMMON/SHOUT/ICOUT

C Useful strings and label text.
      COMMON/EHELP/HELP(10) 

C Common for screen control.
      COMMON/SPAD/MMOD,LIMIT,LIMTTY

C Commons for paged menus, PMENUSV is to pop in a definition for
C later recovery.
      COMMON/PMENU/MHEAD,MCTL,MIFULL,MFULL,IST,ILEN,IPM,MPM,IPFLG
      COMMON/PMENUSV/MHEAD1,MCTL1,MIFUL1,MFUL1,IST1,ILEN1,IPM1,
     &               MPM1,IPFLG1

      CHARACTER*72 HELP

      DATA ICOUT/0/,IUOUT/6/,IUIN/5/
      DATA MMOD/-1/,LIMIT/0/,LIMTTY/60/
      DATA MHEAD/0/,MCTL/0/,MIFULL/0/,MFULL/0/,IST/1/
      DATA ILEN/0/,IPM/1/,MPM/1/,IPFLG/0/
      DATA MHEAD1/0/,MCTL1/0/,MIFUL1/0/,MFUL1/0/,IST1/1/
      DATA ILEN1/0/,IPM1/1/,MPM1/1/,IPFLG1/0/

      DATA HELP/10*' '/

      END

C The following is a summary of the commons used in the ESP suite of
C programs written by staff of the Energy Simulation Research Unit of 
C the University of Strathclyde.
C Version 10 July 1991.
C
      BLOCK DATA BZERO
      INCLUDE '/usr/esru/include/build.h'
      INCLUDE '/usr/esru/include/epara.h'

C Geometry file common blocks.
      COMMON/G0/CTYPE
      COMMON/G1/X(MTV),Y(MTV),Z(MTV),NSUR,JVN(MS,MV),NVER(MS),NTV
      COMMON/G2/NGL(MS),XGL(MS,MG),ZGL(MS,MG),DXGL(MS,MG),DZGL(MS,MG)
      COMMON/G3/NDO(MS),XDO(MS,MD),DXDO(MS,MD),DZDO(MS,MD)
      COMMON/G4/NDP(MCOM),IDPN(MCOM,3)
      COMMON/G5/SNAME(MCOM,MS),SOTF(MS), SMLCN(MS), SVFC(MS),SOTHER(MS)

C For obstruction blocks:
      COMMON/GS5/NB,XO(MB),YO(MB),ZO(MB),DX(MB),DY(MB),DZ(MB),ANG(MB)

C Multilayer constructions.
      COMMON/MLC/NMLC,DESC(MMLC),DTHK(MMLC,ME),IPR(MMLC,ME),LAYERS(MMLC)

C For zone construction files.
      COMMON/T1/NE(MS),NAIRG(MS),IPAIRG(MS,MGP),RAIRG(MS,MGP)
      COMMON/T2/CON(MS,ME),DEN(MS,ME),SHT(MS,ME),THK(MS,ME)

      COMMON/T3/GTR(MS,MG,5),GHGF(MS,MG,5),GU(MS,MG),DU(MS,MD),
     &          GVTR(MS,MG),GMAINT(MS,MG)
      COMMON/T3ADD/IGUMOD(MS,MG)
      COMMON/T4/EMISI(MS),EMISE(MS),ABSI(MS),ABSE(MS)

C For configuration/system info.
      COMMON/C1/NCOMP,NCON
      COMMON/C2/LSNAM,NCCODE(MCOM),LPROJ(MCOM),LGEOM(MCOM),
     &          LSHAD(MCOM),LTHRM(MCOM),INDUTL(MCOM),LUTIL(MCOM)
      COMMON/C3/IC1(MCON),IE1(MCON),ICT(MCON),IC2(MCON),IE2(MCON)
      COMMON/C4/XLAT,XLON
      COMMON/C5/IXPOS,GREF
      COMMON/C5R/SKYR,GRDR,BLDR
      COMMON/C6/INDCFG
      COMMON/C14/UGRDTP(12,MGRDP)
      COMMON/PREC8/SLAT,SLON,ZNAME(MCOM)

C Commons for control.
      COMMON/CCTLNM/CNAME,LCTLF
      COMMON/CCTL/ICASCF(MCOM)
      COMMON/BCTLNM/BNAME
      COMMON/BCTL/NCF,IBSN(MCF,4),IBAN(MCF,3),NBCDT(MCF),
     &            IBCDV(MCF,MBCDT,2),NBCDP(MCF,MBCDT),
     &            TBCPS(MCF,MBCDT,MBCDP),IBCTYP(MCF,MBCDT,MBCDP),
     &            IBCLAW(MCF,MBCDT,MBCDP),BMISCD(MCF,MBCDT,MBCDP,MISC)

C Air flow networks.
      COMMON/AFN/IAIRN,LAPROB,LAPRES,LAFRES,ICAAS(MCOM)

      CHARACTER CTYPE*3,SNAME*12,SOTF*4,SVFC*4,SOTHER*15,SMLCN*12
      CHARACTER DESC*40,ZNAME*15
      CHARACTER CNAME*12,BNAME*12
      CHARACTER*72 LSNAM,LPROJ,LGEOM,LSHAD,LTHRM,LUTIL
      CHARACTER*72 LAPROB,LAPRES,LAFRES,LCTLF

C Parameters for multi-dimensioned variables in data statements.
      PARAMETER (JMSMV=MS*MV)      
      PARAMETER (JMSMG=MS*MG)      
      PARAMETER (JMSMD=MS*MD)      
      PARAMETER (JMCOM3=MCOM*3)      
      PARAMETER (JMMLCME=MMLC*ME)      
      PARAMETER (JMSMGP=MS*MGP)      
      PARAMETER (JMSME=MS*ME)      
      PARAMETER (JMSMG5=MS*MG*5)      
      PARAMETER (JMGRDP=MGRDP*12)      
      PARAMETER (JMCOMMS=MCOM*MS) 
      PARAMETER (JMCF3=MCF*3) 
      PARAMETER (JMCF4=MCF*4) 
      PARAMETER (JMCFT2=MCF*MBCDT*2)
      PARAMETER (JMCFT=MCF*MBCDT)
      PARAMETER (JMCFTP=MCF*MBCDT*MBCDP) 
      PARAMETER (JMCFTPM=MCF*MBCDT*MBCDP*MISC)

      DATA CTYPE/'REC'/
      DATA X/MTV*0.0/,Y/MTV*0.0/,Z/MTV*0.0/,NSUR/0/,JVN/JMSMV*0/
      DATA NVER/MS*0/,NTV/0/
      DATA NGL/MS*0/,XGL/JMSMG*0.0/,ZGL/JMSMG*0.0/,DXGL/JMSMG*0.0/
      DATA DZGL/JMSMG*0.0/
      DATA NDO/MS*0/,XDO/JMSMD*0.0/,DXDO/JMSMD*0.0/,DZDO/JMSMD*0.0/
      DATA NDP/MCOM*0/,IDPN/JMCOM3*0/
      DATA SNAME/JMCOMMS*' '/,SOTF/MS*' '/,SVFC/MS*' '/
      DATA SOTHER/MS*' '/,SMLCN/MS*' '/
      DATA NB/0/,XO/MB*0/,YO/MB*0/,ZO/MB*0/,DX/MB*0/,DY/MB*0/
      DATA DZ/MB*0/,ANG/MB*0/
      DATA NMLC/0/
      DATA DESC/MMLC*' '/,DTHK/JMGRDP*0/,IPR/JMGRDP*0/
      DATA LAYERS/MMLC*0/

      DATA NE/MS*0/,NAIRG/MS*0/,IPAIRG/JMSMGP*0/
      DATA RAIRG/JMSMGP*0.0/
      DATA CON/JMSME*0.0/,DEN/JMSME*0.0/,SHT/JMSME*0.0/
      DATA THK/JMSME*0.0/

      DATA GTR/JMSMG5*0.0/,GHGF/JMSMG5*0.0/,GU/JMSMG*0.0/
      DATA DU/JMSMD*0.0/,GVTR/JMSMG*0.0/,GMAINT/JMSMG*0.0/
      DATA IGUMOD/JMSMG*0.0/
      DATA EMISI/MS*0.0/,EMISE/MS*0.0/,ABSI/MS*0.0/,ABSE/MS*0.0/

      DATA NCOMP/0/,NCON/0/
      DATA LSNAM/' '/,LPROJ/MCOM*' '/,LGEOM/MCOM*' '/
      DATA LSHAD/MCOM*' '/,LTHRM/MCOM*' '/,LUTIL/MCOM*' '/
      DATA IAIRN/0/,LAPROB/' '/,LAPRES/' '/,LAFRES/' '/,ICAAS/MCOM*0/
      DATA IC1/MCON*0/,IE1/MCON*0/,ICT/MCON*0/
      DATA IC2/MCON*0/,IE2/MCON*0/
      DATA CNAME/' '/,LCTLF/' '/,BNAME/' '/
      DATA ICASCF/MCOM*0/
      DATA NCF/0/,IBSN/JMCF4*0/,IBAN/JMCF3*0/,NBCDT/MCF*0/
      DATA IBCDV/JMCFT2*0/,NBCDP/JMCFT*0/TBCPS/JMCFTP*0.0/
      DATA IBCTYP/JMCFTP*0/,IBCLAW/JMCFTP*0/,BMISCD/JMCFTPM*0.0/

      DATA XLAT/0.0/,XLON/0.0/
      DATA IXPOS/0/,GREF/0.0/
      DATA SKYR/0.0/,GRDR/0.0/,BLDR/0.0/
      DATA INDCFG/0/
      DATA UGRDTP/120*0.0/
      DATA SLAT/0.0/,SLON/0.0/,ZNAME/MCOM*' '/

      END

.ES
.MT
.bp
.SH
Example files
.PP
The following is an example of the format of an annotated geometry
file built automatically from a standard ESP geometry file.  If not found
the library assigns default zone and surface names and sets surface
attributes to default values.  The user is free to add or subtract any
of the comments.  Since the zone name, surface names and attributes
are picked up by the various reporting facilities, the user is encourage
to make use of this documentation facility.
.ML

# geometry of Zone-1 defined by file 
# zz1.geo
# type   zone name
GEN  Zone-1         
# vertices, surfaces, rotation angle 
       14,      10,   0.000
#  X co-ord, Y co-ord, Z co-ord 
      0.000     0.000     0.000  # vert  1
      8.800     0.000     0.000  # vert  2
      8.800     1.000     0.000  # vert  3
      6.200     3.600     0.000  # vert  4
      4.400     5.400     0.000  # vert  5
      2.600     3.600     0.000  # vert  6
      0.000     1.000     0.000  # vert  7
      0.000     0.000     2.236  # vert  8
      8.800     0.000     2.236  # vert  9
      8.800     1.000     2.500  # vert 10
      6.200     3.600     2.500  # vert 11
      4.400     5.400     2.500  # vert 12
      2.600     3.600     2.500  # vert 13
      0.000     1.000     2.500  # vert 14
# number of vert followed by list of associated vert
   4,  1,  2,  9,  8,
   4,  2,  3, 10,  9,
   4,  3,  4, 11, 10,
   4,  4,  5, 12, 11,
   4,  5,  6, 13, 12,
   4,  6,  7, 14, 13,
   4,  7,  1,  8, 14,
   4,  8,  9, 10, 14,
   5, 14, 10, 11, 12, 13,
   7,  2,  1,  7,  6,  5,  4,  3,
# number of default windows within each surface 
    1,   1,   0,   1,   1,   0,   1,   1,   1,   0,
# window width, height, X offset, Z offset 
     0.200    0.100    8.400    2.000  # window in surf  1
     0.100    0.100    0.800    2.000  # window in surf  2
     0.100    0.100    2.300    2.300  # window in surf  4
     0.100    0.100    2.300    2.300  # window in surf  5
     0.100    0.100    0.800    2.000  # window in surf  7
     0.200    0.100    8.400    0.800  # window in surf  8
     2.600    0.100    3.300    2.300  # window in surf  9
# number of default doors within each surface 
    0,   0,   0,   0,   0,   1,   0,   0,   0,   0,
# door width, height, offset from left corner of surf
     1.000    0.900    2.000  # door in surf  6
# default internal insolation distribution 
# All surfaces will receive insolation, ie. treated diffusely.
# No radiation will  pass via default windows to adjacent zones.
    3,  0,  0,  0
# optional surface information 
# id  surface      geom  loc/   mlc db      environment
# no  name         type  posn   name        other side
  1, Surf-1        OPAQ  VERT  UNKN         EXTERIOR       
  2, Surf-2        OPAQ  VERT  UNKN         EXTERIOR       
  3, Surf-3        OPAQ  VERT  UNKN         EXTERIOR       
  4, Surf-4        OPAQ  VERT  UNKN         EXTERIOR       
  5, Surf-5        OPAQ  VERT  UNKN         EXTERIOR       
  6, Surf-6        OPAQ  VERT  UNKN         EXTERIOR       
  7, Surf-7        OPAQ  VERT  UNKN         EXTERIOR       
  8, Surf-8        OPAQ  UNKN  UNKN         EXTERIOR       
  9, Surf-9        OPAQ  CEIL  UNKN         EXTERIOR       
 10, Surf-10       OPAQ  FLOR  UNKN         EXTERIOR       
.ES
.MT
.PP
The above file was created with no user intervention, however facilities
are available to allow menu based bitmap or terminal editing of the
surface attributes, including poping up descriptions of a multilayer
construction database, and inserting the construction names as attributes.
These attributes are kept in a common block and can be used by other
code to automate the building of construction, TMC, and casual gain
files.
.PP
Any of the text following a # is treated as a comment and can be edited
by the user as fits his/her requirements, the standard file reading 
facility will happily accept a file with 50 lines of comments.
.SH
Reporting Facilities
.PP
Each file reading Subroutine includes a reporting facility which allows
the data read in to be reported on at either a minimal level of verbosity,
at full detail or not at all.  As much as possible the reporting decodes the
information into english language text or concise tables.  Any code
making use of these library file reading facilities has access to such
reporting.  A extract from a typical sessions is shown below:
.ML

 What is the zone number? 1
 Related geometry file name? z1.geo

 Zone Zone-1 ( 1) has been defined as a general polygon composed of
 10 surfaces and 14 vertices.

 The zone encloses a volume of  138.48m3 of space, with a total opaque surface
 area of  65.46m2, default windows totaling  44.89m2 and default doors
 totaling   1.80m2.

 A summary of the surfaces in the zone follows:
 Sur|    Areas    |Azim|Elev| surface    |geometry| multilayer   |environment
    |Gross |NetW&D|deg |deg | name       |type|loc| constr name  |other side 
  1   19.68   2.88 180.   0. Surf-1       OPAQ VERT UNKN          EXTERIOR     
  2    2.37   0.77  90.   0. Surf-2       OPAQ VERT UNKN          EXTERIOR     
  3    9.19   9.19  45.   0. Surf-3       OPAQ VERT UNKN          EXTERIOR     
  4    6.36   1.07  45.   0. Surf-4       OPAQ VERT UNKN          EXTERIOR     
  5    6.36   1.07 315.   0. Surf-5       OPAQ VERT UNKN          EXTERIOR     
  6    9.19   7.39 315.   0. Surf-6       OPAQ VERT UNKN          EXTERIOR     
  7    2.37   0.77 270.   0. Surf-7       OPAQ VERT UNKN          EXTERIOR     
  8    9.10   2.38 180.  75. Surf-8       OPAQ UNKN UNKN          EXTERIOR     
  9   19.36  11.77   0.  90. Surf-9       OPAQ CEIL UNKN          EXTERIOR     
 10   28.16  28.16   0. -90. Surf-10      OPAQ FLOR UNKN          EXTERIOR     

 Each surface may include up to 5 default windows and 2 default doors. These
 are shown in the following table:
 Surf|No.of|X     |Z     |        window     |No.of|X     |   door           |
     |Wind |offset|offset|width |height|area |door |offset|width|height|area |
    1    1  0.200  0.100  8.400  2.000 16.800 none 
    2    1  0.100  0.100  0.800  2.000  1.600 none 
    4    1  0.100  0.100  2.300  2.300  5.290 none 
    5    1  0.100  0.100  2.300  2.300  5.290 none 
    6 none                                       1  1.000  0.900  2.000  1.800
    7    1  0.100  0.100  0.800  2.000  1.600 none 
    8    1  0.200  0.100  8.400  0.800  6.720 none 
    9    1  2.600  0.100  3.300  2.300  7.590 none 

 All surfaces will receive insolation, that is insolation will be treated
 diffusely.  Radiation will pass via default windows to adjacent zones.

 Note: the insolation defaults will have no effect if
 there is a zone shading/insolation file.

.ES
.MT
.PP
The following is the construction file for the geometry above in its
annotated form.  Again all of the information was included without
user intervention, and provides the user with additional clarity about
the properties of the zone.
.ML
# thermophysical properties of Zone-1 defined in zz1.con
# no of |air |surface(from geo)| multilayer construction
# layers|gaps|  no.  name      | database name 
     3,     1  #  1 Surf-1       UNKN           
     3,     1  #  2 Surf-2       UNKN           
     3,     1  #  3 Surf-3       UNKN           
     1,     0  #  4 Surf-4       UNKN           
     1,     0  #  5 Surf-5       UNKN           
     4,     1  #  6 Surf-6       UNKN           
     3,     1  #  7 Surf-7       UNKN           
     3,     1  #  8 Surf-8       UNKN           
     1,     0  #  9 Surf-9       UNKN           
     5,     0  # 10 Surf-10      UNKN           
# air gap position & resistance for surface  1
  2,   0.180,
# air gap position & resistance for surface  2
  2,   0.180,
# air gap position & resistance for surface  3
  2,   0.180,
# air gap position & resistance for surface  6
  2,   0.170,
# air gap position & resistance for surface  7
  2,   0.180,
# air gap position & resistance for surface  8
  2,   0.180,
# conduc-  |  density | specific | thick- |
# tivity   |          | heat     | ness(m)|
   210.0000,    2700.0,     880.0,  0.0100  # surf  1 layer 1
     0.0000,       0.0,       0.0,  0.0750  #         layer 2
   210.0000,    2700.0,     880.0,  0.0100  #         layer 3
   210.0000,    2700.0,     880.0,  0.0100  # surf  2 layer 1
     0.0000,       0.0,       0.0,  0.0750  #         layer 2
   210.0000,    2700.0,     880.0,  0.0100  #         layer 3
     0.1900,     950.0,     840.0,  0.0120  # surf  3 layer 1
     0.0000,       0.0,       0.0,  0.0250  #         layer 2
     0.5100,    1400.0,    1000.0,  0.2150  #         layer 3
     0.1500,     700.0,    1420.0,  0.1000  # surf  4 layer 1
     0.1500,     700.0,    1420.0,  0.1000  # surf  5 layer 1
     0.5100,    1400.0,    1000.0,  0.1000  # surf  6 layer 1
     0.0000,       0.0,       0.0,  0.0750  #         layer 2
     0.0300,      30.0,     837.0,  0.0270  #         layer 3
     0.5100,    1400.0,    1000.0,  0.1000  #         layer 4
   210.0000,    2700.0,     880.0,  0.0100  # surf  7 layer 1
     0.0000,       0.0,       0.0,  0.0750  #         layer 2
   210.0000,    2700.0,     880.0,  0.0100  #         layer 3
   210.0000,    2700.0,     880.0,  0.0100  # surf  8 layer 1
     0.0000,       0.0,       0.0,  0.0750  #         layer 2
   210.0000,    2700.0,     880.0,  0.0100  #         layer 3
     1.0500,    2500.0,     750.0,  0.0040  # surf  9 layer 1
     1.2800,    1460.0,     879.0,  0.2000  # surf 10 layer 1
     1.4000,    2100.0,     653.0,  0.1500  #         layer 2
     0.0300,      25.0,    1000.0,  0.0500  #         layer 3
     1.4000,    2100.0,     650.0,  0.0600  #         layer 4
     0.8500,    1900.0,     837.0,  0.0060  #         layer 5
# default window details, 2 lines for each window: 
# direct solar transmit (5 angles)  |visible|maint |
#                                   |trans. |factor|
# followed by:
# heat gain factor (5 angles)       |U value|
  0.610, 0.580, 0.540, 0.380, 0.170,  0.850, 1.000, # surf 1 win1
  0.720, 0.700, 0.660, 0.500, 0.250,  2.800,
  0.610, 0.580, 0.540, 0.380, 0.170,  0.850, 1.000, # surf 2 win1
  0.720, 0.700, 0.660, 0.500, 0.250,  2.800,
  0.780, 0.760, 0.717, 0.587, 0.348,  0.850, 1.000, # surf 4 win1
  0.825, 0.808, 0.769, 0.635, 0.399,  5.700,
  0.780, 0.760, 0.717, 0.587, 0.348,  0.850, 1.000, # surf 5 win1
  0.825, 0.808, 0.769, 0.635, 0.399,  5.700,
  0.610, 0.580, 0.540, 0.380, 0.170,  0.850, 1.000, # surf 7 win1
  0.720, 0.700, 0.660, 0.500, 0.250,  2.800,
  0.610, 0.580, 0.540, 0.380, 0.170,  0.850, 1.000, # surf 8 win1
  0.720, 0.700, 0.660, 0.500, 0.250,  2.800,
  0.998, 0.997, 0.996, 0.995, 0.994,  0.980, 1.000, # surf 9 win1
  0.999, 0.998, 0.997, 0.996, 0.995, 10.000,
# U value for door in surf  6
   5.600,
# for each surface: inside face emisivity
  0.22, 0.22, 0.90, 0.90, 0.90, 0.90, 0.22, 0.22, 0.25, 0.90,
# for each surface: outside face emisivity
  0.22, 0.22, 0.91, 0.90, 0.90, 0.90, 0.22, 0.22, 0.25, 0.90,
# for each surface: inside face solar absorptivity
  0.20, 0.20, 0.65, 0.65, 0.65, 0.65, 0.20, 0.20, 0.05, 0.60,
# for each surface: outside face solar absorptivity
  0.20, 0.20, 0.50, 0.65, 0.65, 0.65, 0.20, 0.20, 0.05, 0.85,

.ES
.MT
.bp
.SH
Typical use of library facilities
.PP
The following set of code fragments shows how the library Functions
and Subroutines may be used.  The first examples will be of user prompts
and information solicitation.
.ML

C This code fragment gets an integer and file name from the user, reads
C a geometry file, handles error trapping, range checking and prompts.

C Read a geometry file, beginning with zone number.
        ICOMP=1
        HELP(1)='The zone number is required only for reporting '//
     &          'purposes and should '
        HELP(2)='match the numbering in the configuration file.'
        CALL EASKI(IUIN,IUOUT,ICOMP," ",
     &             " What is the zone number [ d?] ? ",
     &             1,"F",MCOM,"W",1,"zone number",IER,2)
      ....

C This code fragment asks for a file name making use of EASKS with no
C alternatives.
      ....
C Assume configuration file is from IFIL+5 and any leakage description
C is fom IFIL+6. 
        IFCFG=IFIL+5
        IAPROB=IFIL+6
        FALT(1)=' '
        HELP(1)='The system configuration file holds the definition of'
        HELP(2)='the building/plant to be simulated, includeing the'
        HELP(3)='names of all of the files required.'
  289   CALL EASKS(IUIN,IUOUT,LCFGF,IX,"  System configuration file ?",
     &   " ",72,0,FALT,"config file name",IER,3)

        MODE='ALL'
        IF(.NOT.ENGL)THEN
          CALL ERSYS(LCFGF,IFCFG,IAPROB,1,MODE,"N",ITRC,IUOUT,IER)
        ELSE
          CALL ERSYS(LCFGF,IFCFG,IAPROB,1,MODE,"E",ITRC,IUOUT,IER)
        ENDIF
        IF(IER.NE.0)THEN
  288     CALL USRMSG(IUOUT," "," Problem found ... try again? ","?")
          CALL EPROMPT
          IF(NOYES(1))288,2,289
        ENDIF
        CFGOK=.TRUE.
        ....


C This code fragment asks for a file name to read text from, opens the 
C it and uses USRMSG to report on any error as well as displaying the
C file as it is read in.
    8   CALL USRMSG(IUOUT," "," What is the commented file name? ","?")
        READ(IUIN,145,IOSTAT=ISTAT,ERR=6)LGEOM

c Initialise data file (read only mode - unit number = IFIL+1).
        IUNIT=IFIL+1
        CALL EFOPSEQ(IUNIT,IUIN,IUOUT,LGEOM,1,IER)
        IF(IER.LT.0)GOTO 8

C Ask for name of file to put uncommented text into.
    9   CALL USRMSG(IUOUT," "," Place stripped version into file ","?")
        READ(IUIN,145,IOSTAT=ISTAT,ERR=9)SFILE

c Place output into IFIL+2, first close that unit, open any exiting file
C file with this name, delete it and create a new file.
        ISUNIT=IFIL+2
        CALL EFOPSEQ(ISUNIT,IUIN,IUOUT,SFILE,4,IER)
        IF(IER.LT.0)GOTO 9

C Loop until end of file encountered and display stripped text.
   73   CALL STRIPC(IUNIT,ITRU,OUTSTR,IWIDE,ND,IER)
        IF(IER.EQ.2)GOTO72
        IF(IER.EQ.1)GOTO 2
        WRITE(ISUNIT,'(a)')OUTSTR(:LNBLNK(OUTSTR))
        CALL ELINC(1)
        WRITE(IUOUT,'(a)')OUTSTR(:LNBLNK(OUTSTR))
        GOTO73
   72   CALL USRMSG(IUOUT," "," reached end of source file ","-")
        CALL ERPFREE(ISUNIT,ISTAT)
   ....


C This code fragment asks for the name of a zone construction file, displays
C a prompt requesting what type of file. Reads an ASCII or binary version 
C of the file and if there were problems gives the user the option to 
C try again or exit to the calling code.
   88   CALL USRMSG(IUOUT," "," New construction file? ","?")
        READ(IUIN,145,IOSTAT=ISTAT,ERR=88)SFILE

        CALL USRMSG(IUOUT," "," 0) Plain file, 1) Annotated ? ","?")
        CALL EGETI(IUIN,IUOUT,1,INTIN,IFLAG)
        ATR=INTIN(1)
        CALL EMKCON(SFILE,ZNAME,ICOMP,ATR,ITRC,ITRU,IER)
        IF(IER.EQ.1)THEN
   86     CALL USRMSG(IUOUT," ",
     &      "Problem creating new file, try again? ","?")
          CALL PROMPT
          IF(NOYES(1))86,3,88
        ENDIF
C label 3 is the call to redisplay a menu.
        INO=-4
        GOTO 2
      ELSEIF(INO.EQ.10)THEN
      ....


C This code fragment sets up a high level menu and then two sub menus so
C that the user can effectively edit any surface attribute of any surface
C or choose several other tasks:
C Set up a menu of surface attribute facilities.
    3 INO=-4
      IER=0
      ITEMS(1)='a read file'
      ITEMS(2)='b brouse surfaces'
      ITEMS(3)='c edit surface attributes '
      ITEMS(4)='d edit vertex list '
      ITEMS(5)='e update connections'
      ITEMS(6)='f save updated info'
      ITEMS(7)='-  Exit ^Proj^      '
    2 CALL EMENU(IUIN,ITRU,"Zone geometry",ITEMS,7,INO)
      IF(INO.EQ.0.OR.INO.EQ.7)THEN
        RETURN
      ELSEIF(INO.EQ.1)THEN
C Ask for source file name and read geometry data into common blocks.
   25   CALL EASKGEOF(ITRU,CFGOK,ICOMP,LFIL,IER)
        IF(ICOMP.GT.0)THEN
          CALL USRMSG(IUOUT," "," Using : "//LFIL,"-")
          CALL EGOMIN(IFIL+1,LFIL,ICOMP,1,ITRC,IUOUT,IER)
          IF(IER.NE.0)THEN
   23       CALL USRMSG(IUOUT," "," Problem found ... try again? ","?")
            CALL PROMPT
            IF(NOYES(1))23,2,25
          ENDIF
        ENDIF
        INO=-4
        GOTO2
      ELSEIF(INO.EQ.2)THEN

C Surface summary: print headder, followed by surface information.
        CALL SURINFO(ICOMP,ITRU)
        INO=-4
        GOTO2
   ....


C Create a menu showing the available attributes and allow user to select
C one to edit.  First 2 items on menu are actually the title.
C ICHPK(I) is a common character array 'a' 'b' 'c'...
   12   CONTINUE
        IS(1)='* Surface        |geometry| multilayer    |environment '
        IS(2)='* no| name       |type|loc| constr name   |other side  '
        DO 93 I=1,NSUR
          WRITE(IS(I+2),94)ICHPK(I),I,SNAME(I),SOTF(I),SVFC(I),
     &                       SMLCN(I),SOTHER(I)
   94     FORMAT(A1,1X,I2,1X,A12,2(1X,A4),1X,A15,1X,A15)
   93   CONTINUE
        IS(NSUR+3)='-  EXIT ^Surface Options'
        NITMS=NSUR+3
        INODS=-4
        CALL EMENU(IUIN,ITRU,"Surfaces",IS,NITMS,INODS)
        IF(INODS.EQ.NITMS.OR.INODS.EQ.0)THEN
          INO=-4
          GOTO2
        ELSEIF(INODS.EQ.1.OR.INODS.EQ.2)THEN
          INODS=-4
          GOTO12
        ELSE
          ISD(1)='a Surface name    : '//SNAME(INODS-2)     
          ISD(2)='b Surface type    : '//SOTF(INODS-2)
   ....


C This code fragment is an example of reading an ASCII data file.
C Read the number of items in a multi-layer database, followed by
C the number of layers & construction name.
        IF(IBASCI.EQ.1)THEN
          CALL STRIPC(IFMUL,ITRU,OUTSTR,IWIDE,ND,1,"mlc db items",IER)
          IF(IER.NE.0)RETURN
          K=0
          CALL EGETWI(ITRU,OUTSTR,K,NMLC,1,MMLC,"F",IR,
     &                "number of multilayer constructions",IER)
          IF(IER.NE.0)THEN
            CALL ERPFREE(IFMUL,ISTAT)
            IER=1
            RETURN
          ENDIF

          DO 10 I = 1,NMLC
            CALL STRIPC(IFMUL,ITRU,OUTSTR,IWIDE,ND,1,"mlc descr",IER)
            IF(IER.NE.0)RETURN
            K=0
            CALL EGETWI(ITRU,OUTSTR,K,LAYERS(I),1,MMLC,"F",IR,
     &              "number of layers",IER)
            DESC(I)=OUTSTR(9:IWIDE)

C Loop for each layers data and grab the two items of interest.
            IF(LAYERS(I).GT.0)THEN
              DO 15, IL=1,LAYERS(I)
                CALL STRIPC(IFMUL,ITRU,OUTSTR,IWIDE,ND,1,"layer",IER)
                IF(IER.NE.0)RETURN
                IF(ND.EQ.2)THEN
                  K=0
                  CALL EGETWI(ITRU,OUTSTR,K,IPR(I,IL),1,100,"F",IR,
     &              "primitive db index",IER)
                  CALL EGETWR(ITRU,OUTSTR,K,DTHK(I,IL),0.,0.5,"W",IR,
     &              "layer thickness",IER)
                  IF(IER.NE.0)GOTO 1001
                ELSE
                  CALL USRMSG(ITRU," layer data mismatch",OUTSTR,"W")
                ENDIF
  15          CONTINUE
            ENDIF
  10      CONTINUE
       ....

C The following code segment displays a block of help text in a
C text window or pop-up box in a graphic screen according to
C the terminal type.
       ....
        GOTO 3
      ELSEIF(INO.EQ.11)THEN

C Produce help text for the menu.
        HELP(1)='A system configuration file is made up of several'
        HELP(2)='sections and is concerned with the type of simulation'
        HELP(3)='to be performed, details of the site as well as the'
        HELP(4)='files that will make up a fabric or plant description.'
        HELP(5)='This menu is broken up in a similar way so that only'
        HELP(6)='a limited portion of the file needs to be considered'
        HELP(7)='at any one time.  If the file does not exist one will'
        HELP(8)='be created with default information within it.'
        CALL EHELPD(ITRU,"configuration sections",8,IER)
      ELSE
        INO=-4
      ....

C The following code fragment allows a user to choose from several
C alternatives presented as a menu of alternative strings with
C a block of help text available for display should the user wish
C to know more about the choices.
      ....
      CHARACTER ZNAME*15,HELP*72
      DIMENSION SALT(8)
      CHARACTER*46 ITEMS(7),SEXP*31,SALT*31

C Initial string for site exposure.
      SALT(1)='typical city centre location   '
      SALT(2)='typical urban site             '
      SALT(3)='typical rural site             '
      SALT(4)='city center: = sky, grnd, bldgs'
      SALT(5)='city center: below surroundings'
      SALT(6)='isolated rural site            '
      SALT(7)='totally enclosed (no sky)      '
      ...
      ...
        GOTO 3
      ELSEIF(INO.EQ.4)THEN
        WRITE(SALT(8),53)SKYR,GRDR,BLDR
  53    FORMAT('sky=',F4.2,' grnd=',F4.2,' bld=',F4.2)

        HELP(1)='The site exposure determines the relative magnitude of'
        HELP(2)='viewes to the sky, ground and surounding buildings for'
        HELP(3)='purposes of calculating longwave radiation.  It also'
        HELP(4)='provides information on reduction factors for wind'
        HELP(5)='speeds.'
  289   CALL EASKS(IUIN,IUOUT,SEXP,IX," Site exposure ?",
     &   " ",31,8,SALT,"site exposure",IER,5)
        IF(IX.NE.0)IXPOS=IX
     ....


C The following code fragment updates the text within a menu to
C reflect current values.
     ....
      ENDIF
    3 INO=-4
      IER=0

      WRITE(ITEMS(1),51)NCCODE(IZ)
  51  FORMAT('a Reference no       : ',I3)
      WRITE(ITEMS(2),52)LPROJ(IZ)(:20)
  52  FORMAT('b Operation file     : ',a)
      WRITE(ITEMS(3),53)LGEOM(IZ)(:20)
  53  FORMAT('c Geometry file      : ',a)
      ITEMS(4)='d zone name          : '//ZNAME(IZ)
      WRITE(ITEMS(5),55)LTHRM(IZ)(:20)
  55  FORMAT('e Construction file  : ',a)
      WRITE(ITEMS(6),56)LUTIL(IZ)(:20)
  56  FORMAT('f Utility file       : ',a)
      WRITE(ITEMS(7),57)AIRF(:20)
  57  FORMAT('g Timestep vent&infil: ',a)
      WRITE(ITEMS(8),58)CASG(:20)
  58  FORMAT('h Timestep casual lds: ',a)
      WRITE(ITEMS(9),59)VIEWF(:20)
  59  FORMAT('i Zone view factors  : ',a)
      WRITE(ITEMS(10),65)ZOBS(:20)
  65  FORMAT('j Zone obstructions  : ',a)
      WRITE(ITEMS(11),60)SHDINS(:20)
  60  FORMAT('k Shading/Insolatn db: ',a)
      WRITE(ITEMS(12),61)HCONV(:20)
  61  FORMAT('l Convection coef    : ',a)
      WRITE(ITEMS(13),62)BLNDC(:20)
  62  FORMAT('m Blind/Shut control : ',a)
      WRITE(ITEMS(14),63)TRNSW(:20)
  63  FORMAT('n Transparent wall   : ',a)
      WRITE(ITEMS(15),64)CASGC(:20)
  64  FORMAT('o Casual gain control: ',a)

      ITEMS(16)='  _________________________  '
      ITEMS(17)='! Update utility file        '
      ITEMS(18)='? Help                       '
      ITEMS(19)='- Exit                       '
      head='Files for '//ZNAME(IZ)

    2 CALL EMENU(IUIN,ITRU,head,ITEMS,19,INO)
      IF(INO.EQ.0.OR.INO.EQ.19)THEN
        RETURN
      ELSEIF(INO.EQ.1)THEN
        HELP(1)='The reference number for the zone usually matches '
        HELP(2)='the ordering of the zones.  Currently it is under-'
        HELP(3)='utilised.'
        CALL EASKI(IUIN,IUOUT,NCCODE(IZ)," "," Zone reference  [ d?] ",
     &          1,"F",MCOM,"W",IZ,"zone reference",IER,3)
        INO=-4
        GOTO 3
      ELSEIF(INO.EQ.2)THEN
     ....

C The following code fragment writes out an ascii file as a plain file
C or one with comments which the common file reading code is able to
C strip out.
      ....
      IER=0

C Open any existing file by this name or create a new file.
      CALL EFOPSEQ(IFIL,IUIN,ITRU,LFCFG,3,IER)
      IF(IER.LT.0)THEN
        IER=1
        RETURN
      ENDIF

      IF(ATR.NE.0)WRITE(IFIL,30,IOSTAT=ISTAT,ERR=1003)LFCFG
  30  FORMAT('# ESRU system configuration defined by file ',/,'# ',A72)

      IF(ATR.EQ.0)THEN
        WRITE(IFIL,9002,IOSTAT=ISTAT,ERR=1200)INDCFG
9002    FORMAT(I7)
      ELSE
        IF(INDCFG.EQ.BUILD)WRITE(IFIL,802,IOSTAT=ISTAT,ERR=1200)INDCFG
        IF(INDCFG.EQ.PLANT)WRITE(IFIL,803,IOSTAT=ISTAT,ERR=1200)INDCFG
        IF(INDCFG.EQ.BLDPLN)WRITE(IFIL,804,IOSTAT=ISTAT,ERR=1200)INDCFG
 802    FORMAT(I7,'          # Building only')
 803    FORMAT(I7,'          # Plant only')
 804    FORMAT(I7,'          # Building & Plant')
      ENDIF

      IF(ATR.EQ.0)THEN
        WRITE(IFIL,9000,IOSTAT=ISTAT,ERR=1200)XLAT,XLON
9000    FORMAT(F6.3,2X,F7.3)
      ELSE
        WRITE(IFIL,800,IOSTAT=ISTAT,ERR=1200)XLAT,XLON
 800    FORMAT(F6.3,2X,F7.3,'   # Latitude & Longitude ')
      ENDIF
      ....

.ES
.MT
.PP
A typical result of some of the code is:
.ML

 Surface Options: 1: look at surfaces
                  2: edit surface attributes
                  3: save updated info
                  -  Exit ^Proj
 Surface Options:?> 1

 -------------------------------------------------->>

 A summary of the surfaces in Zone-1 follows:
 Sur|    Areas    |Azim|Elev| surface    |geometry| multilayer   |environment
    |Gross |NetW&D|deg |deg | name       |type|loc| constr name  |other side 
  1   19.68   2.88 180.   0. Surf-1       OPAQ VERT UNKN          EXTERIOR     
  2    2.37   0.77  90.   0. Surf-2       OPAQ VERT UNKN          EXTERIOR     
 ....   
 
 Surface Options: 1: look at surfaces
                  2: edit surface attributes
                  3: save updated info
                  -  Exit ^Proj
 Surface Options:?>  2

 Surfaces: * Surface        |geometry| multilayer    |environment
           * no| name       |type|loc| constr name   |other side
           a  1 Surf-1       OPAQ VERT UNKN            EXTERIOR
           b  2 Surf-2       OPAQ VERT UNKN            EXTERIOR
        .....
           j 10 Surf-10      OPAQ FLOR UNKN            EXTERIOR
           -  EXIT ^Surface Options
 Surfaces:?>  j

 Attributes: a Surface name    : Surf-10
             b Surface type    : OPAQ
             c Surface location: FLOR
             d Multilayer construction : UNKN
             e environment @ other side: EXTERIOR
             - EXIT ^Surfaces
 Attributes:?> a

 New surface name? Floor

 -------------------------------------------------->>

 Attributes: a Surface name: Floor
             b Surface type    : OPAQ
             c Surface location: FLOR
             d Multilayer construction : UNKN
             e environment @ other side: EXTERIOR
             - EXIT ^Surfaces
 Attributes:?> e
 The other side of this surface faces:
  0) Exterior
  1) Dynamic boundary environment 
  2) Static boundary environment 
  3) Another participating zone
  4) Ground (monthly profile)
  5) Adiabatic (no heat flux)
  8) Unknown
  9) User supplied zone name
  ? > 4

 Attributes: a Surface name: Floor
             b Surface type    : OPAQ
             c Surface location: FLOR
             d Multilayer construction : UNKN
             e environment on other side GROUND
             - EXIT ^Surfaces
 Attributes:?> -

 Surfaces: * Surface        |geometry| multilayer    |environment
           * no| name       |type|loc| constr name   |other side
           a  1 Surf-1       OPAQ VERT UNKN            EXTERIOR
           b  2 Surf-2       OPAQ VERT UNKN            EXTERIOR
         ....
           j 10 Floor        OPAQ FLOR UNKN            GROUND
           -  EXIT ^Surface Options
 Surfaces:?> 
 
.ES
.MT
.SH
Graphic facilities
.PP
Several code fragments are shown below which draw axis and lines,
because of the complexity of the code which creates the data to
draw the code is not complete.  Initilisation of a graphic window
is performed by an initial call EPAGES:
.sp 1
.ML
  ...
c Initialise output device, assume minimal trace.
      MODEL=-10
      CALL EPAGES(MODEL,IUIN,IUOUT)
      ITRC=0
    3 INO=-4
      ITEMS1(1)='0: exit program'
      ITEMS1(2)='1: set databases'
      ...
.ES
.MT
.PP
Examples of graphics code...
.ML

        ....
        IF(MODEL.EQ.9.OR.MODEL.EQ.8)THEN

C The right offset for the graphic box is the character width of the menu.
C Provide a border of 2 characters on the left, 7 characters on the right
C etc. for containing any axis.
         menuL=28
         CALL winclr
         CALL win3d(menuL,2,7,2,2,3,igl,igr,igt,igb,igw,igh)

C Set up typical axis ranges.
         tmin=60.0
         tmax=99.0
         tymin=10.0
         tymax=45.0
         CALL axiscale(igw,igh,tmin,tmax,tymin,tymax,xsc,ysc,sca,
     &     xadd,yadd)

C Test call to get interval.
         CALL dinterval(tmin,tmax, ddy, ny, 1)
         WRITE(IUOUT,54)ddy,ny
  54     FORMAT(' ddy from dintt=',F6.1,' decimals=',I2) 

C Text call to get label.
         CALL labelstr(ny,66.,iticc,sstr)
         WRITE(IUOUT,55)iticc,sstr
  55     FORMAT(' pixels offset=',I3,' string=',a) 

          CALL viewtext("Typical time vs value graph",1,1,2)
          CALL horaxis(tmin,tmax,igl,igr,igb,xadd,sca,1,"time axis")
          CALL vrtaxis(tymin,tymax,igl,igb,igt,yadd,sca,1,0,"y axis")

     ....

     ....


C DRAW ESP ZONE FACE.
      ix=offL+INT((XFT(1)+Xadd)*SCA)
      iy=offB-INT((ZFT(1)+Zadd)*SCA)
      call wline (ix,iy, LNMVAB)

      DO 10 I=2,NV
        ix=offL+INT((XFT(I)+Xadd)*SCA)
        iy=offB-INT((ZFT(I)+Zadd)*SCA)
        call wline (ix,iy, LNDRAB)
   10 CONTINUE
      ix=offL+INT((XFT(1)+Xadd)*SCA)
      iy=offB-INT((ZFT(1)+Zadd)*SCA)
      call wline (ix,iy, LNDRAB)

C Draw default windows (if any) using their transformed coordinates.
C First move to lower left corner, then draw to
C lower right, upper right, upper left & back to lower left.
      IF(NGL(ISUR).GT.0)THEN
        DO 20 J=1,NGL(ISUR)
          ix=offL+INT((XWFT(J,1)+Xadd)*SCA)
          iy=offB-INT((ZWFT(J,1)+Zadd)*SCA)
          call wline (ix,iy, LNMVAB)

          ix=offL+INT((XWFT(J,2)+Xadd)*SCA)
          iy=offB-INT((ZWFT(J,2)+Zadd)*SCA)
          call wline (ix,iy, LNDRAB)

          ix=offL+INT((XWFT(J,3)+Xadd)*SCA)
          iy=offB-INT((ZWFT(J,3)+Zadd)*SCA)
          call wline (ix,iy, LNDRAB)

          ix=offL+INT((XWFT(J,4)+Xadd)*SCA)
          iy=offB-INT((ZWFT(J,4)+Zadd)*SCA)
          call wline (ix,iy, LNDRAB)

          ix=offL+INT((XWFT(J,1)+Xadd)*SCA)
          iy=offB-INT((ZWFT(J,1)+Zadd)*SCA)
          call wline (ix,iy, LNDRAB)
   20   CONTINUE
      ENDIF
    2 RETURN
      END
