C This file is part of the ESP-r system.
C Copyright Energy Systems Research Unit, University of
C Strathclyde, Glasgow Scotland, 2001.

C ESP-r is free software.  You can redistribute it and/or
C modify it under the terms of the GNU General Public
C License as published by the Free Software Foundation 
C (version 2 orlater).

C ESP-r is distributed in the hope that it will be useful
C but WITHOUT ANY WARRANTY; without even the implied
C warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
C PURPOSE. See the GNU General Public License for more
C details.

C You should have received a copy of the GNU General Public
C License along with ESP-r. If not, write to the Free
C Software Foundation, Inc., 59 Temple Place, Suite 330,
C Boston, MA 02111-1307 USA.

C Project Manager: file eddb.f providing manipulation of
C system databases:
C  EDDB  : Controls specification/ browsing of databases.
C  opendb: Standard opening of thermophysical and optical databases.

C ********** EDDB 
C Controls specification/ browsing of databases.
C ITRU is channel for user output, IER=0 means no errors encountered.

      SUBROUTINE EDDB(ITRC,ITRU,IER)
#include "building.h"
#include "net_flow.h"
#include "plantdb.h"
#include "MultiYear_simulations.h"

      PARAMETER  (MCP=35)

      COMMON/SPAD/MMOD,LIMIT,LIMTTY
      common/FILEP/IFIL
      common/pophelp/h(60)
      common/VIEWPX/menuchw,igl,igr,igt,igb,igw,igwh
      common/OUTIN/IUOUT,IUIN
      common/AFN/IAIRN,LAPROB,LAPRES,LAFRES,ICAAS(MCOM)
      common/MLC/NMLC,DESC(MMLC),DTHK(MMLC,ME),IPR(MMLC,ME),
     &           LAYERS(MMLC),DRAIR(MMLC,ME,3)

C Profile databases.
      common/PRODB/LPRFDB,IPRODB
      COMMON/PDBITM/NITEMS,lastrec,NCG(100),NO(100),DESCP(100)
      COMMON/PDBELM/ICGS1(MCP),ICGF1(MCP),CGS1(MCP),CGL1(MCP)

      COMMON/C1/NCOMP,NCON
      COMMON/C2/LSNAM,NCCODE(MCOM),LPROJ(MCOM),LGEOM(MCOM),
     &          LSHAD(MCOM),LTHRM(MCOM),INDUTL(MCOM),LUTIL(MCOM)
      common/C21/IFCFG,cfgroot,LCFGF
      COMMON/MFLWPR/NPRE,FPRE(MPOS,MPRD)
      common/MFLDOC/DEPRE(MPRD)
      common/C7/LPCDB
      common/GOPTDB/LOPTDB,IOPTDB
      COMMON/GOPT/DG(5),HG(5),UVAL,VTRN,NTL,AB(ME,5),RF(ME),SRF,SAB
      common/CONDB/LFCON,IFCON,LFMUL,IFMUL
      common/rpath/path
      common/user/browse
      common/paths/zonepth,netpth,ctlpth,imgpth,radpth,docpth,tmppth,
     &             dbspth
      common/appw/iappw,iappx,iappy

C Default dbs.
      common/DEFLT1/DCLIM,DAPRES,DFCON,DFMUL,DOPTDB,DPRFDB,DPCDB
      COMMON/DEFLT3/DFCFD,DECMPDBFL,DMCMPDBFL,DICONDBFL,dmdbnam
      common/deflt4/dinstpath

      common/FOPENED/CFGOK,MLDBOK,CONDBOK,CTLOK,OPTKOK

C Climate related.
      common/C22/ICLIM,LCLIM

      logical OK,DOK,XST,CFGOK,MLDBOK,CONDBOK,CTLOK,OPTKOK
      logical moddb,concat,browse,modcon,QUIET,modmlc,chgdb
      logical unixok,copydef,haveconstr,clkok

      character*72 LFMUL,LFCON,LCLIM,LAPROB,LAPRES,LAFRES,LPRFDB,LPCDB
      character H*72,LTMP*72,LOPTDB*72,SOPT*12
      character GTYPE*12,GDESCR*36,DESC*48,path*72,outs*124
      character zonepth*24,netpth*24,ctlpth*24,imgpth*24,radpth*24
      character docpth*24,tmppth*24,dbspth*24,linstd*32
      character cfgroot*24,LCFGF*72,fs*1,DESCP*40
      character*72 ITEMS(15)
      character doit*124,tmode*8,tfile*72
      character*72 DCLIM,DAPRES,DFCON,DFMUL,DOPTDB,DPRFDB,DPCDB
      character DEPRE*40,OUTSTR*124,LCOPY*72,LTMPFL*72,LASCI*72
      character DFILE*72
      CHARACTER*72 LSNAM,LPROJ,LGEOM,LSHAD,LTHRM,LUTIL
      CHARACTER ZPDESC*25
      character*72 DFCFD,DECMPDBFL,DMCMPDBFL,DICONDBFL,dmdbnam
      character dinstpath*48

C Set folder separator (fs) to \ or / as required.
      call isunix(unixok)
      if(unixok)then
        fs = char(47)
      else
        fs = char(92)
      endif

      moddb=.false.
      modcon=.false.
C Begin with menu of default dbs.
    3 INO=-4
      IER=0

      if ( bMY_climates_defined ) then
         cTemp = cMY_climate_db_name
      else
         cTemp = 'None'
      endif
      
      WRITE(ITEMS(1),'(2A)')'  path: ',path(1:62)
      ITEMS(2) ='  _______________________________ '
      WRITE(ITEMS(3),'(2A)')'a annual climate         : ',LCLIM(1:44)
      WRITE(ITEMS(4),'(2A)')'b multi-year climate     : ',cTemp(1:44)
      WRITE(ITEMS(5),'(2A)')'c pressure distributions : ',LAPRES(1:44)
      WRITE(ITEMS(6),'(2A)')'d materials              : ',LFCON(1:44)
      WRITE(ITEMS(7),'(2A)')'e constructions          : ',LFMUL(1:44)
      WRITE(ITEMS(8),'(2A)')'f plant components       : ',LPCDB(1:44)
      WRITE(ITEMS(9),'(2A)')'g event profiles         : ',LPRFDB(1:44)
      WRITE(ITEMS(10),'(2A)')'h optical properties     : ',LOPTDB(1:44)
      WRITE(ITEMS(11),'(A)')'i mould & micotoxins     : '
      ITEMS(12)='  _______________________________ '
      ITEMS(13)='? help                            '
      ITEMS(14)='- exit this menu                  '

C Try to compact the width of the menu.
      IW=0
      do 141 ij=1,14
        if(lnblnk(ITEMS(ij)).gt.IW)IW=lnblnk(ITEMS(ij))
 141  continue

C Help text for this menu.
      H(1)='ESP-r is provided with a number of corporate (standard)'
      write(h(2),'(3a)') 'databases located in ',
     &  dinstpath(1:lnblnk(dinstpath)),'/databases'
      H(3)='databases.  For some simulation models a user may'
      H(4)='require a bespoke version of a database.  In such a'
      H(5)='case the user may either copy a corporate database'
      H(6)='into a local directory for modification or simply begin'
      H(7)='from scratch.'
      H(8)=' '
      H(9)='In most cases a bespoke database may be created by'
      H(10)='copying a corporate database into the project'
      H(11)='directory (hint: give it a name identifiable with' 
      H(12)='the project) and then modifying it to fit the needs'
      H(13)='of the project.'
      H(14)=' '
      H(15)='Initially the database names will correspond to'
      H(16)='the defaults supplied by ESRU.  If these defaults'
      H(17)='are not found, the most likely reason is that they'
      H(18)='have not been correctly installed in folders'
      H(19)='/usr/esru/esp-r/climate & /usr/esru/esp-r/databases.'

      if(MMOD.EQ.8)then
        CALL VWMENU('Databases',ITEMS,14,0,0,IW,irpx,irpy,INO)
      else
        CALL EMENU('Databases',ITEMS,14,INO)
      endif
      IF(INO.EQ.14)THEN
        if(browse)return
        if(cfgok.and.moddb)then
          dok=.true.
          h(1)='Recent changes in database file names need to be'
          h(2)='recorded in the model if the correct databases are'
          h(3)='to be accessed in the future. If you do not update'
          h(4)='the model configuration other dependencies might be'
          h(5)='left unresolved. '
          h(6)=' '
          h(7)='If you are have not quite finished work on your'
          h(8)='databases (e.g. you are creating an alternative)'
          h(9)='you might wish to delay updating the model. '
          CALL ASKOK(
     &      'A possible change in database names detected. Update the',
     &      'model database NAME LIST to match? (see help)',
     &      OK,DOK,9)
          if(.NOT.OK)return
          CALL EMKCFG('-',IER)
        endif

C If constructions db updated, check if zone construction files should
C also be updated (but not if in registration mode or there are no zones.
        if(cfgok.and.modcon)then
          if(ncomp.eq.0)then
            ok=.false.
          else

C See if there are existing zone construction files.
            haveconstr=.false.
            do 142 iiz=1,ncomp
              call FINDFIL(LTHRM(iiz),XST)
              if(XST)haveconstr=.true.
  142       continue
            if(.NOT.haveconstr)then
              ok=.false.
            else
              dok=.true.
              h(1)='Recent changes to the materials, constructions'
              h(2)='or optical databases may make the zone files '
              h(3)='out-of-date. If you want these changes to be '
              h(4)='reflected in the zone files say yes. '
              CALL ASKOK(
     &         'Rebuild existing zone construction files to reflect',
     &         'database changes? (see help)',OK,dok,4)
            endif
          endif
          if(.NOT.OK)return
          QUIET=.true.
          do 52 iz=1,ncomp
            XST=.false.
            call FINDFIL(LTHRM(iz),XST)
            if(XST)then
              CALL EDCON(0,iuout,iz,QUIET,IER)
            endif
  52      continue
          QUIET=.false.
        endif
        RETURN
      elseif(INO.EQ.3)then

C Climate database.
        call eddbclm(moddb,'    ',-1)

      ELSEIF(INO.eq.4)THEN

C Multi-year climate database. Note this currently only works in
C conjunction with save level 5.
         call usrmsg(
     &     'Note: the use of multi-year assessments is currently',
     &     'limited to save level 5 (not all versions support this).',
     &     'W')
         call MY_clm_db_menu()
        
      ELSEIF(INO.EQ.5)THEN

C Pressure distribution database...
  30    LTMP=LAPRES
        IFPRE=IFIL+1
        write(outs,'(2a)') 'Options for pressure distribution db: ',
     &    LTMP(1:lnblnk(LTMP))
        H(1)='To enable the calculation of wind-induced surface'
        H(2)='pressures (as required the simulator), this database'
        H(3)='of angle dependent pressure coefficients is provided.'
        H(4)=' '
        H(5)='Wind pressure coefficients are pressure coefficients'
        H(6)='for surfaces in typical positions and within several'
        H(7)='different exposure categories. '
        H(8)=' '
        H(9)='The following options can be selected:'
        H(10)=' '
        H(11)='a) If the file exists than you can browse the database '
        H(12)='   and if you have permission to update the file you'
        H(13)='   can edit the entities in the database.'
        H(14)=' '
        H(15)='b) select another file: you will asked for a file'
        H(16)='   name and if it is found you can browse or edit it.'
        H(17)=' '
        H(18)=' '
        H(19)='c) make a new database: a new database will be created '
        H(20)='   based on the file name you supply.'
        H(21)=' '
        H(22)='d) copy default database: a project copy of the default'
        H(23)='  database will be made and you will be offered a '
        H(24)='  chance to rename it.'
        H(25)=' '
        CALL ERPFREE(IFPRE,ISTAT)

C Get length of path to where esp-r databases were installed.
        write(linstd,'(2a)') dinstpath(1:lnblnk(dinstpath)),
     &    '/databases'
        linst=lnblnk(linstd)
        call FINDFIL(LTMP,XST)
        IF(.NOT.XST)THEN
          idno=2
          isw=0
          call MENUATOL(outs,'Pressure distributions options:',
     &      'a browse/edit (NOT APPLICABLE)','b select another file',
     &      'c make a new database','d copy the default database',
     &      ' ',' ',' ',' ',' ',' ',' ',' ',isw,idno,25)
          copydef=.true.
        elseif(LTMP(1:linst).eq.linstd(1:linst))then

C If corportate database then offer the following choices:
          idno=1
          isw=0
          call MENUATOL(outs,'Pressure distributions options:',
     &      'a browse or edit this file','b select another file',
     &      'c make a new database','d make project copy of database',
     &      ' ',' ',' ',' ',' ',' ',' ',' ',isw,idno,25)
          copydef=.false.
        else

C If db exists locally offer the following choices:
          idno=1
          isw=0
          call MENUATOL(outs,'Pressure distributions options:',
     &      'a browse or edit this file','b select another file',
     &      'c make a new database','d copy the default database',
     &      ' ',' ',' ',' ',' ',' ',' ',' ',isw,idno,25)
          copydef=.true.
        endif

C Act on the users choice. If no choice return to main menu.
        if(isw.eq.0)then
          goto 3
        elseif(isw.eq.1)then

C If file exists open it, test file type, get number of items and close.
          if(XST)then
            LAPRES=LTMP
            moddb=.true.
            CALL EFOPSEQ(IFPRE,LAPRES,1,IER)
            IF(IER.NE.0) GOTO 30  
            CALL STRIPC(IFPRE,OUTSTR,0,ND,1,'pressure db',IER)
            K=0
            CALL EGETWI(OUTSTR,K,NPRE,1,MPRD,'W',
     &        'no pressure item',IER)
            IF(NPRE.LT.1.OR.NPRE.GT.MPRD) THEN
              CALL USRMSG(' The specified file may not be a',
     &                    ' pressure coef db, please try again','W')
              CALL ERPFREE(IFPRE,ISTAT)
              GOTO 30
            ENDIF
            CALL ERPFREE(IFPRE,ISTAT)

C Open pressure file, read in data, if OK, display coefficients and
C enter editing facilitiy.
            CALL ERPRCDB(LAPRES,0,3,IER)
            IF(IER.NE.0) GOTO 30
            CALL EDPCDB(IER) 
          else
            call usrmsg('Sorry there is no file to browse/edit.',
     &                  'Please use one of the other options. ','W')
            goto 30
          endif
        elseif(isw.eq.2)then
 31       H(1)='To enable the calculation of wind-induced surface'
          H(2)='pressures (as required the simulator), this database'
          H(3)='of angle dependent pressure coefficients is provided.'
          H(4)=' '
          H(5)='Wind pressure coefficients are pressure coefficients'
          H(6)='for surfaces in typical positions and within several'
          H(7)='different exposure categories. '
          H(8)=' '
          H(9)='Please supply and confirm the file name.'
          CALL EASKS(LTMP,' Pressure coefficients database?',
     &      ' ',72,DAPRES,'pressure coefficients database',IER,9)

C Check if name ok and if a file exists by that name.
          if(LTMP(1:2).NE.'  ')then
            LAPRES=LTMP
          else
            goto 31
          endif
          CALL ERPFREE(IFPRE,ISTAT)
          call FINDFIL(LAPRES,XST)
          IF(XST)THEN

C If file exists scan the file and use the editing facility.
            write(outs,'(2a)') 'Accessing pressure db ',
     &        LAPRES(1:lnblnk(LAPRES))
            call edisp(iuout,outs)
            CALL ERPRCDB(LAPRES,0,3,IER)
            IF(IER.NE.0) GOTO 30
            CALL EDPCDB(IER) 
            moddb=.true.
          else
            write(outs,'(2a)') LAPRES(1:lnblnk(LAPRES)),
     &        ' does not appear to exist.'
            call edisp(iuout,outs)
            goto 30
          endif
        elseif(isw.eq.3)then

C No pressure distribution db found so set-up minimal common block, create
C a new db, populate it and present editing facility.
          h(1)='The suggested name of this database is based on the '
          h(2)='project name. '
          lr=lnblnk(cfgroot)
          if(dbspth(1:2).eq.'  '.or.dbspth(1:2).eq.'./')then
            write(LTMP,'(2a)') cfgroot(1:lr),'.pressuredb'
          else
            write(LTMP,'(4a)') dbspth(1:lnblnk(dbspth)),fs,
     &        cfgroot(1:lr),'.pressuredb'
          endif
          clkok=.false.
 32       CALL EASKSCMD(LTMP,' New pressure coefficients database?',' ',
     &      'cancel',clkok,72,DAPRES,'pressure coefficients database',
     &      IER,2)
          if(clkok) goto 3
          if(ltmp(1:2).ne.'  '.and.ltmp(1:4).ne.'UNKN')then
            LAPRES=LTMP
          else
            goto 32
          endif

          moddb=.true.
          NPRE=1
          DEPRE(NPRE)='undefined pc set'
          do 33 ij=1,16
            FPRE(ij,1)=0.00
  33      continue 

C Update the file and open editing facilty. 
          CALL EMKAPCDB(LAPRES,IER)
          IF(IER.NE.0) GOTO 30
          CALL ERPRCDB(LAPRES,0,3,IER)
          IF(IER.NE.0) GOTO 30
          CALL EDPCDB(IER) 
        elseif(isw.eq.4)then

C Copy the standard db to project folder. Suggest a local
C file name based on the project root name. Lastly do the copy.
C If the default is to be copied ask for local name. Use LTMP for
C the file name as known to esp-r and LCOPY for the system cp call.   
          if(copydef)then
            call edisp(iuout,'The source file is:')
            call edisp(iuout,DAPRES)
          else
            call edisp(iuout,'The source file is:')
            call edisp(iuout,LAPRES)
          endif
          h(1)='The suggested name of this database is based on the '
          h(2)='project name. '
          lr=lnblnk(cfgroot)
          if(dbspth(1:2).eq.'  '.or.dbspth(1:2).eq.'./')then
            write(LTMP,'(2a)') cfgroot(1:lr),'.pressuredb'
          else
            write(LTMP,'(4a)') dbspth(1:lnblnk(dbspth)),fs,
     &        cfgroot(1:lr),'.pressuredb'
          endif
  34      CALL EASKS(LTMP,
     &      'Database name after it is copied into the project?',
     &      ' ',72,'pressure.db','copied pressure database',IER,2)
          call isunix(unixok)
          IF(LTMP(1:2).NE.'  ')then
            write(LCOPY,'(3a)') path(1:lnblnk(path)),fs,
     &        LTMP(1:lnblnk(LTMP))
            if(copydef)then
              doit = ' '
              if(unixok)then
                write(doit,'(4a)',IOSTAT=IOS,ERR=3) 'cp ',
     &            DAPRES(1:lnblnk(DAPRES)),' ',LCOPY(1:lnblnk(LCOPY))
              else
                write(doit,'(4a)',IOSTAT=IOS,ERR=3) 'copy /y ',
     &            DAPRES(1:lnblnk(DAPRES)),' ',LCOPY(1:lnblnk(LCOPY))
              endif
              call usrmsg('copying default file via',doit,'-')
              call runit(doit,'-')
              LAPRES=LTMP
            else
              doit = ' '
              if(unixok)then
                write(doit,'(4a)',IOSTAT=IOS,ERR=3) 'cp ',
     &            LAPRES(1:lnblnk(LAPRES)),' ',LCOPY(1:lnblnk(LCOPY))
              else
                write(doit,'(4a)',IOSTAT=IOS,ERR=3) 'copy /y ',
     &            LAPRES(1:lnblnk(LAPRES)),' ',LCOPY(1:lnblnk(LCOPY))
              endif
              call usrmsg('copying file via',doit,'-')
              call runit(doit,'-')
              LAPRES=LTMP
            endif
            moddb=.true.
            write(outs,'(2a)') 'Accessing pressure distribution db: ',
     &        LAPRES(1:lnblnk(LAPRES))
            call edisp(iuout,outs)
            CALL ERPRCDB(LAPRES,0,3,IER)
            IF(IER.NE.0) GOTO 30
            CALL EDPCDB(IER) 
          else
            goto 34
          endif
        endif
      ELSEIF(INO.EQ.6)THEN

C Since it may be repeatedly accessed, open materials db.  
 138    LTMP=LFCON
        write(outs,'(2a)') 'Options for materials db: ',
     &    LTMP(1:lnblnk(LTMP))

C If db does not exist offer the following choices:
        H(1)='The materials database holds the density, specific' 
        H(2)='heat, conductivity, diffusion resistance and surface'
        H(3)='absorption and emissivity of elements such as earth,' 
        H(4)='stone, steel, oak etc.  This database is normally in' 
        H(5)='a binaryformat for quick random access although an'
        H(6)='ASCII form is available fortransfer between machine' 
        H(7)='types.'
        H(8)=' '
        H(9)='The following options can be selected:'
        H(10)=' '
        H(11)='a) If the file exists than you can browse the database '
        H(12)='   and if you have permission to update the file you'
        H(13)='   can edit the entities in the database.'
        H(14)=' '
        H(15)='b) select another file: you will asked for a file'
        H(16)='   name and if it is found you can browse or edit it.'
        H(17)=' '
        H(18)='c) make a new database: a new database will be created '
        H(19)='   based on the file name you supply.'
        H(20)=' '
        H(21)='d) copy default database: a project copy of the default'
        H(22)='  database will be made and you will be offered a '
        H(23)='  chance to rename it.'
        H(24)=' '
        H(25)='e) export constructions db (a binary file which is'
        H(26)='   platform dependant to an ascii file) '
        H(27)=' '
        H(28)='f) import ascii constructions db file and convert it'
        H(29)='   to a binary file. '
        CALL ERPFREE(IFCON,ISTAT)

C Get length of path to where esp-r databases were installed.
        write(linstd,'(2a)') dinstpath(1:lnblnk(dinstpath)),
     &    '/databases'
        linst=lnblnk(linstd)
        call FINDFIL(LFCON,XST)
        IF(.NOT.XST)THEN
          idno=2
          isw=0
          call MENUATOL(outs,'Materials options:',
     &      'a browse/edit (NOT APPLICABLE)','b select another file',
     &      'c make a new database','d copy the default database',
     &      'e binary >> ascii export','f ascii >> binary import',
     &      ' ',' ',' ',' ',' ',' ',isw,idno,29)
            copydef=.true.
        elseif(LFCON(1:linst).eq.linstd(1:linst))then

C If corportate database then offer the following choices:
          idno=1
          isw=0
          call MENUATOL(outs,'Materials options:',
     &      'a browse or edit this file','b select another file',
     &      'c make a new database','d make project copy of database',
     &      'e binary >> ascii export','f ascii >> binary import',
     &      '  ',' ',' ',' ',' ',' ',isw,idno,29)
            copydef=.false.
        else

C If db exists locally offer the following choices:
          idno=1
          isw=0
          call MENUATOL(outs,'Materials options:',
     &      'a browse or edit this file','b select another file',
     &      'c make a new database','d copy the default database',
     &      'e binary >> ascii export','f ascii >> binary import',
     &      '  ',' ',' ',' ',' ',' ',isw,idno,29)
            copydef=.true.
        endif

C Act on the users choice. If no choice return to main menu.
        if(isw.eq.0)then
          goto 3
        elseif(isw.eq.1)then
          if(XST)then
            IER=0
            call EFOPRAN(IFCON,LTMP,40,0,IER)
            if(ier.ne.0)then
              call usrmsg(' The materials database was not found or ',
     &                    ' was corrupt','W')
              goto 138
            endif
            CONDBOK=.TRUE.
            moddb=.true.
            modcon=.true.
            LFCON=LTMP
            call tstamp('>','PRJ: enter materials db')
            CALL ELISTC(iw,chgdb,'M',IER)
            if(ier.eq.1)then

C The materials db was empty...so.
              goto 138
            elseif(ier.eq.2)then

C The materials db did not scan. Could be wrong machine type.
              call usrmsg(
     &          ' The materials database probably needs to be',
     &          ' restored from archival ASCII version.','W')
              goto 138
            endif
            if(chgdb)then

C If the materials db was edited write a backup ASCII version.
              H(1)='The materials db is a binary file. If this gets'
              H(2)='corrupted it is good to have a backup to restore'
              H(3)='from. Ant ASCII version is being written.'
              DFILE='./newmat.db1.a'
              clkok=.false.
              LASCI=' '
              write(LASCI,'(2a)') LFCON(1:lnblnk(LFCON)),'.a'
              CALL EASKSCMD(LASCI,' Materials database (ASCII backup)?',
     &         ' ','cancel',clkok,72,DFILE,'materials database (ascii)',
     &         IER,3)
              if(clkok)then
                continue
              else
                IAF=IFIL+1
                CALL MKAPRC(IUOUT,LASCI,IAF,IER)
              endif
            endif
            modcon=chgdb
          else
            call usrmsg('Sorry there is no file to browse/edit.',
     &                  'Please use one of the other options. ','W')
            goto 138
          endif
        elseif(isw.eq.2)then
          h(1)='Please supply and confirm material database file'
          h(2)='name. If it exists you will be able to browse it. If '
          h(3)='you want this to be a new database the next task is to'
          h(4)='select the `make new database` option. '
 144      CALL EASKS(LTMP,' Materials database?',
     &      ' ',72,DFCON,'materials database',IER,4)
          IF(LTMP(1:2).NE.'  ')then
            LFCON=LTMP
          else
            goto 144
          endif
          CALL ERPFREE(IFCON,ISTAT)
          call FINDFIL(LFCON,XST)
          if(XST)then

C If file exists and user wants to browse then scan the file and
C use the editing facility.
            write(outs,'(2a)') 'Accessing materials db ',
     &        LFCON(1:lnblnk(LFCON))
            call edisp(iuout,outs)
            IER=0
            call EFOPRAN(IFCON,LFCON,40,0,IER)
            if(ier.ne.0)then
              call usrmsg(' The materials database was not found or ',
     &                    ' was corrupt','W')
              goto 138
            endif
            call tstamp('>','PRJ: enter materials db')
            CALL ELISTC(iw,chgdb,'M',IER)
            if(ier.eq.1)then

C The materials db was empty...so.
              goto 138
            elseif(ier.eq.2)then

C The materials db did not scan. Could be wrong machine type.
              call usrmsg(
     &          ' The materials database probably needs to be',
     &          ' restored from archival ASCII version.','W')
              goto 138
            endif
            if(chgdb)then

C If the materials db was edited write a backup ASCII version.
              H(1)='The materials db is a binary file. If this gets'
              H(2)='corrupted it is good to have a backup to restore'
              H(3)='from. Ant ASCII version is being written.'
              DFILE='./newmat.db1.a'
              clkok=.false.
              LASCI=' '
              write(LASCI,'(2a)') LFCON(1:lnblnk(LFCON)),'.a'
              CALL EASKSCMD(LASCI,' Materials database (ASCII backup)?',
     &         ' ','cancel',clkok,72,DFILE,'materials database (ascii)',
     &         IER,3)
              if(clkok)then
                continue
              else
                IAF=IFIL+1
                CALL MKAPRC(IUOUT,LASCI,IAF,IER)
              endif
            endif
            modcon=chgdb
          else
            write(outs,'(2a)') LFCON(1:lnblnk(LFCON)),
     &       ' does not appear to exist.'
            call edisp(iuout,outs)
            goto 138
          endif
        elseif(isw.eq.3)then

C No materials db found so set-up minimal common block, create
C a new db, populate it and present editing facility.
          h(1)='The suggested name of this database is based on the '
          h(2)='project name. '
          lr=lnblnk(cfgroot)
          if(dbspth(1:2).eq.'  '.or.dbspth(1:2).eq.'./')then
            write(LTMP,'(2a)') cfgroot(1:lr),'.materialdb'
          else
            write(LTMP,'(4a)') dbspth(1:lnblnk(dbspth)),fs,
     &        cfgroot(1:lr),'.materialdb'
          endif
          clkok=.false.
  145     CALL EASKSCMD(LTMP,' New material database?',
     &     ' ','cancel',clkok,72,DFCON,'new material database',IER,2)
          if(clkok) goto 3
          IF(LTMP(1:2).NE.'  ')then
            LFCON=LTMP
          else
            goto 145
          endif
          CALL ERPFREE(IFCON,ISTAT)
          call EFOPRAN(IFCON,LFCON,40,3,IER)
          if(ier.ne.0)then
            call usrmsg(' This materials database could not be created',
     &                  ' (check file permissions).','W')
            goto 138
          endif
          CONDBOK=.TRUE.
          moddb=.true.
          modcon=.true.

C Write a scratch file which can be read in to create a binary material.
C Include typical categories with one item in each.
          lr=lnblnk(cfgroot)
          if(dbspth(1:2).eq.'  '.or.dbspth(1:2).eq.'./')then
            write(LTMPFL,'(2a)') cfgroot(1:lr),'.materialdb.a'
          else
            write(LTMPFL,'(4a)') dbspth(1:lnblnk(dbspth)),fs,
     &        cfgroot(1:lr),'.materialdb.a'
          endif
          IAF=IFIL+1
          CALL EFOPSEQ(IAF,LTMPFL,3,IER)
          write(IAF,'(2a)',IOSTAT=ios,ERR=13)
     &      '# materials db defined in ',LFCON(1:lnblnk(LFCON))
          NCLASS=15
          write(IAF,'(i5,a)',IOSTAT=ios,ERR=13) NCLASS,
     &      '#  number of classifications'
          write(IAF,'(a)',IOSTAT=ios,ERR=13) 
     &      '# class|no elements|description'
          write(IAF,'(a)',IOSTAT=ios,ERR=13) '  1   1   Brick'
          write(IAF,'(a)',IOSTAT=ios,ERR=13) '  1   Paviour Brick'
          write(IAF,'(a)',IOSTAT=ios,ERR=13) 
     &      '  0.960, 2000.000, 840.000, 0.930, 0.700, 12.000'
          write(IAF,'(a)',IOSTAT=ios,ERR=13) 
     &      '# class|no elements|description'
          write(IAF,'(a)',IOSTAT=ios,ERR=13) '  2   1   Concrete'
          write(IAF,'(a)',IOSTAT=ios,ERR=13) ' 21   Light mix conc'
          write(IAF,'(a)',IOSTAT=ios,ERR=13) 
     &      '  0.380, 1200.000, 653.000, 0.900, 0.650, 6.000'
          write(IAF,'(a)',IOSTAT=ios,ERR=13) 
     &      '# class|no elements|description'
          write(IAF,'(a)',IOSTAT=ios,ERR=13) '  3   1   Metal'
          write(IAF,'(a)',IOSTAT=ios,ERR=13) ' 41   Copper   '
          write(IAF,'(a)',IOSTAT=ios,ERR=13) 
     &      '  200.000, 8900.000, 418.000, 0.720, 0.650, 19200.000'
          write(IAF,'(a)',IOSTAT=ios,ERR=13) 
     &      '# class|no elements|description'
          write(IAF,'(a)',IOSTAT=ios,ERR=13) '  4   1   Wood'
          write(IAF,'(a)',IOSTAT=ios,ERR=13) ' 61   Wood block   '
          write(IAF,'(a)',IOSTAT=ios,ERR=13) 
     &      '  0.160, 800.000, 2093.000, 0.900, 0.650, 11.000'
          write(IAF,'(a)',IOSTAT=ios,ERR=13) 
     &      '# class|no elements|description'
          write(IAF,'(a)',IOSTAT=ios,ERR=13) '  5   1   Stone'
          write(IAF,'(a)',IOSTAT=ios,ERR=13) ' 81   Sandstone   '
          write(IAF,'(a)',IOSTAT=ios,ERR=13) 
     &      '  1.830, 2200.000, 712.000, 0.900, 0.600, 29.000'
          write(IAF,'(a)',IOSTAT=ios,ERR=13) 
     &      '# class|no elements|description'
          write(IAF,'(a)',IOSTAT=ios,ERR=13) '  6   1   Plaster'
          write(IAF,'(a)',IOSTAT=ios,ERR=13) ' 101  Dense plaster '
          write(IAF,'(a)',IOSTAT=ios,ERR=13) 
     &      '  0.500, 1300.000, 1000.000, 0.910, 0.500, 11.000  '
          write(IAF,'(a)',IOSTAT=ios,ERR=13) 
     &      '# class|no elements|description'
          write(IAF,'(a)',IOSTAT=ios,ERR=13)
     &      '  7   1   Screeds and renders'
          write(IAF,'(a)',IOSTAT=ios,ERR=13)
     &      ' 121  Ltwt concrete screed '
          write(IAF,'(a)',IOSTAT=ios,ERR=13) 
     &      '  0.410, 1200.000, 840.000, 0.900, 0.800, 30.000'
          write(IAF,'(a)',IOSTAT=ios,ERR=13) 
     &      '# class|no elements|description'
          write(IAF,'(a)',IOSTAT=ios,ERR=13) '  8   1   Tiles'
          write(IAF,'(a)',IOSTAT=ios,ERR=13) ' 141  Clay tile '
          write(IAF,'(a)',IOSTAT=ios,ERR=13) 
     &      ' 0.850, 1900.000, 837.000, 0.900, 0.600, 52.000'  
          write(IAF,'(a)',IOSTAT=ios,ERR=13) 
     &      '# class|no elements|description'
          write(IAF,'(a)',IOSTAT=ios,ERR=13)
     &      '  9   1   Asphalt and bitumen'
          write(IAF,'(a)',IOSTAT=ios,ERR=13) ' 161  Bitumen felt '
          write(IAF,'(a)',IOSTAT=ios,ERR=13) 
     &      ' 0.500, 1700.000, 1000.000, 0.900, 0.900, 1000.000'
          write(IAF,'(a)',IOSTAT=ios,ERR=13) 
     &      '# class|no elements|description'
          write(IAF,'(a)',IOSTAT=ios,ERR=13) '  10   1  Fabric '
          write(IAF,'(a)',IOSTAT=ios,ERR=13) ' 181  wool '
          write(IAF,'(a)',IOSTAT=ios,ERR=13) 
     &      '  0.060, 198.000, 1360.000, 0.900, 0.600, 10.000'
          write(IAF,'(a)',IOSTAT=ios,ERR=13) 
     &      '# class|no elements|description'
          write(IAF,'(a)',IOSTAT=ios,ERR=13) '  11   1  Insulation '
          write(IAF,'(a)',IOSTAT=ios,ERR=13) ' 201  Fibreboard '
          write(IAF,'(a)',IOSTAT=ios,ERR=13) 
     &      '  0.060, 300.000, 1000.000, 0.900, 0.500, 13.000'
          write(IAF,'(a)',IOSTAT=ios,ERR=13) 
     &      '# class|no elements|description'
          write(IAF,'(a)',IOSTAT=ios,ERR=13) '  12   1  Carpet '
          write(IAF,'(a)',IOSTAT=ios,ERR=13) ' 221  Wilton '
          write(IAF,'(a)',IOSTAT=ios,ERR=13) 
     &      ' 0.060, 186.000, 1360.000, 0.900, 0.600, 10.000' 
          write(IAF,'(a)',IOSTAT=ios,ERR=13) 
     &      '# class|no elements|description'
          write(IAF,'(a)',IOSTAT=ios,ERR=13) '  13   1  Glass '
          write(IAF,'(a)',IOSTAT=ios,ERR=13) ' 241  Glass block '
          write(IAF,'(a)',IOSTAT=ios,ERR=13) 
     &      '  0.700, 3500.000, 837.000, 0.830, 0.050, 19200.000'
          write(IAF,'(a)',IOSTAT=ios,ERR=13) 
     &      '# class|no elements|description'
          write(IAF,'(a)',IOSTAT=ios,ERR=13) '  14   1  Earth '
          write(IAF,'(a)',IOSTAT=ios,ERR=13) ' 261  Infusorial (9% mc)'
          write(IAF,'(a)',IOSTAT=ios,ERR=13) 
     &      ' 0.090, 480.000, 180.000, 0.900, 0.850, 5.000 '
          write(IAF,'(a)',IOSTAT=ios,ERR=13) 
     &      '# class|no elements|description'
          write(IAF,'(a)',IOSTAT=ios,ERR=13) '  15   1  Plastic '
          write(IAF,'(a)',IOSTAT=ios,ERR=13) ' 281   Plastic tile'
          write(IAF,'(a)',IOSTAT=ios,ERR=13) 
     &      '  0.500, 1050.000, 837.000, 0.900, 0.400, 1000.000 '
          CALL ERPFREE(IAF,ISTAT)
          call pausems(400)
          CALL MKBPRC(IUOUT,IAF,LTMPFL,IER)
        elseif(isw.eq.4)then

C Copy the standard db to project folder. Suggest a local
C file name based on the project root name. Lastly do the copy.

C If the default is to be copied ask for local name. Use LTMP for
C the file name as known to esp-r and LCOPY for the system cp call.   
          if(copydef)then
            call edisp(iuout,'The source file is:')
            call edisp(iuout,DFCON)
          else
            call edisp(iuout,'The source file is:')
            call edisp(iuout,LFCON)
          endif
          h(1)='The suggested name of this database is based on the '
          h(2)='project name. '
          lr=lnblnk(cfgroot)
          if(dbspth(1:2).eq.'  '.or.dbspth(1:2).eq.'./')then
            write(LTMP,'(2a)') cfgroot(1:lr),'.materialdb'
          else
            write(LTMP,'(4a)') dbspth(1:lnblnk(dbspth)),fs,
     &        cfgroot(1:lr),'.materialdb'
          endif
  146     CALL EASKS(LTMP,
     &      'Database name after it is copied into the project?',
     &      ' ',72,'materials.db','copied materials database',IER,2)
          call isunix(unixok)
          IF(LTMP(1:2).NE.'  ')then
            write(LCOPY,'(3a)') path(1:lnblnk(path)),fs,
     &        LTMP(1:lnblnk(LTMP))
            if(copydef)then
              doit = ' '
              if(unixok)then
                write(doit,'(4a)',IOSTAT=IOS,ERR=3) 'cp ',
     &            DFCON(1:lnblnk(DFCON)),' ',LCOPY(1:lnblnk(LCOPY))
              else
                write(doit,'(4a)',IOSTAT=IOS,ERR=3) 'copy /y ',
     &            DFCON(1:lnblnk(DFCON)),' ',LCOPY(1:lnblnk(LCOPY))
              endif
              call usrmsg('copying default file via',doit,'-')
              call runit(doit,'-')
              LFCON=LTMP
            else
              doit = ' '
              if(unixok)then
                write(doit,'(4a)',IOSTAT=IOS,ERR=3) 'cp ',
     &            LFCON(1:lnblnk(LFCON)),' ',LCOPY(1:lnblnk(LCOPY))
              else
                write(doit,'(4a)',IOSTAT=IOS,ERR=3) 'copy /y ',
     &            LFCON(1:lnblnk(LFCON)),' ',LCOPY(1:lnblnk(LCOPY))
              endif
              call usrmsg('copying file via',doit,'-')
              call runit(doit,'-')
              LFCON=LTMP
            endif
            write(outs,'(2a)') 'Accessing materials db: ',
     &        LFCON(1:lnblnk(LFCON))
            call edisp(iuout,outs)
            IER=0
            CALL ERPFREE(IFCON,ISTAT)
            call EFOPRAN(IFCON,LFCON,40,0,IER)
            if(ier.ne.0)then
              call usrmsg(
     &          ' The materials database was not found or was corrupt',
     &          ' (e.g. version for different computer).','W')
              goto 138
            endif
            call tstamp('>','PRJ: enter materials db')
            CALL ELISTC(iw,chgdb,'M',IER)
            if(ier.eq.1)then

C The materials db was empty...so.
              goto 138
            elseif(ier.eq.2)then

C The materials db did not scan. Could be wrong machine type.
              call usrmsg(
     &          ' The materials database probably needs to be',
     &          ' restored from archival ASCII version.','W')
              goto 138
            endif
            modcon=chgdb

C On return from display and/or edit of materials create a back-up
C ascii version of this new project materials db.
            H(1)='Some databases are held as BINARY files for speed'
            H(2)='of access and security. It is sometimes convenient'
            H(3)='to convert to ASCII - e.g. for implementation under'
            H(4)='a different operating system or for word processing.'
            H(5)=' '
            H(6)='Since you have just requested a project copy an '
            H(7)='ASCII backup is also being made. '
            DFILE='./newmat.db1.a'
            clkok=.false.
            LASCI=' '
            write(LASCI,'(2a)') LFCON(1:lnblnk(LFCON)),'.a'
            CALL EASKSCMD(LASCI,' Materials database (ASCII backup)?',
     &     ' ','cancel',clkok,72,DFILE,'materials database (ascii)',
     &      IER,7)
            if(clkok)then
              goto 3
            else
              IAF=IFIL+1
              CALL MKAPRC(IUOUT,LASCI,IAF,IER)
            endif
          else
            goto 146
          endif
        elseif(isw.eq.5)then

C Materials db: BINARY > ASCII. Open the ascii file on IAF=IFIL+1.
          IAF=IFIL+1
          IF(.NOT.CONDBOK)THEN

C If materials not opened do it now.
            IER=0
            call EFOPRAN(IFCON,LFCON,40,1,IER)
            if(ier.ne.0)return 
            CONDBOK=.TRUE.
          ENDIF

C Confirm suggested name and then write out asci file.
          H(1)='Some databases are held as BINARY files for speed'
          H(2)='of access and security. It is sometimes convenient'
          H(3)='to convert to ASCII - e.g. for implementation under'
          H(4)='a different operating system or for word processing. '
          DFILE='./newmat.db1.a'
          clkok=.false.
          LASCI=' '
          write(LASCI,'(2a)') LFCON(1:lnblnk(LFCON)),'.a'
          CALL EASKSCMD(LASCI,' Materials database (ASCII)?',
     &     ' ','cancel',clkok,72,DFILE,'materials database (ascii)',
     &      IER,4)
          if(clkok)then
            goto 3
          else
            CALL MKAPRC(IUOUT,LASCI,IAF,IER)
          endif
        elseif(isw.eq.6)then

C Materials db: ASCII > BINARY. Guess that the ascii version has
C the same name as the binary one and is in the same location.
          H(1)='The materials database holds the thermo-physical'
          H(2)='properties of a range of materials such as'
          H(3)='brick, concrete, insulation, etc. An asci version'
          H(4)='of this database is ofen used when transporting models'
          H(5)='between operating systems. '
          IAF=IFIL+1
          clkok=.false.
          DFILE=' '
          LASCI=' '
          write(LASCI,'(2a)') LFCON(1:lnblnk(LFCON)),'.a'
          CALL EASKSCMD(LASCI,' Materials database (ASCII)?',
     &      ' ','cancel',clkok,72,DFILE,'materials db (ascii)',IER,5)
          if(clkok) goto 3

          DFILE='./newprim.db1'
          clkok=.false.
          ltmp=LFCON
 143      CALL EASKSCMD(ltmp,' Materials database (BINARY)?',
     &      ' ','cancel',clkok,72,DFILE,'Materials db (binary)',IER,5)
          if(ltmp(1:2).ne.'  '.and.ltmp(1:4).ne.'UNKN')then
            LFCON=ltmp
          else
            goto 143
          endif
          if(clkok)then
            goto 3
          else
            CALL MKBPRC(IUOUT,IAF,LASCI,IER)
          endif
        endif
      ELSEIF(INO.EQ.7)THEN

C Deal with construction databases.
  38    LTMP=LFMUL
        write(outs,'(2a)') 'Options for constructions db: ',
     &    LTMP(1:lnblnk(LTMP))

C If db does not exist offer the following choices:
        CALL ERPFREE(IFMUL,ISTAT)
        call FINDFIL(LFMUL,XST)
        H(1)='A (multilayer) construction database defines the com-'
        H(2)='position of constructions such as walls and glazing'
        H(3)='systems in terms of layers of materials of particular'
        H(4)='thickness in a particular order and, where appropriate,' 
        H(5)='with a named set of optical properties. '
        H(6)=' '
        H(7)='The following options can be selected:'
        H(8)=' '
        H(9)='a) If the file exists than you can browse the database'
        H(10)='   and if you have permission to update the file you'
        H(11)='   can edit the entities in the database.'
        H(12)=' '
        H(13)='b) select another file: you will asked for a file'
        H(14)='   name and if it is found you can browse or edit it.'
        H(15)=' '
        H(16)='c) make a new database: a new database will be created '
        H(17)='   based on the file name you supply.'
        H(18)=' '
        H(19)='d) copy default database: a project copy of the default'
        H(20)='  database will be made and you will be offered a '
        H(21)='  chance to rename it.'

C Get length of path to where esp-r databases were installed.
        write(linstd,'(2a)') dinstpath(1:lnblnk(dinstpath)),
     &    '/databases'
        linst=lnblnk(linstd)
        IF(.NOT.XST)THEN
          idno=2
          isw=0
          call MENUATOL(outs,'Constructions options:',
     &      'a browse/edit (NOT APPLICABLE)','b select another file',
     &      'c make a new database','d copy the default database',
     &      ' ',' ',' ',' ',' ',' ',' ',' ',isw,idno,21)
            copydef=.true.
        elseif(LFMUL(1:linst).eq.linstd(1:linst))then

C If corportate database then offer the following choices:
          idno=1
          isw=0
          call MENUATOL(outs,'Constructions options:',
     &      'a browse or edit this file','b select another file',
     &      'c make a new database','d make project copy of database',
     &      ' ',' ',' ',' ',' ',' ',' ',' ',isw,idno,21)
            copydef=.false.
        else

C If db exists locally offer the following choices:
          idno=1
          isw=0
          call MENUATOL(outs,'Constructions options:',
     &      'a browse or edit this file','b select another file',
     &      'c make a new database','d copy the default database',
     &      ' ',' ',' ',' ',' ',' ',' ',' ',isw,idno,21)
          copydef=.true.
        endif

C Act on the users choice.
        if(isw.eq.0)then
          goto 38
        elseif(isw.eq.1)then
          if(XST)then
            CALL ERMLDB(0,IUOUT,IER)
            IF(IER.eq.1)then

C there was a minor problem scanning the constructions db.
              call usrmsg(
     &     'There were a few problems scanning the constructions db',
     &     'and perhaps the materials db. Please double chek.','W')
              goto 38
            ELSEIF(IER.eq.2)then

C There were lots of undefined materials so likely the materials
C database is for the wrong machine type. Guess the name of
C the ascii version and if it exists, offer to convert it.
              call usrmsg(
     &          ' The materials database probably needs to be',
     &          ' restored from archival ASCII version.','W')
              goto 3
            endif
            MLDBOK=.TRUE.
            call tstamp('>','PRJ: enter construction db')
            CALL EDMLDB(ITRC,modmlc,IER,ISEL)
            if(IER.EQ.1)then
              CALL USRMSG(' ','Problem accessing constructions db','W')
              goto 38
            endif
            moddb=modmlc
            modcon=modmlc
          else
            call usrmsg('Sorry there is no file to browse/edit.',
     &                  'Please use one of the other options. ','W')
            goto 38
          endif
        elseif(isw.eq.2)then
          h(1)='Please supply and confirm constructions database file'
          h(2)='name. If it exists you will be able to browse it. If '
          h(3)='you want this to be a new database the next task is to'
          h(4)='select the `make new database` option. '
  44      CALL EASKS(LTMP,' Constructions database?',
     &     ' ',72,DFMUL,'constructions database',IER,4)
          IF(LTMP(1:2).NE.'  ')then
            LFMUL=LTMP
          else
            goto 44
          endif
          CALL ERPFREE(IFMUL,ISTAT)
          call FINDFIL(LFMUL,XST)
          if(XST)then

C If file exists and user wants to browse then scan the file and
C use the editing facility.
            write(outs,'(2a)') 'Accessing constructions db ',
     &         LFMUL(1:lnblnk(LFMUL))
            call edisp(iuout,outs)
            CALL ERMLDB(0,ITRU,IER)
            IF(IER.eq.1)then

C there was a minor problem scanning the constructions db.
              call usrmsg(
     &   'There were a few problems scanning the constructions db',
     &   'and perhaps the materials db. Please double chek.','W')
              goto 38
            ELSEIF(IER.eq.2)then

C There were lots of undefined materials so likely the materials
C database is for the wrong machine type. Guess the name of
C the ascii version and if it exists, offer to convert it.
              call usrmsg(
     &          ' The materials database probably needs to be',
     &          ' restored from archival ASCII version.','W')
              goto 3
            endif
            MLDBOK=.TRUE.
            call tstamp('>','PRJ: enter construction db')
            CALL EDMLDB(ITRC,modmlc,IER,ISEL)
            if(IER.EQ.1)then
              CALL USRMSG(' ','Problem accessing construction db','W')
              goto 38
            endif
            moddb=modmlc
            modcon=modmlc
          else
            write(outs,'(2a)') LFMUL(1:lnblnk(LFMUL)),
     &       ' does not appear to exist.'
            call edisp(iuout,outs)
            goto 38
          endif
        elseif(isw.eq.3)then

C No Constructions db found so set-up minimal common block, create
C a new db, populate it and present editing facility.
          h(1)='The suggested name of this database is based on the '
          h(2)='project name. '
          lr=lnblnk(cfgroot)
          if(dbspth(1:2).eq.'  '.or.dbspth(1:2).eq.'./')then
            write(LTMP,'(2a)') cfgroot(1:lr),'.constrdb'
          else
            write(LTMP,'(4a)') dbspth(1:lnblnk(dbspth)),fs,
     &        cfgroot(1:lr),'.constrdb'
          endif
          clkok=.false.
   45     CALL EASKSCMD(LTMP,' New constructions database?',
     &     ' ','cancel',clkok,72,DFMUL,'constructions database',IER,2)
          if(clkok) goto 3
          IF(LTMP(1:2).NE.'  ')then
            LFMUL=LTMP
          else
            goto 45
          endif
          NMLC=1
          DESC(1)='first_constr  OPAQ  OPAQUE        SYMMETRIC'
          DTHK(1,1)=0.100
          IPR(1,1)=1
          LAYERS(1)=1
          DRAIR(1,1,1)=0.0
          DRAIR(1,1,2)=0.0
          DRAIR(1,1,3)=0.0
          MLDBOK=.TRUE.
          moddb=.true.
          CALL EMKAMLD(iuout,IER)
          IF(IER.NE.0)THEN
            CALL USRMSG(' ',' Unable to create database!','W')
            RETURN
          ENDIF
          ISEL=1
          CALL ERMLDB(0,ITRU,IER)
          IF(IER.NE.0)goto 45
          MLDBOK=.TRUE.
          call tstamp('>','PRJ: enter construction db')
          CALL EDMLDB(ITRC,modmlc,IER,ISEL)
          if(IER.EQ.1)then
            CALL USRMSG(' ','Problem accessing constructions db','W')
            goto 38
          endif
          moddb=modmlc
          modcon=modmlc
        elseif(isw.eq.4)then

C Copy the standard db to project folder. Suggest a local
C file name based on the project root name. Lastly do the copy.

C If the default is to be copied ask for local name. Use LTMP for
C the file name as known to esp-r and LCOPY for the system cp call.   
          if(copydef)then
            call edisp(iuout,'The source file is:')
            call edisp(iuout,DFMUL)
          else
            call edisp(iuout,'The source file is:')
            call edisp(iuout,LFMUL)
          endif
          h(1)='The suggested name of this database is based on the '
          h(2)='project name. '
          lr=lnblnk(cfgroot)
          if(dbspth(1:2).eq.'  '.or.dbspth(1:2).eq.'./')then
            write(LTMP,'(2a)') cfgroot(1:lr),'.constrdb'
          else
            write(LTMP,'(4a)') dbspth(1:lnblnk(dbspth)),fs,
     &        cfgroot(1:lr),'.constrdb'
          endif
   46     CALL EASKS(LTMP,
     &      'Database name after it is copied into the project?',
     &      ' ',72,'multicon.db','copied constructions database',IER,2)
          call isunix(unixok)
          IF(LTMP(1:2).NE.'  ')then
            write(LCOPY,'(3a)') path(1:lnblnk(path)),fs,
     &        LTMP(1:lnblnk(LTMP))
            if(copydef)then
              doit = ' '
              if(unixok)then
                write(doit,'(4a)',IOSTAT=IOS,ERR=3) 'cp ',
     &            DFMUL(1:lnblnk(DFMUL)),' ',LCOPY(1:lnblnk(LCOPY))
              else
                write(doit,'(4a)',IOSTAT=IOS,ERR=3) 'copy /y ',
     &            DFMUL(1:lnblnk(DFMUL)),' ',LCOPY(1:lnblnk(LCOPY))
              endif
              call usrmsg('copying default file via',doit,'-')
              call runit(doit,'-')
              LFMUL=LTMP
            else
              doit = ' '
              if(unixok)then
                write(doit,'(4a)',IOSTAT=IOS,ERR=3) 'cp ',
     &            LFMUL(1:lnblnk(LFMUL)),' ',LCOPY(1:lnblnk(LCOPY))
              else
                write(doit,'(4a)',IOSTAT=IOS,ERR=3) 'copy /y ',
     &            LFMUL(1:lnblnk(LFMUL)),' ',LCOPY(1:lnblnk(LCOPY))
              endif
              call usrmsg('copying default file via',doit,'-')
              call runit(doit,'-')
              LFMUL=LTMP
            endif
            write(outs,'(2a)') 'Accessing constructions db: ',
     &        LCOPY(1:lnblnk(LCOPY))
            call edisp(iuout,outs)
            call tstamp('>','PRJ: enter construction db')
            CALL ERMLDB(0,IUOUT,IER)
            IF(IER.eq.1)then

C there was a minor problem scanning the constructions db.
              call usrmsg(
     &     'There were a few problems scanning the constructions db',
     &     'and perhaps the materials db. Please double chek.','W')
              goto 38
            ELSEIF(IER.eq.2)then

C There were lots of undefined materials so likely the materials
C database is for the wrong machine type. Guess the name of
C the ascii version and if it exists, offer to convert it.
              call usrmsg(
     &          ' The materials database probably needs to be',
     &          ' restored from archival ASCII version.','W')
              goto 3
            endif
            MLDBOK=.TRUE.
            call tstamp('>','PRJ: enter construction db')
            CALL EDMLDB(ITRC,modmlc,IER,ISEL)
            if(IER.EQ.1)then
              CALL USRMSG(' ','Problem accessing construction db','W')
              goto 38
            endif
            moddb=modmlc
            modcon=modmlc
          else
            goto 46
          endif
        endif
      ELSEIF(INO.EQ.8)THEN

C Plant template database.
  60    LTMP=LPCDB
        write(outs,'(2a)') 'Options for plant template db: ',
     &    LTMP(1:lnblnk(LTMP))
        H(1)='The plant components database is a binary, random '
        H(2)='access file holding plant component descriptions to '
        H(3)='enable the establishment of component state-space '
        H(4)=' representations used by ESP-r.'
        h(5)=' '
        h(6)='If there is no such file then a new one will be'
        h(7)='created to hold data for new components.'
        h(8)=' '
        H(9)='The following options can be selected:'
        H(10)=' '
        H(11)='a) If the file exists than you can browse the database '
        H(12)='   and if you have permission to update the file you'
        H(13)='   can edit the entities in the database.'
        H(14)=' '
        H(15)='b) select another file: you will asked for a file'
        H(16)='   name and if it is found you can browse or edit it.'
        H(17)=' '
        H(18)='c) make a new database: a new database will be created '
        H(19)='   based on the file name you supply.'
        H(20)=' '
        H(21)='d) copy default database: a project copy of the default'
        H(22)='  database will be made and you will be offered a '
        H(23)='  chance to rename it.'

C Use the profile database unit for testing plant db.
        CALL ERPFREE(IPRODB,ISTAT)

C Get length of path to where esp-r databases were installed.
        write(linstd,'(2a)') dinstpath(1:lnblnk(dinstpath)),
     &    '/databases'
        linst=lnblnk(linstd)
        call FINDFIL(LTMP,XST)
        IF(.NOT.XST)THEN
          idno=2
          isw=0
          call MENUATOL(outs,'Plant component options:',
     &      'a browse/edit (NOT APPLICABLE)','b select another file',
     &      'c make a new database','d copy the default database',
     &      ' ',' ',' ',' ',' ',' ',' ',' ',isw,idno,23)
          copydef=.true.
        elseif(LTMP(1:linst).eq.linstd(1:linst))then

C If corportate database then offer the following choices:
          idno=1
          isw=0
          call MENUATOL(outs,'Plant component options:',
     &      'a browse or edit this file','b select another file',
     &      'c make a new database','d make project copy of database',
     &      ' ',' ',' ',' ',' ',' ',' ',' ',isw,idno,23)
          copydef=.false.
        else

C If db exists locally offer the following choices:
          idno=1
          isw=0
          call MENUATOL(outs,'Plant component options:',
     &      'a browse or edit this file','b select another file',
     &      'c make a new database','d copy the default database',
     &      ' ',' ',' ',' ',' ',' ',' ',' ',isw,idno,23)
          copydef=.true.
        endif

C Act on the users choice. If no choice retrun to main menu.
        if(isw.eq.0)then
          goto 3
        elseif(isw.eq.1)then

C If file exists open it, test file type, get number of items and close.
          if(XST)then
            IER=0
            call EFOPRAN(IPRODB,LTMP,IRECLN,1,IER)
            IF(ier.eq.0)THEN
              IREC = 1
              READ (IPRODB,REC=IREC,IOSTAT=ISTAT,ERR=60) ZPDESC
              IF (ZPDESC.NE.' PLANT COMPONENT DATABASE')then
                call usrmsg('File is not a plant component database,',
     &            'please supply the file name again.','W')
                goto 60
              endif
              IREC = 2
              READ (IPRODB,REC=IREC,IOSTAT=ISTAT,ERR=60) NPC,NXTREC
              write(outs,'(a,i3,2a)') 'There are ',NPC,
     &          ' components in ',LTMP(1:lnblnk(LTMP))
              call edisp(iuout,outs)
              CALL ERPFREE(IPRODB,ISTAT)

C Get logical name of child process terminal type, expand model 
C name to include the path and create a string to drive pdb.
              call tstamp('>','PRJ: start pdb')
              doit = ' '
              call tchild(ICPMOD)
              call termode(ICPMOD,tmode)
              call addpath(LPCDB,tfile,concat)
              if(iappw.gt.0.and.iappw.le.200)then
                write(doit,'(3a,3i4,3a)') 'pdb -mode ',tmode,
     &            ' -s ',iappw,iappx+10,iappy+40,' -file ',
     &            tfile(1:lnblnk(tfile)),' &'
              else
                write(doit,'(5a)') 'pdb -mode ',tmode,
     &            ' -s 0 0 0 -file ',tfile(1:lnblnk(tfile)),' &'
              endif
              call usrmsg(' ','staring plant db module.','-')
              call runit(doit,tmode)
            else
              call usrmsg('Sorry, error opening the file.',
     &          'Please use one of the other options.','W')
              goto 60
            endif
          else
            call usrmsg('Sorry there is no file to browse/edit.',
     &        'Please use one of the other options. ','W')
            goto 60
          endif
        elseif(isw.eq.2)then
          H(1)='The plant components database is a binary, random '
          H(2)='access file holding plant component descriptions to '
          H(3)='enable the establishment of component state-space '
          H(4)=' representations used by ESP-r.'
          CALL EASKS(ltmp,'Plant component database?',
     &      ' ',72,DPCDB,'plant component database',IER,4)
          if(ltmp(1:2).ne.'  '.and.ltmp(1:4).ne.'UNKN')then
            LPCDB=ltmp
          else
            goto 60
          endif
          CALL ERPFREE(IPRODB,ISTAT)
          call FINDFIL(LPCDB,XST)
          IF(XST)THEN

C If file exists and user wants to browse then scan the file and
C use the editing facility.
            IER=0
            call EFOPRAN(IPRODB,LTMP,IRECLN,1,IER)
            IF(ier.eq.0)THEN
              IREC = 1
              READ (IPRODB,REC=IREC,IOSTAT=ISTAT,ERR=60) ZPDESC
              IF (ZPDESC.NE.' PLANT COMPONENT DATABASE')then
                call usrmsg('File is not a plant component database,',
     &            'please supply the file name again.','W')
                goto 60
              endif
              IREC = 2
              READ (IPRODB,REC=IREC,IOSTAT=ISTAT,ERR=60) NPC,NXTREC
              write(outs,'(a,i3,2a)') 'There are ',NPC,
     &          ' components in ',LTMP(1:lnblnk(LTMP))
              call edisp(iuout,outs)
              CALL ERPFREE(IPRODB,ISTAT)
            else
              call usrmsg('Sorry, error opening the file.',
     &          'Please use one of the other options.','W')
              goto 60
            endif
            write(outs,'(2a)') 'Accessing plant db ',
     &        LPCDB(1:lnblnk(LPCDB))
            call edisp(iuout,outs)

C Get logical name of child process terminal type, expand model 
C name to include the path and create a string to drive pdb.
            call tstamp('>','PRJ: start pdb')
            doit = ' '
            call tchild(ICPMOD)
            call termode(ICPMOD,tmode)
            call addpath(LPCDB,tfile,concat)
            if(iappw.gt.0.and.iappw.le.200)then
              write(doit,'(3a,3i4,3a)') 'pdb -mode ',tmode,
     &          ' -s ',iappw,iappx+10,iappy+40,' -file ',
     &          tfile(1:lnblnk(tfile)),' &'
            else
              write(doit,'(5a)') 'pdb -mode ',tmode,
     &          ' -s 0 0 0 -file ',tfile(1:lnblnk(tfile)),' &'
            endif
            call usrmsg(' ','staring plant db module.','-')
            call runit(doit,tmode)
          else
            write(outs,'(2a)') LPCDB(1:lnblnk(LPCDB)),
     &        ' does not appear to exist.'
            call edisp(iuout,outs)
            goto 60
          endif
        elseif(isw.eq.3)then

C No plant component db found so set-up minimal common block, create
C a new db, populate it and present editing facility.
          h(1)='The suggested name of this database is based on the '
          h(2)='project name. '
          lr=lnblnk(cfgroot)
          if(dbspth(1:2).eq.'  '.or.dbspth(1:2).eq.'./')then
            write(LTMP,'(2a)') cfgroot(1:lr),'.plantdb'
          else
            write(LTMP,'(4a)') dbspth(1:lnblnk(dbspth)),fs,
     &        cfgroot(1:lr),'.plantdb'
          endif
 62       h(1)='The plant component database binary file holds the'
          h(2)='description of available components. If the name'
          h(3)='given matches an existing file, it will be read in'
          h(4)='and the components data will be available for'
          h(5)='listing and editing. If there is no such file then'
          h(6)='a new one will be created to hold data for new'
          h(7)='components.'
          clkok=.false.
          CALL EASKSCMD(ltmp,'Plant component database?',
     &      ' ','cancel',clkok,72,DPCDB,'plant component database',
     &      IER,7)
          if(clkok) goto 3
          if(ltmp(1:2).ne.'  '.and.ltmp(1:4).ne.'UNKN')then
            LPCDB=ltmp
          else
            goto 62
          endif

C Create a minimal plant databases (code similar to pdb.F).
          moddb=.true.
          CALL ERPFREE(IPRODB,ISTAT)
          call EFOPRAN(IPRODB,LPCDB,IRECLN,3,IER)
          CALL PCUPDT (IPRODB,0)
          CALL ERPFREE(IPRODB,ISTAT)

C If file exists and user wants to browse then scan the file and
C use the editing facility.
          write(outs,'(2a)') LPCDB(1:lnblnk(LPCDB)),' created.'
          dok=.true.
          h(1)='An empty plant component database has been created'
          h(2)='and it it useless until it has been populated with'
          h(3)='data. If you have the information required you can'
          h(4)='proceed with that task. '
          CALL ASKOK(outs,' Browse or edit new database?',OK,dok,4)
          if(OK)then

C Get logical name of child process terminal type, expand model 
C name to include the path and create a string to drive pdb.
            call tstamp('>','PRJ: start pdb')
            doit = ' '
            call tchild(ICPMOD)
            call termode(ICPMOD,tmode)
            call addpath(LPCDB,tfile,concat)
            if(iappw.gt.0.and.iappw.le.200)then
              write(doit,'(3a,3i4,3a)') 'pdb -mode ',tmode,
     &          ' -s ',iappw,iappx+10,iappy+40,' -file ',
     &          tfile(1:lnblnk(tfile)),' &'
            else
              write(doit,'(5a)') 'pdb -mode ',tmode,
     &          ' -s 0 0 0 -file ',tfile(1:lnblnk(tfile)),' &'
            endif
            call usrmsg(' ','staring plant db module.','-')
            call runit(doit,tmode)
          endif
        elseif(isw.eq.4)then

C Copy the standard db to project folder. Suggest a local
C file name based on the project root name. Lastly do the copy.
C If the default is to be copied ask for local name. Use LTMP for
C the file name as known to esp-r and LCOPY for the system cp call.   
          if(copydef)then
            call edisp(iuout,'The source file is:')
            call edisp(iuout,DPCDB)
          else
            call edisp(iuout,'The source file is:')
            call edisp(iuout,LPCDB)
          endif
          h(1)='The suggested name of this database is based on the '
          h(2)='project name. '
          lr=lnblnk(cfgroot)
          if(dbspth(1:2).eq.'  '.or.dbspth(1:2).eq.'./')then
            write(LTMP,'(2a)') cfgroot(1:lr),'.plantdb'
          else
            write(LTMP,'(4a)') dbspth(1:lnblnk(dbspth)),fs,
     &        cfgroot(1:lr),'.plantdb'
          endif
   66     CALL EASKS(LTMP,
     &      'Database name after it is copied into the project?',
     &      ' ',72,'plant.db','copied plant database',IER,2)
          call isunix(unixok)
          IF(LTMP(1:2).NE.'  ')then
            write(LCOPY,'(3a)') path(1:lnblnk(path)),fs,
     &        LTMP(1:lnblnk(LTMP))
            if(copydef)then
              doit = ' '
              if(unixok)then
                write(doit,'(4a)',IOSTAT=IOS,ERR=3) 'cp ',
     &            DPCDB(1:lnblnk(DPCDB)),' ',LCOPY(1:lnblnk(LCOPY))
              else
                write(doit,'(4a)',IOSTAT=IOS,ERR=3) 'copy /y ',
     &            DPCDB(1:lnblnk(DPCDB)),' ',LCOPY(1:lnblnk(LCOPY))
              endif
              call usrmsg('copying default file via',doit,'-')
              call runit(doit,'-')
              LPCDB=LTMP
            else
              doit = ' '
              if(unixok)then
                write(doit,'(4a)',IOSTAT=IOS,ERR=3) 'cp ',
     &            LPCDB(1:lnblnk(LPCDB)),' ',LCOPY(1:lnblnk(LCOPY))
              else
                write(doit,'(4a)',IOSTAT=IOS,ERR=3) 'copy /y ',
     &            LPCDB(1:lnblnk(LPCDB)),' ',LCOPY(1:lnblnk(LCOPY))
              endif
              call usrmsg('copying default file via',doit,'-')
              call runit(doit,'-')
              LPCDB=LTMP
            endif
            write(outs,'(2a)') 'Accessing plant template db: ',
     &        LCOPY(1:lnblnk(LCOPY))
            call edisp(iuout,outs)
            call tstamp('>','PRJ: start pdb')
            doit = ' '
            call tchild(ICPMOD)
            call termode(ICPMOD,tmode)
            call addpath(LPCDB,tfile,concat)
            if(iappw.gt.0.and.iappw.le.200)then
              write(doit,'(3a,3i4,3a)') 'pdb -mode ',tmode,
     &          ' -s ',iappw,iappx+10,iappy+40,' -file ',
     &          tfile(1:lnblnk(tfile)),' &'
            else
              write(doit,'(5a)') 'pdb -mode ',tmode,
     &          ' -s 0 0 0 -file ',tfile(1:lnblnk(tfile)),' &'
            endif
            call usrmsg(' ','staring plant db module.','-')
            call runit(doit,tmode)
            moddb=.true.
          else
            goto 66
          endif
        endif
      ELSEIF(INO.EQ.9)THEN

C Profiles database.
 40     ltmp=LPRFDB
        write(outs,'(2a)') 'Options for event profiles db: ',
     &    LTMP(1:lnblnk(LTMP))
        H(1)= '   Events Database '
        H(3)= ' '
        H(4)= 'Profiles in this database are currently used to  '
        H(5)= 'assist in the defintion of zone operations.  The'
        H(6)= 'standard is found in /usr/esru/esp-r/databases '
        H(7)= ' '
        H(8)= ' The data requirements are summarised below :- '
        H(9)= ' '
        H(10)=' for each profile - number of events.'
        H(11)=' '
        H(12)=' for each event - start and finish hours'
        H(13)='                  percentage of first magnitude '
        H(14)='                  percentage of second magnitude '
        H(15)=' '
        H(16)='The following options can be selected:'
        H(17)=' '
        H(18)='a) If the file exists than you can browse the database '
        H(19)='   and if you have permission to update the file you'
        H(20)='   can edit the entities in the database.'
        H(21)=' '
        H(22)='b) select another file: you will asked for a file'
        H(23)='   name and if it is found you can browse or edit it.'
        H(24)=' '
        H(25)=' '
        H(26)='c) make a new database: a new database will be created '
        H(27)='   based on the file name you supply.'
        H(28)=' '
        H(29)='d) copy default database: a project copy of the default'
        H(30)='  database will be made and you will be offered a '
        H(31)='  chance to rename it.'
        CALL ERPFREE(IPRODB,ISTAT)

C Get length of path to where esp-r databases were installed.
        write(linstd,'(2a)') dinstpath(1:lnblnk(dinstpath)),
     &    '/databases'
        linst=lnblnk(linstd)
        call FINDFIL(LTMP,XST)
        IF(.NOT.XST)THEN
          idno=2
          isw=0
          call MENUATOL(outs,'Event profile options:',
     &      'a browse/edit (NOT APPLICABLE)','b select another file',
     &      'c make a new database','d copy the default database',
     &      ' ',' ',' ',' ',' ',' ',' ',' ',isw,idno,31)
          copydef=.true.
        elseif(LTMP(1:linst).eq.linstd(1:linst))then

C If corportate database then offer the following choices:
          idno=1
          isw=0
          call MENUATOL(outs,'Event profile options:',
     &      'a browse or edit this file','b select another file',
     &      'c make a new database','d make project copy of database',
     &      'e binary > ascii','f ascii > binary',' ',' ',' ',' ',' ',
     &      ' ',isw,idno,31)
          copydef=.false.
        else

C If db exists locally offer the following choices:
          idno=1
          isw=0
          call MENUATOL(outs,'Event profile options:',
     &      'a browse or edit this file','b select another file',
     &      'c make a new database','d copy the default database',
     &      'e binary > ascii','f ascii > binary',' ',' ',' ',' ',
     &      ' ',' ',isw,idno,31)
          copydef=.true.
        endif

C Act on the users choice. If nothing selected return to main menu.
        if(isw.eq.0)then
          goto 3
        elseif(isw.eq.1)then

C If file exists open it, test file type, get number of items and close.
          if(XST)then
            IER=0
            call EFOPRAN(IPRODB,LTMP,10,1,IER)
            IF(ier.eq.0)then
              LPRFDB=LTMP
              CALL USRMSG(' opened profiles db...',' ','-')
              IREC=1
              READ(IPRODB,REC=IREC,IOSTAT=ISTAT,ERR=450)NITEMS
              CALL USRMSG(' opened profiles db...ok',' ','-')
              CALL ERPFREE(IPRODB,ISTAT)

C Get logical name of child process terminal type, expand model 
C name to include the path and create a string to drive viewer.
              call tstamp('>','PRJ: start pro')
              doit = ' '
              call tchild(ICPMOD)
              call termode(ICPMOD,tmode)
              call addpath(LPRFDB,tfile,concat)
              write(doit,'(5a)') 'pro -mode ',tmode,' -file ',
     &                    tfile(1:lnblnk(tfile)),' &'
              call runit(doit,tmode)
              moddb=.true.
            else
              call usrmsg('Sorry, error opening the file.',
     &          'Please use one of the other options.','W')
              goto 40
            endif
          else
            call usrmsg('Sorry there is no file to browse/edit.',
     &        'Please use one of the other options. ','W')
            goto 40
          endif
        elseif(isw.eq.2)then

          H(1)='An event profiles db holds a schedule of patterns'
          H(2)='over a day. '
          CALL EASKS(ltmp,' Event profiles database?',
     &      ' ',72,DPRFDB,'event profiles database',IER,1)
          if(ltmp(1:2).ne.'  '.and.ltmp(1:4).ne.'UNKN')then
            LPRFDB=ltmp
          else
            goto 40
          endif
          CALL ERPFREE(IPRODB,ISTAT)
          call FINDFIL(LPRFDB,XST)
          IF(XST)THEN

C If file exists and user wants to browse then scan the file and
C use the editing facility.
            write(outs,'(2a)') 'Accessing profiles db ',
     &        LPRFDB(1:lnblnk(LPRFDB))
            call edisp(iuout,outs)

C Get logical name of child process terminal type, expand model 
C name to include the path and create a string to drive viewer.
            call tstamp('>','PRJ: start pro')
            doit = ' '
            call tchild(ICPMOD)
            call termode(ICPMOD,tmode)
            call addpath(LPRFDB,tfile,concat)
            write(doit,'(5a)') 'pro -mode ',tmode,' -file ',
     &        tfile(1:lnblnk(tfile)),' &'
            call runit(doit,tmode)
            moddb=.true.
          else
            write(outs,'(2a)') LPRFDB(1:lnblnk(LPRFDB)),
     &        ' does not appear to exist.'
            call edisp(iuout,outs)
            goto 40
          endif
        elseif(isw.eq.3)then

C No event profile db found so set-up minimal common block, create
C a new db, populate it and present editing facility.
          h(1)='The suggested name of this database is based on the '
          h(2)='project name. '
          lr=lnblnk(cfgroot)
          if(dbspth(1:2).eq.'  '.or.dbspth(1:2).eq.'./')then
            write(LTMP,'(2a)') cfgroot(1:lr),'.profiledb'
          else
            write(LTMP,'(4a)') dbspth(1:lnblnk(dbspth)),fs,
     &        cfgroot(1:lr),'.profiledb'
          endif
          H(1)='An event profiles db holds a schedule of patterns'
          H(2)='over a day. '
          clkok=.false.
 42       CALL EASKSCMD(ltmp,' Event profiles database?',
     &      ' ','cancel',clkok,72,DPRFDB,'event profiles database',
     &      IER,2)
          if(clkok) goto 3
          if(ltmp(1:2).ne.'  '.and.ltmp(1:4).ne.'UNKN')then
            LPRFDB=ltmp
          else
            goto 42
          endif

C Create a minimal events databases (code similar to pro.F).
          moddb=.true.
          call EFOPRAN(IPRODB,LPRFDB,10,3,IER)
          NITEMS = 1
          NO(1) = 2
          NCG(1)= 1
          DESCP(1)='First profile'
          ICGS1(1)=0
          ICGF1(1)=24
          CGS1(1)=100.0
          CGL1(1)=100.0
          lastrec=4
          IREC = 1
          WRITE(IPRODB,REC=IREC,IOSTAT=ISTAT,ERR=450) NITEMS
          IREC=NO(1)
          WRITE(IPRODB,REC=IREC,IOSTAT=ISTAT,ERR=450)NCG(1)
          IREC=IREC+1
          WRITE(IPRODB,REC=IREC,IOSTAT=ISTAT,ERR=450)DESCP(1)
          IREC=IREC+1
          WRITE(IPRODB,REC=IREC,IOSTAT=ISTAT,ERR=450)
     &          ICGS1(1),ICGF1(1),CGS1(1),CGL1(1)
          CALL ERPFREE(IPRODB,ISTAT)

C If file exists and user wants to browse then scan the file and
C use the editing facility.
          write(outs,'(2a)') LPRFDB(1:lnblnk(LPRFDB)),' created.'
          dok=.true.
          h(1)='An empty profiles database has been created. It'
          h(2)='is useless unless it is populated with data. If '
          h(3)='you have the required data, use this facility '
          h(4)='to do this.'
          CALL ASKOK(outs,' Browse or edit database?',OK,dok,4)
          if(OK)then

C Get logical name of child process terminal type, expand model 
C name to include the path and create a string to drive viewer.
            call tstamp('>','PRJ: start pro')
            doit = ' '
            call tchild(ICPMOD)
            call termode(ICPMOD,tmode)
            call addpath(LPRFDB,tfile,concat)
            write(doit,'(5a)') 'pro -mode ',tmode,' -file ',
     &                  tfile(1:lnblnk(tfile)),' &'
            call runit(doit,tmode)
          endif
        elseif(isw.eq.4)then

C Copy the standard db to project folder. Suggest a local
C file name based on the project root name. Lastly do the copy.
C If the default is to be copied ask for local name. Use LTMP for
C the file name as known to esp-r and LCOPY for the system cp call.   
          if(copydef)then
            call edisp(iuout,'The source file is:')
            call edisp(iuout,DPRFDB)
          else
            call edisp(iuout,'The source file is:')
            call edisp(iuout,LPRFDB)
          endif
          h(1)='The suggested name of this database is based on the '
          h(2)='project name. '
          lr=lnblnk(cfgroot)
          if(dbspth(1:2).eq.'  '.or.dbspth(1:2).eq.'./')then
            write(LTMP,'(2a)') cfgroot(1:lr),'.eventdb'
          else
            write(LTMP,'(4a)') dbspth(1:lnblnk(dbspth)),fs,
     &        cfgroot(1:lr),'.eventdb'
          endif
 244      CALL EASKS(LTMP,
     &      'Database name after it is copied into the project?',
     &      ' ',72,'event.db','copied events database',IER,2)
          call isunix(unixok)
          IF(LTMP(1:2).NE.'  ')then
            write(LCOPY,'(3a)') path(1:lnblnk(path)),fs,
     &        LTMP(1:lnblnk(LTMP))
            if(copydef)then
              doit = ' '
              if(unixok)then
                write(doit,'(4a)',IOSTAT=IOS,ERR=3) 'cp ',
     &            DPRFDB(1:lnblnk(DPRFDB)),' ',LCOPY(1:lnblnk(LCOPY))
              else
                write(doit,'(4a)',IOSTAT=IOS,ERR=3) 'copy /y ',
     &            DPRFDB(1:lnblnk(DPRFDB)),' ',LCOPY(1:lnblnk(LCOPY))
              endif
              call usrmsg('copying default file via',doit,'-')
              call runit(doit,'-')
              LPRFDB=LTMP
            else
              doit = ' '
              if(unixok)then
                write(doit,'(4a)',IOSTAT=IOS,ERR=3) 'cp ',
     &            LPRFDB(1:lnblnk(LPRFDB)),' ',LCOPY(1:lnblnk(LCOPY))
              else
                write(doit,'(4a)',IOSTAT=IOS,ERR=3) 'copy /y ',
     &            LPRFDB(1:lnblnk(LPRFDB)),' ',LCOPY(1:lnblnk(LCOPY))
              endif
              call usrmsg('copying file via',doit,'-')
              call runit(doit,'-')
              LPRFDB=LTMP
            endif
            moddb=.true.
            write(outs,'(2a)') 'Accessing event profiles db:',
     &        LPRFDB(1:lnblnk(LPRFDB))
            call edisp(iuout,outs)

C Get logical name of child process terminal type, expand model 
C name to include the path and create a string to drive viewer.
            call tstamp('>','PRJ: start pro')
            doit = ' '
            call tchild(ICPMOD)
            call termode(ICPMOD,tmode)
            call addpath(LPRFDB,tfile,concat)
            write(doit,'(5a)') 'pro -mode ',tmode,' -file ',
     &        tfile(1:lnblnk(tfile)),' &'
            call runit(doit,tmode)
          else
            goto 244
          endif
        elseif(isw.eq.5)then

C Profile db: BINARY > ASCII. 
          call edisp(iuout,'Use the module pro for BINARY > ASCII...')
        elseif(isw.eq.6)then

C Profile db: ASCII > BINARY.
          call edisp(iuout,'Use the module pro for ASCII > BINARY...')
        endif
      ELSEIF(INO.EQ.10)THEN

C Optical database.
  50    ltmp=LOPTDB
        write(outs,'(2a)') 'Options for optical properties db: ',
     &    LTMP(1:lnblnk(LTMP))
        H(1)='The optical properties of multilayer constructions'
        H(2)='are defined in an optical database.  The data include'
        H(3)='angular (0, 40, 55, 70, 80 degrees from normal) solar' 
        H(4)='transmission and absorption at each layer.'
        H(5)=' '
        H(6)='The following options can be selected:'
        H(7)=' '
        H(8)='a) If the file exists than you can browse the database '
        H(9)='   and if you have permission to update the file you'
        H(10)='   can edit the entities in the database.'
        H(11)=' '
        H(12)='b) select another file: you will asked for a file'
        H(13)='   name and if it is found you can browse or edit it.'
        H(14)=' '
        H(15)=' '
        H(16)='c) make a new database: a new database will be created '
        H(17)='   based on the file name you supply.'
        H(18)=' '
        H(19)='d) copy default database: a project copy of the default'
        H(20)='  database will be made and you will be offered a '
        H(21)='  chance to rename it.'
        CALL ERPFREE(IOPTDB,ISTAT)
        call FINDFIL(LTMP,XST)
        IF(.NOT.XST)THEN
          idno=2
          isw=0
          call MENUATOL(outs,'Optical properties options:',
     &      'a browse/edit (NOT APPLICABLE)','b select another file',
     &      'c make a new database','d copy the default database',
     &      ' ',' ',' ',' ',' ',' ',' ',' ',isw,idno,21)
          copydef=.true.
        elseif(LTMP(1:25).eq.'/usr/esru/esp-r/databases'.or.
     &         LTMP(1:28).eq.'c:\\user\\esru\\esp-r\\databases')then

C If corportate database then offer the following choices:
          idno=1
          isw=0
          call MENUATOL(outs,'Optical properties options:',
     &      'a browse or edit this file','b select another file',
     &      'c make a new database','d make project copy of database',
     &      ' ',' ',' ',' ',' ',' ',' ',' ',isw,idno,21)
          copydef=.false.
        else

C If db exists locally offer the following choices:
          idno=1
          isw=0
          call MENUATOL(outs,'Optical properties options:',
     &      'a browse or edit this file','b select another file',
     &      'c make a new database','d copy the default database',
     &      ' ',' ',' ',' ',' ',' ',' ',' ',isw,idno,21)
          copydef=.true.
        endif

C Act on the users choice. If no choice, return to main menu.
        if(isw.eq.0)then
          goto 3
        elseif(isw.eq.1)then

C If file exists read it and enter editing facility.
          if(XST)then
            LOPTDB=ltmp
            IER=0
            SOPT='ALL'
            call tstamp('>','PRJ: enter optical db')
            CALL EROPTDB(0,ITRU,SOPT,GDESCR,IER)
            if(ier.ne.0)then
              call usrmsg('Problem encountered with optical database!',
     &          'Please check database location and content.','W')
              OPTKOK=.FALSE.
              goto 50
            else
              OPTKOK=.TRUE.
              call EDOPT(IIER)
            endif
          else
            call usrmsg('Sorry there is no file to browse/edit.',
     &                  'Please use one of the other options. ','W')
            goto 50
          endif
        elseif(isw.eq.2)then
          H(1)='An optical properties database holds information for'
          H(2)='transparent constructions. It is closely related to'
          H(3)='the constructions database referenced by the project.'

          CALL EASKS(ltmp,' Optical properties database?',
     &      ' ',72,DOPTDB,'optical properties database',IER,1)
          if(ltmp(1:2).ne.'  '.and.ltmp(1:4).ne.'UNKN')then
            LOPTDB=ltmp
          else
            goto 50
          endif
          CALL ERPFREE(IOPTDB,ISTAT)
          call FINDFIL(LOPTDB,XST)
          IF(XST)THEN

C If file exists and user wants to browse then scan the file and
C use the editing facility.
            write(outs,'(2a)') 'Accessing optics db ',
     &        LOPTDB(1:lnblnk(LOPTDB))
            call edisp(iuout,outs)
            SOPT='ALL'
            ier=0
            call tstamp('>','PRJ: enter optical db')
            CALL EROPTDB(0,ITRU,SOPT,GDESCR,IER)
            if(ier.ne.0)then
             call usrmsg('Problem encountered with optical database!',
     &         'Please check database location and content.','W')
              OPTKOK=.FALSE.
              goto 50
            else
              OPTKOK=.TRUE.
              call EDOPT(IIER)
            endif
          else
            write(outs,'(2a)') LOPTDB(1:lnblnk(LOPTDB)),
     &        ' does not appear to exist.'
            call edisp(iuout,outs)
            goto 50
          endif
        elseif(isw.eq.3)then

C No optics db found so set-up minimal common block, create
C a new db, populate it and present editing facility.
          h(1)='The suggested name of this database is based on the '
          h(2)='project name. '
          lr=lnblnk(cfgroot)
          if(dbspth(1:2).eq.'  '.or.dbspth(1:2).eq.'./')then
            write(LTMP,'(2a)') cfgroot(1:lr),'.opticsdb'
          else
            write(LTMP,'(4a)') dbspth(1:lnblnk(dbspth)),fs,
     &        cfgroot(1:lr),'.opticsdb'
          endif
          H(1)='An optics db holds properties of transparent'
          H(2)='constructions '
          clkok=.false.
 352      CALL EASKSCMD(ltmp,' Optics database?',
     &      ' ','cancel',clkok,72,'optics.db','optics database',IER,2)
          if(clkok) goto 3
          if(ltmp(1:2).ne.'  '.and.ltmp(1:4).ne.'UNKN')then
            LOPTDB=ltmp
          else
            goto 352
          endif

C Create a minimal optics databases (code similar to edoptic.F).
          moddb=.true.
          CALL EFOPSEQ(IOPTDB,LOPTDB,4,IER)
          write(IOPTDB,'(a)')'# optical properties db for transparent,'
          write(IOPTDB,'(a)')'# constructions and casual gain controls'
          write(IOPTDB,'(a)')'# '
          write(IOPTDB,'(a)')'# Glazed info follows:'
          GTYPE='SC_fictit'
          GDESCR='Fictitious 99/99'
          NTL=1
          VTRN=0.99
          SRF=0.01
          SAB=0.01
          UVAL=9.0
          DG(1)=0.998
          DG(2)=0.987
          DG(3)=0.986
          DG(4)=0.985
          DG(5)=0.984
          HG(1)=0.980
          HG(2)=0.970
          HG(3)=0.960
          HG(4)=0.950
          HG(5)=0.940
          RF(1)=1.52
          AB(1,1)=0.001
          AB(1,2)=0.001
          AB(1,3)=0.001
          AB(1,4)=0.001
          AB(1,5)=0.001
          CALL EMKOPTD(IOPTDB,GTYPE,GDESCR,IER)
          CALL ERPFREE(IOPTDB,ISTAT)
          OPTKOK=.TRUE.

C Scan the new file and use the editing facility.
          write(outs,'(3a)') 'Optics db ',LOPTDB(1:lnblnk(LOPTDB)),
     &       ' created.'
          dok=.true.
          h(1)='An empty optics database has been created. It is'
          h(2)='useless until it is populated with data. If you '
          h(3)='have the relevant information you can start now.'
          CALL ASKOK(outs,' Browse or edit it?',OK,dok,3)
          if(OK)then
            SOPT='ALL'
            ier=0
            call tstamp('>','PRJ: enter optical db')
            CALL EROPTDB(0,ITRU,SOPT,GDESCR,IER)
            if(ier.ne.0)then
              call usrmsg(' Problem encountered with optical database!',
     &          ' Please check database location and content.','W')
              OPTKOK=.FALSE.
              goto 352
            else
              OPTKOK=.TRUE.
              call EDOPT(IIER)
            endif
          endif
        elseif(isw.eq.4)then

C Copy the standard db to project folder. Suggest a local
C file name based on the project root name. Lastly do the copy.
C If the default is to be copied ask for local name. Use LTMP for
C the file name as known to esp-r and LCOPY for the system cp call.   
          if(copydef)then
            call edisp(iuout,'The source file is:')
            call edisp(iuout,DOPTDB)
          else
            call edisp(iuout,'The source file is:')
            call edisp(iuout,LOPTDB)
          endif
          h(1)='The suggested name of this database is based on the '
          h(2)='project name. '
          lr=lnblnk(cfgroot)
          if(dbspth(1:2).eq.'  '.or.dbspth(1:2).eq.'./')then
            write(LTMP,'(2a)') cfgroot(1:lr),'.opticdb'
          else
            write(LTMP,'(4a)') dbspth(1:lnblnk(dbspth)),fs,
     &        cfgroot(1:lr),'.opticdb'
          endif
  54      CALL EASKS(LTMP,
     &      'Database name after it is copied into the project?',
     &      ' ',72,'optics.db','copied optics database',IER,2)
          call isunix(unixok)
          IF(LTMP(1:2).NE.'  ')then
            write(LCOPY,'(3a)') path(1:lnblnk(path)),fs,
     &        LTMP(1:lnblnk(LTMP))
            if(copydef)then
              doit = ' '
              if(unixok)then
                write(doit,'(4a)',IOSTAT=IOS,ERR=3) 'cp ',
     &            DOPTDB(1:lnblnk(DOPTDB)),' ',LCOPY(1:lnblnk(LCOPY))
              else
                write(doit,'(4a)',IOSTAT=IOS,ERR=3) 'copy /y ',
     &            DOPTDB(1:lnblnk(DOPTDB)),' ',LCOPY(1:lnblnk(LCOPY))
              endif
              call usrmsg('copying default file via',doit,'-')
              call runit(doit,'-')
              LOPTDB=LTMP
            else
              doit = ' '
              if(unixok)then
                write(doit,'(4a)',IOSTAT=IOS,ERR=3) 'cp ',
     &            LOPTDB(1:lnblnk(LOPTDB)),' ',LCOPY(1:lnblnk(LCOPY))
              else
                write(doit,'(4a)',IOSTAT=IOS,ERR=3) 'copy /y ',
     &            LOPTDB(1:lnblnk(LOPTDB)),' ',LCOPY(1:lnblnk(LCOPY))
              endif
              call usrmsg('copying file via',doit,'-')
              call runit(doit,'-')
              LOPTDB=LTMP
            endif
            moddb=.true.
            write(outs,'(2a)') 'Accessing project optics db: ',
     &        LOPTDB(1:lnblnk(LOPTDB))
            call edisp(iuout,outs)
            SOPT='ALL'
            ier=0
            call tstamp('>','PRJ: enter optical db')
            CALL EROPTDB(0,ITRU,SOPT,GDESCR,IER)
            if(ier.ne.0)then
              call usrmsg(' Problem encountered with optical db!',
     &          ' Please check database location and content.','W')
              OPTKOK=.FALSE.
              goto 50
            else
              OPTKOK=.TRUE.
              call EDOPT(IIER)
            endif
          else
            goto 54
          endif
        endif
      ELSEIF(INO.EQ.11)THEN

C Place holder for mould database
         call UsrMsg(
     &   'the project manager does not currently start the mould',
     &   'databases directly (invoke mld manually).','W')
      ELSEIF(INO.EQ.13)THEN

C Menu help text.
        H(1)='Information on each of the databases is provided. '
        call easkatog('Help options:',' ','overview','climate',
     &   'materials','constructions','optics','plant','continue',ihd,1)
        if(ihd.eq.1)then
          H(1)='ESP-r is provided with a number of corporate (standard)'
          H(2)='databases located in the directory /usr/esru/esp-r/'
          H(3)='databases.  For some simulation models a user may'
          H(4)='require a bespoke version of a database.  In such a'
          H(5)='case the user may either copy a corporate database'
          H(6)='into a local directory for modification or simply begin'
          H(7)='from scratch.'
          H(8)=' '
          H(9)='In most cases a bespoke database may be created by'
          H(10)='copying a corporate database into the project'
          H(11)='directory (hint: give it a name identifiable with' 
          H(12)='the project) and then modifying it to fit the needs'
          H(13)='of the project.'
          H(14)=' '
          H(15)='Initially the database names will correspond to'
          H(16)='the defaults supplied by ESRU.  If these defaults'
          H(17)='are not found, the most likely reason is that they'
          H(18)='have not been correctly installed in folders'
          H(19)='/usr/esru/esp-r/climate & /usr/esru/esp-r/databases.'
          CALL PHELPD('databases overview',19,'-',0,0,IER)
        elseif(ihd.eq.2)then
          H(1)='Climate databases are hourly sets of values from '
          H(2)='1h00 on 1 Jan to 24h00 on 31 December.  For each hour' 
          H(3)=' the following data is held:'
          H(4)=' '
          H(5)=' Diffuse horizontal solar intensity (W/m^2)'
          H(6)=' Dry bulb temp. (tenths of degree C ie. 102 = 10.2C)'
          H(7)=' Direct normal or global horiz. solar intensity (W/m^2)'
          H(8)=' Wind speed (tenths m/s ie. 15 = 1.5 m/s)'
          H(9)=' Wind direction (degrees from north, clockwise)'
          H(10)=' Relative humidity (percent)'
          CALL PHELPD('climate overview',10,'clm_dbitems ',0,0,IER)
        elseif(ihd.eq.3)then
          H(1)='The materials database holds the density, specific' 
          H(2)='heat, conductivity, diffusion resistance and surface'
          H(3)='absorption and emissivity of elements such as earth,' 
          H(4)='stone, steel, oak etc.  This database is normally in' 
          H(5)='a binaryformat for quick random access although an'
          H(6)='ASCII form is available fortransfer between machine' 
          H(7)='types.'
          CALL PHELPD('materials db overview',7,'materials_db',0,0,IER)
        elseif(ihd.eq.4)then
          H(1)='A multilayer construction database defines the com-'
          H(2)='position of constructions such as walls and glazing'
          H(3)='systems in terms of layers of materials of particular'
          H(4)='thickness in a particular order and, where appropriate,' 
          H(5)='with a named set of optical properties. '
          CALL PHELPD('constr db overview',5,'mlc_database',0,0,IER)
        elseif(ihd.eq.5)then
          H(1)='The optical properties of multilayer constructions'
          H(2)='are defined in an optical database.  The data include'
          H(3)='angular (0, 40, 55, 70, 80 degrees from normal) solar' 
          H(4)='transmission and absorption at each layer.'
          CALL PHELPD('optics overview',4,'optical_db  ',0,0,IER)
        elseif(ihd.eq.6)then
          H(1)='The plant components database is a binary, random '
          H(2)='access file holding plant component descriptions to '
          H(3)='enable the establishment of component state-space '
          H(4)=' representations used by ESP-r.'
          CALL PHELPD('plant db overview',4,'plant_db_fld',0,0,IER)
        endif
      ELSE
        INO=-4
        GOTO 3
      ENDIF
      call usrmsg(' ',' ','-')
      INO=-4
      GOTO 3

C Error messages.
   13 CALL USRMSG(' File write error in asci materials ',LTMPFL,'W')
      IER=1
      return

450   call edisp(iuout,' Event profile file error  ')
      goto 3

      END

C ********** opendb
C Open materials constructions, multi-layer constructions and
C optical properties databases.

      subroutine opendb(ier)
#include "building.h"
#include "net_flow.h"

      common/FILEP/IFIL
      common/pophelp/h(60)
      common/OUTIN/IUOUT,IUIN
      common/CONDB/LFCON,IFCON,LFMUL,IFMUL
      COMMON/MFLWPR/NPRE,FPRE(MPOS,MPRD)
      COMMON/AFN/IAIRN,LAPROB,LAPRES,LAFRES,ICAAS(MCOM)
      common/FOPENED/CFGOK,MLDBOK,CONDBOK,CTLOK,OPTKOK

      logical    XST,CFGOK,MLDBOK,CONDBOK,CTLOK,OPTKOK

      character H*72,LFCON*72,LFMUL*72,LASCI*72,DFILE*72
      character SOPT*12,outs*124,GDESCR*36
      CHARACTER*72 LAPROB,LAPRES,LAFRES

      IER=0

C Open currently named materials database.  Note that
C by a minor rewrite of ICLN in rec 601 we can get by with changing
C this to 24 words wide.
      CALL ERPFREE(IFCON,ISTAT)
      call EFOPRAN(IFCON,LFCON,40,0,IER)
      IF(ier.ne.0)THEN
        write(outs,'(3a)') ' No materials db ',
     &     LFCON(1:lnblnk(LFCON)),' found!'
        call edisp(iuout,outs)
        CONDBOK=.FALSE.
      else
        CONDBOK=.TRUE.
      endif
        
C Read multilayer db information into common.
      CALL ERPFREE(IFMUL,ISTAT)
      call FINDFIL(LFMUL,XST)
      if(XST)then
        CALL ERMLDB(0,IUOUT,IER)
        IF(IER.eq.1)then
          write(outs,'(3a)') 
     &    ' A few problems with materials used by constructions db ',
     &     LFCON(1:lnblnk(LFCON)),' !'
          call edisp(iuout,outs)
          MLDBOK=.FALSE.
        ELSEIF(IER.eq.2)then

C There were lots of undefined materials so likely the materials
C database is for the wrong machine type. Guess the name of
C the ascii version and if it exists, offer to convert it.
          h(1)='It is likely that the materials db associated'
          h(2)='with this model is for a different computer '
          h(3)='type. ESP-r will try to find an ASCII version '
          h(4)='of this file and convert it if you agree. '
          IAF=IFIL+1
          LASCI=' '
          write(LASCI,'(2a)') LFCON(1:lnblnk(LFCON)),'.a'
          CALL EFOPSEQ(IAF,LASCI,1,IER)
          if(ier.eq.0)then
            CALL ERPFREE(IAF,ISTAT)
            call edisp(iuout,
     &        'Attempting to convert an ASCII materials db into a')
            call edisp(iuout,
     &        'binary materials db that matches the constructions db.')
            CALL MKBPRC(IUOUT,IAF,LASCI,IER)
            if(ier.eq.0)then
              call usrmsg(
     &          'An ASCII materials file was found and has been',
     &          'converted re-scanning constructions...',
     &          'P')
              CALL ERMLDB(0,IUOUT,IER)
              if(ier.eq.0)then
                MLDBOK=.TRUE.
                call usrmsg(
     &            'An ASCII materials file was found and has been',
     &            'converted re-scanning constructions...done.',
     &            '-')
              else
                MLDBOK=.FALSE.
                call usrmsg(
     &            'An ASCII materials file was found and has been',
     &            'converted re-scanning constructions...failed.',
     &            'W')
              endif
            else
              call usrmsg(
     &        'An materials file was not found or was not readable and',
     &        'you should correct this before using constructions.',
     &           'W')
              MLDBOK=.FALSE.
            endif
          else

C Ask user for ascii materials database to convert.
          H(1)='The materials database holds the thermo-physical'
          H(2)='properties of a range of materials such as'
          H(3)='brick, concrete, insulation, etc. An asci version'
          H(4)='of this database is ofen used when transporting models'
          H(5)='between operating systems. '
            IAF=IFIL+1
            DFILE=' '
            CALL EASKS(LASCI,' Materials database (ASCII)?',
     &        ' ',72,DFILE,'materials db (ascii)',
     &        IER,5)
            CALL MKBPRC(IUOUT,IAF,LASCI,IER)
            if(ier.eq.0)then
              call usrmsg(
     &          'An ASCII materials file was found and has been',
     &          'converted attempting re-scan the constructions',
     &          'W')
              CALL ERMLDB(0,IUOUT,IER)
              if(ier.eq.0)then
                MLDBOK=.TRUE.
              else
                MLDBOK=.FALSE.
              endif
            else
              call usrmsg(
     &        'An materials file was not found or was not readable and',
     &        'you should correct this before using constructions.',
     &          'W')
              MLDBOK=.FALSE.
            endif
          endif
        else

C Scan was ok so set mldbok to true.
          MLDBOK=.TRUE.
        endif
      else
        write(outs,'(3a)') ' No constructions db ',
     &     LFCON(1:lnblnk(LFCON)),' found!'
        call edisp(iuout,outs)
        MLDBOK=.FALSE.
      endif

C Open optical database and read into common.
      SOPT='ALL'
      CALL EROPTDB(0,iuout,SOPT,GDESCR,IER)
      if(ier.ne.0)then
        call usrmsg(' Optical properties db not found or there was a',
     &  ' problem reading it!','W')
        OPTKOK=.FALSE.
      else
        OPTKOK=.TRUE.
      endif

C Open the pressure coef db (needed for network flow descriptions).
      call FINDFIL(LAPRES,XST)
      if(XST)then
        CALL ERPRCDB(LAPRES,0,3,IER)
        call usrmsg(' ',' ','-')
      endif

      return
      end

C ********** EDDBCLM
C Changes the climate database current cfg file references.
C moddb is
C APP is 4 character file name modifier (from version facility)
C     if blank then no file name change implied.
C ISHD is -1 if no change in shading file names are required, otherwise
C     use the APP characters.
C from version manager
      SUBROUTINE EDDBCLM(moddb,APP,ISHD)
#include "building.h"
      common/FILEP/IFIL
      common/pophelp/h(60)
      common/OUTIN/IUOUT,IUIN
      common/C22/ICLIM,LCLIM
      common/clmlst/cdblbl,cdblfil
      common/paths/zonepth,netpth,ctlpth,imgpth,radpth,docpth,tmppth,
     &             dbspth
      common/C21/IFCFG,cfgroot,LCFGF
      COMMON/C1/NCOMP,NCON
      common/C2/LSNAM,NCCODE(MCOM),LPROJ(MCOM),LGEOM(MCOM),
     &          LSHAD(MCOM),LTHRM(MCOM),INDUTL(MCOM),LUTIL(MCOM)
      common/DEFLT1/DCLIM,DAPRES,DFCON,DFMUL,DOPTDB,DPRFDB,DPCDB
      common/appw/iappw,iappx,iappy
      COMMON/PERC/ID1,IM1,IT1,ID2,IM2,IT2,IDS,IDF,INEW
      common/rpath/path
      COMMON/CLMDT0/CLAT,CLONG
      COMMON/CLMDT1/CLMLOC
      COMMON/C4/XLAT,XLON
      COMMON/PREC8/SLAT,SLON
      COMMON/SET1/IYEAR,IBDOY,IEDOY,IFDAY,IFTIME
      COMMON/INDICS/IVF(MCOM),ISI(MCOM),IHC(MCOM),
     &              ITW(MCOM),ICGC(MCOM),IOBS(MCOM)
      common/deflt4/dinstpath

      CHARACTER*72 H,LCLIM,CDBLFIL,DFILE,LASCI,LTMP,TAFILE,TFILE
      CHARACTER CDBLBL*20,DOIT*124,FS*1,TMODE*8,CLMLOC*30,LCOPY*72
      CHARACTER OUTS*124,APP*4,ext*4
      CHARACTER*24 ZONEPTH,NETPTH,CTLPTH,IMGPTH,RADPTH,DBSPTH
      CHARACTER*24 DOCPTH,TMPPTH
      character*72 DCLIM,DAPRES,DFCON,DFMUL,DOPTDB,DPRFDB,DPCDB,PATH
      LOGICAL CLKOK,OK,CONCAT,COPYDEF,MODDB,XST,DOK,UNIXOK
      character cfgroot*24,LCFGF*72,linstd*32
      character dinstpath*48
      CHARACTER*72 LSNAM,LPROJ,LGEOM,LSHAD,LUTIL,LTHRM,NNAME
      dimension ICLM(24,6)

C Set folder separator (fs) to \ or / as required.
      call isunix(unixok)
      if(unixok)then
        fs = char(47)
      else
        fs = char(92)
      endif

      moddb=.false.

 552  LTMP=LCLIM
      H(1)='Climate databases are hourly sets of values from '
      H(2)='1h00 on 1 Jan to 24h00 on 31 December.  For each hour' 
      H(3)=' the following data is held:'
      H(4)=' '
      H(5)=' Diffuse horizontal solar intensity (W/m^2)'
      H(6)=' Dry bulb temp. (tenths of degree C ie. 102 = 10.2C)'
      H(7)=' Direct normal or global horiz. solar intensity (W/m^2)'
      H(8)=' Wind speed (tenths m/s ie. 15 = 1.5 m/s)'
      H(9)=' Wind direction (degrees from north, clockwise)'
      H(10)=' Relative humidity (percent)'
      H(11)=' '
      H(12)='The following options can be selected:'
      H(13)=' '
      H(14)='a) If the file exists than you can browse the database '
      H(15)='   and if you have permission to update the file you'
      H(16)='   can edit the entities in the database.'
      H(17)=' '
      H(18)='b) select another file: you will asked for a file'
      H(19)='   name and if it is found you can browse or edit it.'
      H(20)=' '
      H(21)='c) make a new database: a new database will be created '
      H(22)='   based on the file name you supply.'
      H(23)=' '
      H(24)='d) copy default database: a project copy of the default'
      H(25)='  database will be made and you will be offered a '
      H(26)='  chance to rename it.'
      H(27)=' '
      H(28)='e) convert binary file to an (esp-r) ascii file '
      H(29)='   (typically for transport between machine types).'
      H(30)=' '
      H(31)='f) convert ascii (esp-r) climate file to a binary'
      H(32)='   suitable to the current computer.'
      H(33)=' '
      H(34)='g) convert an EPW file (which has already been edited'
      H(35)='   as per EPW_readme instructions) to an esp-r binary'
      H(36)='   climate file'
      CALL ERPFREE(ICLIM,ISTAT)

C Get length of path to where esp-r databases were installed.
      write(linstd,'(2a)') dinstpath(1:lnblnk(dinstpath)),
     &    '/databases'
      linst=lnblnk(linstd)
      call FINDFIL(LTMP,XST)
      IF(.NOT.XST)THEN
        idno=2
        isw=0
        call MENUATOL(outs,'Climate data options:',
     &      'a browse/edit (NOT APPLICABLE)','b select another file',
     &      'c make a new database','d copy the default database',
     &      ' ',' ',' ',' ',' ',' ',' ',' ',isw,idno,36)
        copydef=.true.
      elseif(LTMP(1:linst).eq.linstd(1:linst))then

C If corportate database then offer the following choices:
        idno=1
        isw=0
        call MENUATOL(outs,'Climate data options:',
     &    'a browse or edit this file','b select another file',
     &    'c make a new database','d make project copy of database',
     &    'e binary >> ascii export','f ascii >> binary import',
     &    'g EPW >> binary import',' ',' ',' ',' ',' ',isw,idno,36)
        copydef=.false.
      else

C If db exists locally offer the following choices:
        idno=1
        isw=0
        call MENUATOL(outs,'Climate data options:',
     &      'a browse or edit this file','b select another file',
     &      'c make a new database','d copy the default database',
     &      'e binary >> ascii export','f ascii >> binary import',
     &      'g EPW >> binary import',' ',' ',' ',' ',' ',isw,idno,36)
        copydef=.true.
      endif

C Act on the users choice. If no choice return to main menu.
      if(isw.eq.0)then
        RETURN
      elseif(isw.eq.1)then

C If file exists read it and enter editing facility.
        if(XST)then
          IER=0
          call EFOPRAN(ICLIM,LTMP,144,0,IER)
          if(ier.eq.0)then
            moddb=.true.
            LCLIM=LTMP
            CALL USRMSG(' Climate data opened.',' ','P')
          else
            call usrmsg('Problem encountered with climate data!',
     &        'Please check database location and content.','W')
            goto 552
          endif
        else
          call usrmsg('Sorry there is no file to browse/edit.',
     &                  'Please use one of the other options. ','W')
          goto 552
        endif
        CALL ERPFREE(ICLIM,ISTAT)

C Get logical name of child process terminal type, expand climate 
C name to include the path and create a string to drive clm.
        call tstamp('>','PRJ: start clm')
        doit = ' '
        call tchild(ICPMOD)
        call termode(ICPMOD,tmode)
        call addpath(LCLIM,tfile,concat)
        if(iappw.gt.0.and.iappw.le.200)then
          write(doit,'(3a,3i4,3a)') 'clm -mode ',tmode,
     &        ' -s ',iappw,iappx+10,iappy+10,' -file ',
     &        tfile(1:lnblnk(tfile)),' &'
        else
          write(doit,'(5a)') 'clm -mode ',tmode,' -file ',
     &        tfile(1:lnblnk(tfile)),' & '
        endif
        call edisp(iuout,' Invoking climate analysis facility.')
        call edisp(iuout,doit)
        CALL ASKOK(' ','Browse/edit new climate data?',OK,dok,3)
        if(ok) call runit(doit,tmode)
      elseif(isw.eq.2)then
        H(1)='Climate databases are hourly sets of values from '
        H(2)='1h00 on 1 Jan to 24h00 on 31 December. Please' 
        H(3)='specify which file in the list.'
        iuf=IFIL+1
        INQUIRE (FILE=cdblfil,EXIST=XST)
        if(XST)then
          call rdblist(IUF,cdblfil,LTMP,ier)
          if(ier.eq.0)then
            if(LTMP(1:12).eq.'USER_DEFINED')then
              LTMP='newclim'
 291          CALL EASKS(LTMP,' New climate file (esp-r binary) ?',
     &         ' ',72,DCLIM,'new climate file',IER,15)
              IF(LTMP.EQ.' ')GOTO 291
              IER=0
            elseif(LTMP.eq.'UNKNOWN'.or.LTMP(1:2).eq.'  ')then
              call usrmsg(' Nothing selected from the list ',
     &                    ' no change made...','W')
            else
              LCLIM=LTMP
            endif
          endif
        else
          call usrmsg(
     &       'No `climate db` list available so using default...',
     &       '(Check with your administrator about `climatelist` file)',
     &       'W')
          goto 552
        endif

        CALL ERPFREE(ICLIM,ISTAT)
        call FINDFIL(LCLIM,XST)
        IF(XST)THEN

C If file exists and user wants to browse then scan the file and
C use the editing facility.
          IER=0
          call EFOPRAN(ICLIM,LTMP,144,0,IER)
          if(ier.eq.0)then
            write(outs,'(2a)') 'Accessing ',LCLIM(1:lnblnk(LCLIM))
            call edisp(iuout,outs)
            call tstamp('>','PRJ: start clm')
            doit = ' '
            call tchild(ICPMOD)
            call termode(ICPMOD,tmode)
            call addpath(LCLIM,tfile,concat)
            if(iappw.gt.0.and.iappw.le.200)then
              write(doit,'(3a,3i4,3a)') 'clm -mode ',tmode,
     &            ' -s ',iappw,iappx+10,iappy+10,' -file ',
     &            tfile(1:lnblnk(tfile)),' &'
            else
              write(doit,'(5a)') 'clm -mode ',tmode,' -file ',
     &            tfile(1:lnblnk(tfile)),' & '
            endif
            CALL ASKOK(' ','Browse/edit selected climate data?',
     &                  OK,dok,3)
            if(ok)then
              call runit(doit,tmode)
              call edisp(iuout,' Invoking climate analysis facility.')
              call edisp(iuout,doit)
            endif
          else
            call usrmsg('Problem encountered with climate data!',
     &          'Please check database location and content.','W')
            goto 552
          endif
        else
          call usrmsg('Sorry there is no file to browse/edit.',
     &                'Please use one of the other options. ','W')
          goto 552
        endif
      elseif(isw.eq.3)then

C No climate db found so set-up minimal common block, create
C a new db, populate it and present editing facility.
        h(1)='The suggested name of this database is based on the '
        h(2)='project name. '
        lr=lnblnk(cfgroot)
        if(dbspth(1:2).eq.'  '.or.dbspth(1:2).eq.'./')then
          write(LTMP,'(2a)') cfgroot(1:lr),'.climate'
        else
          write(LTMP,'(4a)') dbspth(1:lnblnk(dbspth)),fs,
     &        cfgroot(1:lr),'.climate'
        endif
        clkok=.false.
 553    CALL EASKSCMD(LTMP,' Climate database?',
     &      ' ','cancel',clkok,72,DCLIM,'climate database',IER,2)
        if(clkok) RETURN
        if(ltmp(1:2).ne.'  '.and.ltmp(1:4).ne.'UNKN')then
          LCLIM=ltmp
        else
          goto 553
        endif

C Create a blank climate file (code similar to clm.F).
        moddb=.true.
        clmloc='new site'
        ID1=1
        IM1=1
        IT1=1
        ID2=31
        IM2=12
        IT2=24
        IDS=1
        IDF=365
        IYEAR=2006
        CLAT=50.
        CLONG=0.
        IDNGH=0
        IER=0
        call EFOPRAN(ICLIM,LCLIM,144,4,IER)

C Loop through days and zero the data to be written.
        DO 101 I=IDS,IDF
          IDD=I
          DO 201 J=1,24
            ICLM(J,1)=0
            ICLM(J,2)=0
            ICLM(J,3)=0
            ICLM(J,4)=0
            ICLM(J,5)=0
            ICLM(J,6)=50
  201     CONTINUE

C Transfer this to the binary file.
          IREC=IDD
          WRITE(ICLIM,REC=IREC,IOSTAT=ISTAT,ERR=1002)
     &     ((ICLM(J,K),K=1,6),J=1,24)
  101   CONTINUE

C Insert Climatic Year at tail of file and close.
        IREC=366
        IADN=IDNGH
        WRITE(ICLIM,REC=IREC,IOSTAT=ISTAT,ERR=1001)IYEAR,IADN
        IREC=367
        WRITE(ICLIM,REC=IREC)CLMLOC
        IREC=368
        WRITE(ICLIM,REC=IREC)CLAT,CLONG
        CALL ERPFREE(ICLIM,ISTAT)

        dok=.true.
        h(1)='An empty climate file has been created. It can`t'
        h(2)='be used for anything until it is populated with '
        h(3)='climate data.  '
        CALL ASKOK(' ','Browse/edit new climate data?',OK,dok,3)
        IF(OK)then

C Get logical name of child process terminal type, expand climate 
C name to include the path and create a string to drive clm.
          call tstamp('>','PRJ: start clm')
          doit = ' '
          call tchild(ICPMOD)
          call termode(ICPMOD,tmode)
          call addpath(LCLIM,tfile,concat)
          if(iappw.gt.0.and.iappw.le.200)then
            write(doit,'(3a,3i4,3a)') 'clm -mode ',tmode,
     &          ' -s ',iappw,iappx+10,iappy+10,' -file ',
     &          tfile(1:lnblnk(tfile)),' &'
          else
            write(doit,'(5a)') 'clm -mode ',tmode,' -file ',
     &          tfile(1:lnblnk(tfile)),' & '
          endif
          CALL ASKOK(' ','Browse/edit new climate data?',OK,dok,3)
          if(ok)then
            call runit(doit,tmode)
            call edisp(iuout,' Invoking climate analysis facility.')
            call edisp(iuout,doit)
          endif
        endif
      elseif(isw.eq.4)then

C Copy the standard db to project folder. Suggest a local
C file name based on the project root name. Lastly do the copy.
C If the default is to be copied ask for local name. Use LTMP for
C the file name as known to esp-r and LCOPY for the system cp call.   
        if(copydef)then
          call edisp(iuout,'The source file is:')
          call edisp(iuout,DCLIM)
        else
          call edisp(iuout,'The source file is:')
          call edisp(iuout,LCLIM)
        endif
        h(1)='The suggested name of this database is based on the '
        h(2)='project name. '
        lr=lnblnk(cfgroot)
        if(dbspth(1:2).eq.'  '.or.dbspth(1:2).eq.'./')then
          write(LTMP,'(2a)') cfgroot(1:lr),'.climate'
        else
          write(LTMP,'(4a)') dbspth(1:lnblnk(dbspth)),fs,
     &        cfgroot(1:lr),'.climate'
        endif
 554    CALL EASKS(LTMP,
     &      'Database name after it is copied into the project?',
     &      ' ',72,'climate.db','copied climate database',IER,2)
        call isunix(unixok)
        IF(LTMP(1:2).NE.'  ')then
          write(LCOPY,'(3a)') path(1:lnblnk(path)),fs,
     &        LTMP(1:lnblnk(LTMP))
          if(copydef)then
            doit = ' '
            if(unixok)then
              write(doit,'(4a)',IOSTAT=IOS) 'cp ',
     &          DCLIM(1:lnblnk(DCLIM)),' ',LCOPY(1:lnblnk(LCOPY))
            else
              write(doit,'(4a)',IOSTAT=IOS) 'copy /y ',
     &          DCLIM(1:lnblnk(DCLIM)),' ',LCOPY(1:lnblnk(LCOPY))
            endif
            call usrmsg('copying default file via',doit,'-')
            call runit(doit,'-')
            LCLIM=LTMP
          else
            doit = ' '
            if(unixok)then
              write(doit,'(4a)',IOSTAT=IOS) 'cp ',
     &          LCLIM(1:lnblnk(LCLIM)),' ',LCOPY(1:lnblnk(LCOPY))
            else
              write(doit,'(4a)',IOSTAT=IOS) 'copy /y ',
     &          LCLIM(1:lnblnk(LCLIM)),' ',LCOPY(1:lnblnk(LCOPY))
            endif
            call usrmsg('copying file via',doit,'-')
            call runit(doit,'-')
            LCLIM=LTMP
          endif
          moddb=.true.
          write(outs,'(2a)') 'Accessing climate file: ',
     &        LCLIM(1:lnblnk(LCLIM))
          call edisp(iuout,outs)
          call tstamp('>','PRJ: start clm')
          doit = ' '
          call tchild(ICPMOD)
          call termode(ICPMOD,tmode)
          call addpath(LCLIM,tfile,concat)
          if(iappw.gt.0.and.iappw.le.200)then
            write(doit,'(3a,3i4,3a)') 'clm -mode ',tmode,
     &          ' -s ',iappw,iappx+10,iappy+10,' -file ',
     &          tfile(1:lnblnk(tfile)),' &'
          else
            write(doit,'(5a)') 'clm -mode ',tmode,' -file ',
     &          tfile(1:lnblnk(tfile)),' & '
          endif
          CALL ASKOK(' ','Browse/edit copied climate data?',OK,dok,3)
          if(ok)then
            call runit(doit,tmode)
            call edisp(iuout,' Invoking climate analysis facility.')
            call edisp(iuout,doit)
            call edisp(iuout,' Climate analysis facility complete.')
          endif
        else
          goto 554
        endif
      elseif(isw.eq.5)then

C Climate binary >> ascii export.
C Confirm suggested name and then write out asci file.
        H(1)='Some databases are held as BINARY files for speed'
        H(2)='of access and security. It is sometimes convenient'
        H(3)='to convert to ASCII - e.g. for implementation under'
        H(4)='a different operating system or for word processing. '
        DFILE='./climate.a'
        clkok=.false.
        LASCI=' '
        write(LASCI,'(2a)') LCLIM(1:lnblnk(LCLIM)),'.a'
        CALL EASKSCMD(LASCI,' Climate data (ASCII)?',
     &     ' ','cancel',clkok,72,DFILE,'climate data (ascii)',IER,4)
        if(clkok)then
          RETURN
        else

C Convert both binary and asci file names into full paths prior
C to asking clm to do the conversion.
          call addpath(LCLIM,tfile,concat)
          call addpath(LASCI,tafile,concat)
          write(outs,'(2a)') 'Converting climate data: ',
     &        LCLIM(1:lnblnk(LCLIM))
          call edisp(iuout,outs)
          call tstamp('>','PRJ: start clm for conversion')
          doit = ' '
          write(doit,'(5a)') 'clm -mode text -file ',
     &        tfile(1:lnblnk(tfile)),' -act bin2asci silent ',
     &        tafile(1:lnblnk(tafile))
          CALL ASKOK(' ','Browse/edit exported climate data?',OK,dok,3)
          if(ok)then
            call runit(doit,tmode)
            call edisp(iuout,' Invoking climate analysis facility.')
            call edisp(iuout,doit)
            call edisp(iuout,' Climate conversion complete.')
          endif
        endif
      elseif(isw.eq.6)then

C Climate ascii >> binary import
C Confirm suggested name and then write out binary file.
        H(1)='Some databases are held as BINARY files for speed'
        H(2)='of access and security. There are machine dependant'
        H(3)='and can be created from ASCII file versions.'
        DFILE='./climate.a'
        clkok=.false.
        LASCI=' '
        write(LASCI,'(2a)') LCLIM(1:lnblnk(LCLIM)),'.a'
        CALL EASKSCMD(LASCI,' Climate data (ASCII)?',
     &     ' ','cancel',clkok,72,DFILE,'climate data (ascii)',IER,3)
        if(clkok) RETURN

        ltmp=LCLIM
        CALL EASKSCMD(ltmp,' Climate data (binary)?',
     &     ' ','cancel',clkok,72,DFILE,'climate data (binary)',IER,3)
        if(ltmp(1:2).ne.'  '.and.ltmp(1:4).ne.'UNKN')then
          LCLIM=ltmp
        endif
        if(clkok)then
          RETURN
        else

C Convert both binary and asci file names into full paths prior
C to asking clm to do the conversion.
          call addpath(LCLIM,tfile,concat)
          call addpath(LASCI,tafile,concat)
          write(outs,'(2a)') 'Converting climate data: ',
     &        LCLIM(1:lnblnk(LCLIM))
          call edisp(iuout,outs)
          call tstamp('>','PRJ: start clm for conversion')
          doit = ' '
          write(doit,'(5a)') 'clm -mode text -file ',
     &        tfile(1:lnblnk(tfile)),' -act asci2bin silent ',
     &        tafile(1:lnblnk(tafile))
          CALL ASKOK(' ','Browse/edit exported climate data?',OK,dok,3)
          if(ok)then
            call runit(doit,tmode)
            call edisp(iuout,' Invoking climate analysis facility.')
            call edisp(iuout,doit)
            call edisp(iuout,' Climate conversion complete.')
          endif
        endif
      elseif(isw.eq.7)then

C EPW >> binary import
C Confirm suggested name and then write out binary file.
        H(1)='ESP-r can import climate data from EPW format files'
        H(2)='(some editing is required, see instructions in the'
        H(3)='file EPW_readme). This option converts EPW files'
        H(4)='to ESP-r climate files.'
        DFILE='./climate.a'
        clkok=.false.
        LASCI=' '
        write(LASCI,'(2a)') LCLIM(1:lnblnk(LCLIM)),'.a'
        CALL EASKSCMD(LASCI,' Climate data (EPW)?',
     &     ' ','cancel',clkok,72,DFILE,'climate data (EPW)',IER,4)
        if(clkok) RETURN

        ltmp=LCLIM
        CALL EASKSCMD(ltmp,' Climate data (esp-r binary)?',
     &     ' ','cancel',clkok,72,DFILE,'climate data (binary)',IER,4)
        if(ltmp(1:2).ne.'  '.and.ltmp(1:4).ne.'UNKN')then
          LCLIM=ltmp
        endif
        if(clkok)then
          RETURN
        else

C Convert both binary and asci file names into full paths prior
C to asking clm to do the conversion.
          call addpath(LCLIM,tfile,concat)
          call addpath(LASCI,tafile,concat)
          call tstamp('>','PRJ: start clm for conversion')
          doit = ' '
          write(doit,'(5a)') 'clm -mode text -file ',
     &        tfile(1:lnblnk(tfile)),' -act epw2bin silent ',
     &        tafile(1:lnblnk(tafile))
          h(1)='Use the browse function to clarify whether the climate'
          h(2)='data you have selected is appropriate for the current '
          h(3)='model. '
          dok=.false.
          CALL ASKOK(' ','Browse/edit imported climate data?',OK,dok,3)
          if(ok)then
            call runit(doit,tmode)
            call edisp(iuout,' Invoking climate analysis facility.')
            call edisp(iuout,doit)
            call edisp(iuout,' Climate conversion complete.')
          endif
        endif
      endif

C Update Site latitude and longitude, recover clat and clong.
C First check if it exists: if so open, otherwise create with 0 length.
      CALL ERPFREE(ICLIM,ISTAT)
      CALL FPRAND(ICLIM,ISTAT,144,0,LCLIM)
      if(ISTAT.ge.0)then
        CALL ERPFREE(ICLIM,ISTAT)
        CALL FPRAND(ICLIM,ISTAT,144,1,LCLIM)
        call edisp(iuout,'Opened climate to collect information...')
        IREC=366
        READ(ICLIM,REC=IREC,IOSTAT=ISTAT,ERR=1000)ICYEAR,ICDNGH
        IREC=368
        READ(ICLIM,REC=IREC,IOSTAT=ISTAT,ERR=1000)CLAT,CLONG
        CALL ERPFREE(ICLIM,ISTAT)
      endif
      write(outs,'(A,F7.3,A,F7.3)')'Climate set latitude ',clat,
     &   ' and longitude difference of ',clong
      dok=.false.
      h(1)='Normally the project location should not deviate much'
      h(2)='from the location of climate data. '
      CALL ASKOK(outs,'can be used. Is this ok?',OK,DOK,2)
      IF(.NOT.OK)THEN
        WRITE(OUTS,'(F7.3,A,F7.3)')CLAT,' ',CLONG
        CALL EASKS(OUTS,'Confirm latitude and longitude',
     &     ' ',24,' ','lat and long',IER,0)
        K=0
        CALL EGETWR(OUTS,K,XLAT,-90.,90.,'W','Latitude',IER)
        CALL EGETWR(OUTS,K,XLON,-15.,15.,'W','Longitude dif',IER)
        SLAT=XLAT
        SLON=XLON
      ELSE
        XLAT=CLAT
        XLON=CLONG
      ENDIF
      WRITE(OUTS,'(A,F6.2,A,F6.2,A)')'latitude of ',xlat,
     &      ' and longitude of ',xlon,' will be used'
      CALL EDISP(IUOUT,OUTS)

C Update year 
      h(1)='The year associated with a model primarily tells the'
      h(2)='simulator what day of the week is 1 January. '
      dok=.false.
      WRITE(OUTS,'(A,I4)')'The climate year ',ICYEAR      
      CALL ASKOK(OUTS,' can be used. Is this ok?',OK,DOK,2)
      IF(.NOT.OK)THEN
        WRITE(OUTS,'(I4)')ICYEAR
        CALL EASKS(OUTS,'Confirm year...',' ',
     &  4,' ','year associated with model',IER,0)
        K=0
        CALL EGETWI(OUTS,K,IYEAR,1000,3000,'W','year of simulation',IER)
      ELSE
        IYEAR=ICYEAR
      ENDIF        
      WRITE(OUTS,'(I4,A)')IYEAR,' will be used as year of simulation'
      CALL EDISP(IUOUT,OUTS)

C Change name of shading files in common block if present only if called
C from version manager
      IF(ISHD.NE.-1)THEN
        do 42 iz=1,ncomp
          if(ISI(iz).eq.1)then
            call FINDFIL(LSHAD(iz),XST)
            if(XST)then
              EXT='.shd'
              CALL FNCNGR(LSHAD(IZ),APP,EXT,NNAME)
              LSHAD(IZ)=NNAME
              ISHD=1
            endif
          endif
  42    continue
      ENDIF
      RETURN

 1000 WRITE(outs,774)ISTAT
  774 FORMAT(' Error ',I7,' reading climate database information')
      call edisp(iuout,outs)
      RETURN

 1001 WRITE(outs,775)ISTAT
  775 FORMAT(' Error ',I7,' writing climate database year')
      call edisp(iuout,outs)
      RETURN

 1002 WRITE(outs,777)ISTAT
  777 FORMAT(' Error ',I7,' writing climate database')
      call edisp(iuout,outs)
      
      RETURN
      END

