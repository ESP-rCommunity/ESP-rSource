C This file is part of the ESP-r system.
C Copyright Energy Systems Research Unit, University of
C Strathclyde, Glasgow Scotland, 2001.

C ESP-r is free software.  You can redistribute it and/or
C modify it under the terms of the GNU General Public
C License as published by the Free Software Foundation 
C (version 2 or later).

C ESP-r is distributed in the hope that it will be useful
C but WITHOUT ANY WARRANTY; without even the implied
C warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
C PURPOSE. See the GNU General Public License for more
C details.

C You should have received a copy of the GNU General Public
C License along with ESP-r. If not, write to the Free
C Software Foundation, Inc., 59 Temple Place, Suite 330,
C Boston, MA 02111-1307 USA.

C runesp     - the main controlling routine.
C parse_oc   - example of parsing output from a 3rd party
C              tool and using it to create a silentread file
C setschedule - generate a zone operation file matching a
C               fixed pattern but with occupant/lighting/sp
C               densitites passed in from 3rd party file.

C *************************************************************
C runesp is a command line driven tool which takes a file
C from a 3rd party GUI and does three tasks:
C a) it parses the command file and creates a 'silentread' file
C    to pass to the project manager. The project manger uses
C    the information in the silentread file to create a new
C    single folder model.
C b) it invokes the project manager to further process an
C    existing model (this is work-in-progress).
C c) it invokes the simulator to run an annual simulation based
C    on the newly created model.
C d) on exit it prints the name of the configuration file it
C    created.

C The common blocks and variable instanciations below are based
C on the startup sequence in prj.F that preceed the calls which
C deal with reading a silentread input file.
C ************************************************************

      program runesp
#include "building.h"
#include "uncertainty.h"
#include "espriou.h"
#include "esprdbfile.h"
      PARAMETER (MSTMC=1)
      COMMON/SPAD/MMOD,LIMIT,LIMTTY
      COMMON/OUTIN/IUOUT,IUIN
      COMMON/FILEP/IFIL
      common/trc/itrc
      COMMON/INPER/INIT
      COMMON/OUTPCH/ICOUT
      COMMON/PERC/ID1,IM1,IT1,ID2,IM2,IT2,IDS,IDF,INEW
      COMMON/DAYSF/KDS,KDF
      common/cctlnm/ctldoc,lctlf
      common/AFN/IAIRN,LAPROB,ICAAS(MCOM)
      common/C2/LSNAM,NCCODE(MCOM),LPROJ(MCOM),LGEOM(MCOM),
     &          LSHAD(MCOM),LTHRM(MCOM),INDUTL(MCOM),LUTIL(MCOM)
      common/C3F/LCNN
      common/C21/IFCFG,cfgroot,LCFGF

      character CTYPE*4
      real gversion
      integer igupgrade
      COMMON/G0/CTYPE(MCOM),gversion(MCOM),igupgrade

      common/paths/zonepth,netpth,ctlpth,imgpth,radpth,docpth,tmppth,
     &             dbspth
      common/radcfg/LRADCF

C Temporal definition commons.
      COMMON/TDFI/IUTDF,ITDFLG,IUTDFA
      COMMON/TDFFT/LTDF,LTDFA
      common/IPVF/lipvdatf

C Path to problem and command line file (if any).
      common/rpath/path
      common/uhome/upath
      
C Significant figure reporting limit (NSIGFIG).
      common/SFIG/NSIGFIG
      common/LOG/LPRJLG
      common/GTFIL/GTGEOM

C Name of current application
      common/wkdtyp/idwe1,idwe2,wkd1,wkd2
      common/SET1/IYEAR,IBDOY,IEDOY,IFDAY,IFTIME
      common/FOPENED/CFGOK,MLDBOK,MATDBOK,CTLOK,OPTKOK

C Uncertainty.
      COMMON/UA1/LUALF,LCNG(MNCNG),LLOC(MNIL)
      common/spfldat/nsset,isset,isstup,isbnstep,ispnstep,issave,isavgh

      common/idstb/nidst
      common/anchora/NALOC,ALOC(20),ALOCLBL(20),ALOCTYP(20)
      common/IMAGF/imgfmt(10),imgfoc(10),limgfil(10),noimg,iton
      COMMON/BL1/dmdsdesc,bdmds
      COMMON/BIDIRFL/bidirfile,bidirname(MSTMC)

      real matver
      integer matcats,matcatitems,matdbitems
      character matdbdate*24,matdbdoc*248,matcatname*32,matcatdoc*248
      common/matheader/matver,matcats,matdbitems,matcatitems(MGCL),
     &  matdbdate,matdbdoc,matcatname(MGCL),matcatdoc(MGCL)
      
      CHARACTER INTER*144,INF*144
      character path*72,upath*72,cfgroot*24
      character outs*124,outs248*248
      character doit*248,longtfile*144,longtfiledos*144
      character fs*1
      character act*16
      character LUALF*72,LCNG*15,LLOC*15
      character zonepth*24,netpth*24,ctlpth*24,imgpth*24,radpth*24
      character docpth*24,tmppth*24,dbspth*24
      character*72 LSNAM,LPROJ,LGEOM,LSHAD,LTHRM,LUTIL,LCNN
      character ALOC*12,ALOCLBL*12,ALOCTYP*4
      character GTGEOM*72,lipvdatf*72
      character*10 wkd1, wkd2
      character imgfmt*4,imgfoc*4,limgfil*72
      character*72 LCFGF,LPRJLG
      character LCTLF*72,ctldoc*248,lradcf*72,LTDFA*72
      character LTDF*72,LAPROB*72 
      CHARACTER dmdsdesc*248,bdmds*72
      character bidirfile*72,bidirname*12
      LOGICAL unixok,concat
      logical CFGOK,MLDBOK,MATDBOK,CTLOK,OPTKOK

C Initial assumptions.
      call ezero
      ITRC=1
      IUOUT=6
      IUIN=5
      LIMTTY=24
      LIMIT =24
      IFIL=11
      ID1=1
      IM1=1
      IT1=1
      ID2=31
      IM2=12
      IT2=24
      IDS=1
      IDF=365
      KDS=1
      KDF=24
      IUTDF=IFIL+7
      NSIGFIG=3

C Get command line parameters. The file inf is assumed to have
C been created by a 3rd party tool and includes directives as
C to the actons to be taken (this is NOT a so-called silentread
C file). The parameter act will be:
C   'NONE' if no parameter was included in the command line and
C          all steps will be taken
C   'create_silent' to parse the input and create the silentread file
C   'create_model' to parse the input file, create silentread file
C          and then generate the model
C   'create_run_model' does the above but initiates a simulation.
      call partfa(MODL,inf,act)
      IFDAY=2
      IFTIME=0
      nsset=0
      isset=0
      isstup=0
      isbnstep=1
      ispnstep=2
      issave=2
      isavgh=0
      matver=0.0   ! initial assumption of binary materials database

C Set folder separator (fs) to \ or / as required.
      call isunix(unixok)
      if(unixok)then
        fs = char(47)
      else
        fs = char(92)
      endif
      write(path,'(a1,a1)')'.',fs
      write(upath,'(a1,a1)')'.',fs
      write(zonepth,'(a1,a1)')'.',fs
      write(netpth,'(a1,a1)')'.',fs
      write(ctlpth,'(a1,a1)')'.',fs
      write(imgpth,'(a1,a1)')'.',fs
      write(radpth,'(a1,a1)')'.',fs
      write(docpth,'(a1,a1)')'.',fs
      write(tmppth,'(a1,a1)')'.',fs
      write(dbspth,'(a1,a1)')'.',fs
      IYEAR=2007
      IBDOY=1
      IEDOY=365
      cfgroot=' '
      LCTLF=' '
      LCNN=' '
      LAPROB='  '
      lradcf='UNKNOWN'
      GTGEOM='UNKNOWN'
      LUALF='UNKNOWN'
      lipvdatf='UNKNOWN'
      dmdsdesc='no dispersed demands notes (yet)'
      bdmds='UNKNOWN'
      bidirfile='UNKNOWN'

C Assume weekends are Saturday/ Sunday unless re-defined.
      idwe1=6
      idwe2=7
      wkd1='Saturday'
      wkd2='Sunday'

C Set upgrade files flag to zero (no opinion yet)
      igupgrade=0

C Clear number of images and allow image browsing.
      noimg=0
      iton=0
      NALOC= 0
      nidst= 0

C Assume that the system configuration, multi-layered db, material db
C and control files have not been read in and that any files saved will
C be atrributed.
      CFGOK=.FALSE.
      MLDBOK=.FALSE.
      MATDBOK=.FALSE.
      CTLOK=.FALSE.
      OPTKOK=.FALSE.

c This is a console application.
      MMOD=-1

      ICOUT=IUOUT

      call edisp(IUOUT,'3rd party conversion starting...')

C Find the user's home folder then get user's custom settings.
C Make temporary use of file unit IAF=IFIL+1.
      IAF=IFIL+1
      call usrhome(upath)
      if(unixok)then
        write(esprc,'(3a)') upath(1:lnblnk(upath)),fs,'.esprc'
      else
        write(esprc,'(3a)') upath(1:lnblnk(upath)),fs,'esprc'
      endif
      call scesprc(esprc,IAF,0,IIER)

C Scan the defaults file for default configuration.
      call escdef(IAF,IER)

C Climate db is on channel IFIL (NB when not in use other binary
C databases may make use of this unit temporarily).
      ICLIM=IFIL
      LCLIM=DCLIM

      LAPRES=DAPRES

C Multi-layer constructions db on channel IFIL+3.
      IFMUL=IFIL+3
      LFMUL=DFMUL

C Materials db on channel IFIL+4.
      IFMAT=IFIL+4
      LFMAT=DFCON

C System configuration file on channel IFIL+5. 
      IFCFG=IFIL+5
      LCFGF='UNKNOWN'
      LSNAM='UNKNOWN'

C Mass flow network, profiles and optical dbs on channel IFIL+6. 
      IOPTDB=IFIL+6
      LOPTDB=DOPTDB

      IPRODB=IFIL+6

C Temporal information on channel IFIL+7.
      IUTDF=IFIL+7
      IUTDFA=IFIL+8
      LTDF='UNKNOWN'
      LTDFA='UNKNOWN'
      ITDFLG=0

      LPRFDB=DPRFDB

      LPCDB=DPCDB

C Project log.
      LPRJLG='job.notes'

      INIT =0

C Take command line file name to LCMDF and use as initial climate file.
      if(inf(1:2).eq.'  '.or.inf(1:4).eq.'UNKN')then
        call edisp(iuout,'ERROR: runesp no input file specified')
        call epwait
        STOP
      else
        INTER=inf
        write(OUTS248,'(A,A)')' the input file is: ',INTER
        CALL EDISP248(IUOUT,OUTS248,80)
      endif

C Parse the input file and return an error condition.
      if(act(1:4).eq.'NONE')then

C If no action passed assume it is the same as create_run_model.
        write(act,'(a)') 'create_model'
        call parse_oc(INTER,act,ier)

C Debug.
        write(outs,'(2a)') 'runesp generated model ',LCFGF
        call edisp(iuout,outs)

C Invoke bps with -p directive.
        doit = ' '
        call isunix(unixok)
        if(unixok)then
          call addpath(LCFGF,longtfile,concat)
        else

C If running on a non-unix machine see if there are spaces in the name
C and change any / to \.
          call addpath(LCFGF,longtfile,concat)
          call cmdfiledos(longtfile,longtfiledos,ier)

C Debug the patched file name.
          write(outs248,'(2a)') '* Corrected file ',
     &      longtfiledos(1:lnblnk(longtfiledos))
          call edisp248(iuout,outs248,100)
          longtfile=' '
          longtfile=longtfiledos
        endif
        write(doit,'(9a)') 'bps -mode text -file ',
     &    longtfile(1:lnblnk(longtfile)),
     &    ' -b no -p ann silent'

C Debug.
        call usrmsg('Begining simulation via',doit,'-')
        call runit(doit,'text')
        call usrmsg('Finished simulation.',' ','-')

        call epwait
        STOP

      elseif(act(1:13).eq.'create_silent')then
        call parse_oc(INTER,act,ier)
        call edisp(iuout,'runesp generated silentread file.')

c << create silent read file to be done. >>
C << start up prj with the silent input file...>>
        call epwait
        STOP
      elseif(act(1:12).eq.'create_model')then
        call parse_oc(INTER,act,ier)
        call edisp(iuout,'runesp generated model.')
        call epwait
        STOP
      elseif(act(1:16).eq.'create_run_model')then
        call parse_oc(INTER,act,ier)
        call edisp(iuout,'runesp generated model & annual assessment.')

C << start up bps with -p directive...>>

        call epwait
        STOP
      endif

      END

C **************** parse_oc
C parse_oc reads the contents of the input file (LFILE) and generates
C a silentread file.
C parent action: 'create_silent' or 'create_model' or 'create_run_model'
      subroutine parse_oc(LFILE,parentaction,ier)
      integer MSZ   ! number of silent zones array sizes
      PARAMETER (MSZ=10) 
#include "building.h"
#include "espriou.h"
#include "esprdbfile.h"
C espriou.h provides currentfile.

      COMMON/OUTIN/IUOUT,IUIN
      COMMON/FILEP/IFIL


      common/dllerr/dllsubr,dllmesg
      character dllsubr*12,dllmesg*124  ! messages if errors in dll

C Simulation parameter presets.
      common/spfldes/spfdescr(MSPS)
      common/spflper/isstday(MSPS),isstmon(MSPS),isfnday(MSPS),
     &               isfnmon(MSPS)
      common/spfldat/nsset,isset,isstup,isbnstep,ispnstep,issave,isavgh
      common/spflres/sblres(MSPS),sflres(MSPS),splres(MSPS),
     &  smstres(MSPS),selres(MSPS),sipvres
      character sblres*72,sflres*72,splres*72,smstres*72,sipvres*72
      character selres*72,spfdescr*8
              
      character*72 odir    ! where are folders
      CHARACTER OUTSTR*248,WORD*32,outs*124,outs248*248

      character LFILE*144,thefile*72,theresult*72
      integer ier
      logical unixok,dll,concat

C root   (24 char) the root name of the model
C mpath  (72 char) the path to the folder with cfg file.
C folder (12 char) model folder layout: 'single' or 'distributed'
C weather (32 char) the weather file name (no path included)
      character root*24,mpath*72,mnpath*72,folder*12
      character fs*1           ! file separator
      character weather*32     ! file name for the location (no path)
      character parentaction*16 ! action passed from calling code
      character action*8       ! to pass to silentmodel
      character longtfile*144,longtfiledos*144

C Local string values.
      character wallconstr*32,roofconstr*32,floorconstr*32
      character windowconstr*32,skylightconstr*32

C Documentation for silentread file.
      character silentmenu*32

C Paremeters passed to:silentzone
      character name*12   ! name given to the zone
      dimension name(MSZ)
      character shape*8   ! box or extrude
      dimension shape(MSZ)
      character use*8,szuse*8,usefile*32  ! usage pattern directives
      dimension use(3),szuse(MSZ,3),usefile(MSZ)
      integer nbwalls(MSZ)     ! nb of vertical walls
      integer nbglz(MSZ)       ! nb of windows
      integer nbdoor(MSZ)      ! nb of doors
      real rotateit(MSZ)        ! angle of rotation
      real origin(3),szorigin(MSZ,3)      ! values dependant on shape
      real size(3),szsize(MSZ,3)        ! values dependant on shape
      real coords(MS,2)
      real hasglaze(MS),szhasglaze(MSZ,MS)   ! percentage of glazing in each surface of intial shape
      real hasdoor(MS),szhasdoor(MSZ,MS)    ! width of door in each surface of the initial shape
      character hasconstruction*32,szhasconstruction*32
      dimension hasconstruction(MS),szhasconstruction(MSZ,MS)  ! construction to use for each surface
      character hasname*12,szhasname*12
      dimension hasname(MS),szhasname(MSZ,MS)  ! name to use for each surface
      integer boundarytype(MS,3),szboundarytype(MSZ,MS,3)

C Array of percent window area in the parent surfaces
      real glzpercent(5)

C Array of occupant, lighting, sp density.
      real densityof(3)

C Heating and cooling setpoints
      real setpoints(2)

C Run-type 0=free float control, 1=controlled
      integer runtype

C Logicals if true then there is glass in a parent surface
      logical glzin1,glzin2,glzin3,glzin4,glzin5

      IER=0

C Get the current folder and display options to the user.
C first list any files with .cfg in name.
      odir=' '
      call usrdir(odir)

C Debug...
C      write(6,*) 'usrdir is ',odir

C Set logicals for locations of windows.
      glzin1 = .false.
      glzin2 = .false.
      glzin3 = .false.
      glzin4 = .false.
      glzin5 = .false.
      glzpercent(1)=0.0
      glzpercent(2)=0.0
      glzpercent(3)=0.0
      glzpercent(4)=0.0
      glzpercent(5)=0.0

      setpoints(1)=0.0
      setpoints(2)=100.0

C Clear the sz array structures.
      weather=' '
      do 40 iz=1,MSZ
        name(iz) = ' '
        shape(iz) = ' '
        szuse(iz,1) = ' '
        szuse(iz,2) = ' '
        szuse(iz,3) = ' '
        usefile(iz) = ' '
        nbwalls(iz) = 0
        nbglz(iz) = 0
        nbdoor(iz) = 0
        rotateit(iz) = 0
        szorigin(iz,1) = 0.0
        szorigin(iz,2) = 0.0
        szorigin(iz,3) = 0.0
        szsize(iz,1) = 0.0
        szsize(iz,2) = 0.0
        szsize(iz,3) = 0.0
        do 52 isu=1,MS
          szhasglaze(iz,isu)=0.0
          szhasdoor(iz,isu)=0.0
          szhasconstruction(iz,isu)=' '
          szhasname(iz,isu)=' '
          szboundarytype(iz,isu,1)=0
          szboundarytype(iz,isu,2)=0
          szboundarytype(iz,isu,3)=0
  52    continue
  40  continue

      NS=0     ! temporary array for counting surfaces.
      nsz=1
      weather='none'

C Check if running in dll mode.
      call isadll(dll)

C Initialise data file. and set currentfile.
      IUNIT= IFIL
      CALL EFOPSEQ(IUNIT,LFILE,1,IER)
      IF(IER.LT.0)THEN
        write(outs,'(3a)') 'OC file ',LFILE(1:lnblnk(LFILE)),
     &      ' could not be opened.'
        if(dll)then
          dllsubr='parse_oc'
          dllmesg=outs
          ier=2
          return
        else
          call edisp(iuout,outs)
          IER=1
          RETURN
        endif
      ENDIF
      write(currentfile,'(a)') LFILE(1:lnblnk(LFILE))

C Read lines from file in tag - data format.  Use EGETP for the
C tag in case it has spaces.
 43   CALL STRIPC(IUNIT,OUTSTR,99,ND,1,'silent line 1',IER)
      IF(IER.NE.0)goto 1001
      K=0
      CALL EGETP(OUTSTR,K,WORD,'W','tag in oc file',IER)
      if(WORD(1:8).eq.'*climate')then
        CALL EGETRM(OUTSTR,K,weather,'W','weather name',IER)
        goto 43
      elseif(WORD(1:7).eq.'*length')then
        CALL EGETWR(OUTSTR,K,size(1),0.,0.,'-','box length',IER)
        szsize(nsz,1)=size(1)
        goto 43
      elseif(WORD(1:6).eq.'*width')then
        CALL EGETWR(OUTSTR,K,size(2),0.,0.,'-','box width',IER)
        szsize(nsz,2)=size(2)
        goto 43
      elseif(WORD(1:7).eq.'*heigth'.or.WORD(1:7).eq.'*height')then
        CALL EGETWR(OUTSTR,K,size(3),0.,0.,'-','box height',IER)
        szsize(nsz,3)=size(3)
        goto 43
      elseif(WORD(1:9).eq.'*rotation')then
        CALL EGETWR(OUTSTR,K,rot,0.,0.,'-','rotation angle',IER)
        rotateit(nsz)=rot
        goto 43
      elseif(WORD(1:10).eq.'*Roof type')then
        goto 43
      elseif(WORD(1:10).eq.'*Window(N)')then

C A window on the North is the 3rd surface in the zone
        CALL EGETWR(OUTSTR,K,glzpercent(3),0.,0.,'-','glz surf 1',IER)
        glzin3 = .true.
        szhasglaze(nsz,3)=glzpercent(3)
        goto 43
      elseif(WORD(1:10).eq.'*Window(S)')then

C A window on the (South 1st surface) of the box.
        CALL EGETWR(OUTSTR,K,glzpercent(1),0.,0.,'-','glz surf 1',IER)
        glzin1 = .true.
        szhasglaze(nsz,1)=glzpercent(1)
        goto 43
      elseif(WORD(1:10).eq.'*Window(E)')then

C A window on the (East 2nd surface) of the box.
        CALL EGETWR(OUTSTR,K,glzpercent(2),0.,0.,'-','glz surf 2',IER)
        glzin2 = .true.
        szhasglaze(nsz,2)=glzpercent(2)
        goto 43
      elseif(WORD(1:10).eq.'*Window(W)')then

C A window on the (West 4th surface) of the box.
        CALL EGETWR(OUTSTR,K,glzpercent(4),0.,0.,'-','glz surf 2',IER)
        glzin4 = .true.
        szhasglaze(nsz,4)=glzpercent(4)
        goto 43
      elseif(WORD(1:10).eq.'*Window(R)')then

C A window on the (Roof 5th surface) of the box.
        CALL EGETWR(OUTSTR,K,glzpercent(5),0.,0.,'-','glz surf 2',IER)
        glzin5 = .true.
        szhasglaze(nsz,5)=glzpercent(5)
        goto 43
      elseif(WORD(1:5).eq.'*Roof'.or.WORD(1:5).eq.'*roof')then
        CALL EGETP(OUTSTR,K,roofconstr,'W','roof construction',IER)
        goto 43
      elseif(WORD(1:5).eq.'*Wall'.or.WORD(1:5).eq.'*wall')then
        CALL EGETP(OUTSTR,K,wallconstr,'W','wall construction',IER)
        goto 43
      elseif(WORD(1:6).eq.'*Floor'.or.WORD(1:6).eq.'*floor')then
        CALL EGETP(OUTSTR,K,floorconstr,'W','floor construction',IER)
        goto 43
      elseif(WORD(1:7).eq.'*Window'.or.WORD(1:7).eq.'*window')then
        CALL EGETP(OUTSTR,K,windowconstr,'W','window construction',IER)
        goto 43
      elseif(WORD(1:9).eq.'*Skylight'.or.WORD(1:9).eq.'*skylight')then
        CALL EGETP(OUTSTR,K,skylightconstr,'W','skyl construction',IER)
        goto 43
      elseif(WORD(1:5).eq.'*Hvac'.or.WORD(1:5).eq.'*hvac')then
        goto 43
      elseif(WORD(1:9).eq.'*Hotwater'.or.WORD(1:9).eq.'*hotwater')then
        goto 43
      elseif(WORD(1:17).eq.'*Lighting_density'.or.
     &       WORD(1:17).eq.'*lighting_density')then
        CALL EGETWR(OUTSTR,K,densityof(2),0.,0.,'-','lt density',IER)
C        write(6,*) 'lt density ',densityof(2)
        goto 43
      elseif(WORD(1:18).eq.'*Equipment_density'.or.
     &       WORD(1:18).eq.'*equipment_density')then
        CALL EGETWR(OUTSTR,K,densityof(3),0.,0.,'-','sp density',IER)
C        write(6,*) 'sp density ',densityof(3)
        goto 43
      elseif(WORD(1:17).eq.'*Occupant_density'.or.
     &       WORD(1:17).eq.'*occupant_density')then
        CALL EGETWR(OUTSTR,K,densityof(1),0.,0.,'-','ocup density',IER)
        write(6,*) 'occupant density ',densityof(1)
        goto 43
      elseif(WORD(1:9).eq.'*Lighting')then
        goto 43
      elseif(WORD(1:17).eq.'*Summer_set_point'.or.
     &       WORD(1:17).eq.'*summer_set_point')then
        CALL EGETWR(OUTSTR,K,setpoints(2),0.,0.,'-','cooling setpt',IER)
C        write(6,*) 'cooling setpoint ',setpoints(2)
        goto 43
      elseif(WORD(1:17).eq.'*Winter_set_point'.or.
     &       WORD(1:17).eq.'*winter_set_point')then
        CALL EGETWR(OUTSTR,K,setpoints(1),0.,0.,'-','heating setpt',IER)
C        write(6,*) 'heating setpoint ',setpoints(1)
        goto 43
      elseif(WORD(1:9).eq.'*run_type')then

C Run type is the last item in the file. Close file and jump to processing.
        CALL EGETWI(OUTSTR,K,runtype,0,2,'W','run type',IER)

        CALL ERPFREE(IUNIT,ios)
        goto 42
      else
        goto 43
      endif

C Process the information just gathered and setup the
C rest of the common blocks.
  42  continue

C Guess about a root name and folder from lfile (until
C there is more information available?)
      call fdroot(LFILE,mnpath,thefile)
      lcfgr=lnblnk(thefile)
      lcfgl=lcfgr-3
      if(lcfgr.gt.4)then
        if(thefile(lcfgl:lcfgr).eq.'.txt')then
          write(root,'(a)') thefile(1:lcfgl-1)
        else
          write(root,'(a)') thefile(1:lcfgr)
        endif
      else
        write(root,'(a)') thefile(1:lcfgr)
      endif
      write(mpath,'(2a)') mnpath(1:lnblnk(mnpath)),
     &  root(1:lnblnk(root))

C Always create a single folder. Fill in default menu and doc.
      folder='single'
      write(silentmenu,'(a)') 'auto generation of warehouse'

C Place the origin of the model at the site origin.
      origin(1)=0.0
      origin(2)=0.0
      origin(3)=0.0
      szorigin(nsz,1)=origin(1)
      szorigin(nsz,2)=origin(2)
      szorigin(nsz,3)=origin(3)
      nbdoor(nsz)=0

C If a standard pattern of operations can be used assign standard
C uses parameters. In this case file is written manually so lease
C szuse as blanks.
C      write(szuse(nsz,1),'(a)') 'pattern'
C      write(szuse(nsz,2),'(a)') 'all'
C      write(szuse(nsz,3),'(a)') 'allcas'
C      write(usefile(nsz),'(a)') 'warehouse.opr'

C Set the name of the new zone.
      write(name(nsz),'(a)') 'the_space'

C Assign the intial box surface name and construction attributes.
      write(szhasname(nsz,1),'(a)') 'front'
      write(szhasconstruction(nsz,1),'(a)') wallconstr
      write(szhasname(nsz,2),'(a)') 'right'
      write(szhasconstruction(nsz,2),'(a)') wallconstr
      write(szhasname(nsz,3),'(a)') 'back'
      write(szhasconstruction(nsz,3),'(a)') wallconstr
      write(szhasname(nsz,4),'(a)') 'left'
      write(szhasconstruction(nsz,4),'(a)') wallconstr
      write(szhasname(nsz,5),'(a)') 'roof'
      write(szhasconstruction(nsz,5),'(a)') roofconstr
      write(szhasname(nsz,6),'(a)') 'floor'
      write(szhasconstruction(nsz,6),'(a)') floorconstr

C Determine how many surfaces in the model.
      write(shape(nsz),'(a)') 'box '
      nbwalls(nsz)=4
      NS=6
      if(glzin1)then
        nbglz(nsz)=nbglz(nsz)+1
        NS = NS + 1
        write(szhasname(nsz,NS),'(a)') 'glz_front'
        write(szhasconstruction(nsz,NS),'(a)') windowconstr
      endif
      if(glzin2)then
        NS = NS + 1
        write(szhasname(nsz,NS),'(a)') 'glz_right'
        write(szhasconstruction(nsz,NS),'(a)') windowconstr
      endif
      if(glzin3)then
        NS = NS + 1
        write(szhasname(nsz,NS),'(a)') 'glz_back'
        write(szhasconstruction(nsz,NS),'(a)') windowconstr
      endif
      if(glzin4)then
        NS = NS + 1
        write(szhasname(nsz,NS),'(a)') 'glz_left'
        write(szhasconstruction(nsz,NS),'(a)') windowconstr
      endif
      if(glzin5)then
        NS = NS + 1
        write(szhasname(nsz,NS),'(a)') 'skylight'
        write(szhasconstruction(nsz,NS),'(a)') skylightconstr
      endif

C For the surfaces other than ground set to outside.
      do 70 isurf=1,NS
        if(isurf.eq.6)then
          szboundarytype(nsz,isurf,1)=4
          szboundarytype(nsz,isurf,2)=1
          szboundarytype(nsz,isurf,3)=0
        else
          szboundarytype(nsz,isurf,1)=0
          szboundarytype(nsz,isurf,2)=0
          szboundarytype(nsz,isurf,3)=0
        endif
  70  continue

C Test creation of new model. Note for a single folder option the
C configuration will be in /tmp/box if mpath is /tmp/box. For the
C distributed folder option the onfiguration file will be in the
C folder /tmp/box/cfg if mpath is /tmp/box. If 'within' and
C single folder then no folder is created.
      if(parentaction(1:13).eq.'create_silent')then
        action='new'
        call silentmodel(action,root,mpath,folder,silentmenu,weather,
     &    ier)
      elseif(parentaction(1:12).eq.'create_model')then
        action='within'
        call silentmodel(action,root,mnpath,folder,silentmenu,weather,
     &    ier)
      elseif(parentaction(1:16).eq.'create_run_model')then
        action='new'
        call silentmodel(action,root,mpath,folder,silentmenu,weather,
     &    ier)
      endif

C Generate the zone and zone files.
      icomp=1
      isz=1
      origin(1)=szorigin(isz,1)
      origin(2)=szorigin(isz,2)
      origin(3)=szorigin(isz,3)
      size(1)=szsize(isz,1)
      size(2)=szsize(isz,2)
      size(3)=szsize(isz,3)
      use(1)= szuse(isz,1)
      use(2)= szuse(isz,2)
      use(3)= szuse(isz,3)

C Fill surface arrays.
      do 49 isu=1,MS
        hasglaze(isu)=szhasglaze(isz,isu)
        hasdoor(isu)=szhasdoor(isz,isu)
        hasconstruction(isu)=szhasconstruction(isz,isu)
        hasname(isu)=szhasname(isz,isu)
        boundarytype(isu,1)=szboundarytype(isz,isu,1)
        boundarytype(isu,2)=szboundarytype(isz,isu,2)
        boundarytype(isu,3)=szboundarytype(isz,isu,3)
  49  continue

      write(outs,'(2a)') 'Processing ',name(isz)
      call edisp(iuout,outs)
      call silentzone(ICOMP,name(isz),shape(isz),nbwalls(isz),
     &    origin,size,coords,rotateit(isz),nbglz(isz),hasglaze,
     &    nbdoor(isz),hasdoor,hasname,hasconstruction,
     &    boundarytype,use,usefile(isz),IER)

C Overwrite the initial zone operation file with the correct
C density information.
      call setschedule(isz,name(isz),densityof)

C Create a standard control file if runtype is 1.
      if(runtype.eq.1)then
        call  setcontrol(setpoints)
      endif
      write(outs,'(3a)') 'Processing ',name(isz),' done.'
      call edisp(iuout,outs)

C Set values of simulation parameter set for an annual simulation.
      nsset=1    ! one set
      isstup=1   ! one day starup
      isbnstep=1 ! one building timestep per hour
      ispnstep=1  ! one system timestep per hour
      issave=4   ! save full energy balance (might reduce to 2 later)
      isavgh=0   ! save every timestep
      spfdescr(1)='ann'  ! set named ann
      isstday(1)=2
      isstmon(1)=1
      isfnday(1)=31
      isfnmon(1)=12

C Setup the name and path to the standard results file.
      theresult = 'the_results.res'
      call isunix(unixok)
      if(unixok)then
        call addpath(theresult,longtfile,concat)
      else

C If running on a non-unix machine see if there are spaces in the name
C and change any / to \.
          call addpath(theresult,longtfile,concat)
          call cmdfiledos(longtfile,longtfiledos,ier)

C Debug the patched file name.
          write(outs248,'(2a)') '* Corrected file ',
     &      longtfiledos(1:lnblnk(longtfiledos))
          call edisp248(iuout,outs248,100)
          longtfile=' '
          longtfile=longtfiledos
        endif
        write(sblres(1),'(a)') longtfile(1:72)

C      write(sblres(1),'(2a)') mnpath(1:lnblnk(mnpath)),
C     &  theresult(1:lnblnk(theresult))

C Update configuration file to know about simulation parameters.
      CALL EMKCFG('-',IER)

      return

 1001 write(outs,'(3a)') 'Conversion error in...',OUTSTR(1:50),'...'
      if(dll)then
        dllsubr='SILENTREAD'
        dllmesg=outs
        ier=2
        CALL ERPFREE(IUNIT,ios)
        return
      else
        call edisp(iuout,outs)
        IER=1
        CALL ERPFREE(IUNIT,ios)
        RETURN
      endif

      end

C ************** setschedule
C setschedule generates a zone operation file matching a
C fixed pattern but with occupant/lighting/sp
C densitites passed in from 3rd party file.

C The current implemented pattern is three periods in each
C day with occupents as m2 per person, lights in W/m2 and
C small power in W/m2. Occupied times are 9-21h each day.
      subroutine setschedule(ICOMP,name,densityof)
#include "building.h"
#include "espriou.h"
      COMMON/FILEP/IFIL
      COMMON/C2/LSNAM,NCCODE(MCOM),LPROJ(MCOM),LGEOM(MCOM),
     &          LSHAD(MCOM),LTHRM(MCOM),INDUTL(MCOM),LUTIL(MCOM)
      common/paths/zonepth,netpth,ctlpth,imgpth,radpth,docpth,tmppth,
     &             dbspth
      CHARACTER*72 LSNAM,LPROJ,LGEOM,LSHAD,LTHRM,LUTIL

C Array of occupant, lighting, sp density.
      real densityof(3)
      character name*12   ! name given to the zone
      character opfil*72
      character dstmp*24
      character zonepth*24,netpth*24,ctlpth*24,imgpth*24,radpth*24
      character docpth*24,tmppth*24,dbspth*24
      character fs*1
      logical unixok

C Set folder separator (fs) to \ or / as required.
      call isunix(unixok)
      if(unixok)then
        fs = char(47)
      else
        fs = char(92)
      endif

C Establish the name of the zone operations file.
      iuo=ifil+2
      if(zonepth(1:2).eq.'  '.or.zonepth(1:2).eq.'./')then
        WRITE(OPFIL,'(A,A4)') name(1:lnblnk(name)),'.opr'
      else
        WRITE(OPFIL,'(3A,A4)') zonepth(1:lnblnk(zonepth)),fs,
     &    name(1:lnblnk(name)),'.opr'
      endif
      CALL EFOPSEQ(IUO,OPFIL,3,IER)
      write(currentfile,'(a)') OPFIL(1:lnblnk(OPFIL))
      write(LPROJ(icomp),'(a)') OPFIL(1:lnblnk(OPFIL))

      call dstamp(dstmp)
        
      WRITE(IUO,'(A)',IOSTAT=IOS,ERR=1) '*Operations 2.0'
      WRITE(IUO,'(3a)',IOSTAT=IOS,ERR=1) '*date ',dstmp,
     &  '  # latest file modification '
      WRITE(IUO,30,IOSTAT=IOS,ERR=1)
     &  name(1:lnblnk(name)),OPFIL(1:lnblnk(OPFIL))
  30  FORMAT('# operations of ',a,' defined in: ',/,'# ',a)

      WRITE(IUO,'(A)',IOSTAT=IOS,ERR=1)
     &  'standard lighting/ocup/sp density assumptions'
      WRITE(IUO,'(A)',IOSTAT=IOS,ERR=1)
     &  '# control(no control of air flow  ), low mid & high setpoints'
      WRITE(IUO,'(A)',IOSTAT=IOS,ERR=1)
     &  '   0     0.000     0.000     0.000'
      WRITE(IUO,'(A)',IOSTAT=IOS,ERR=1)
     &  '     1   # no Weekday flow periods'
      WRITE(IUO,'(A)',IOSTAT=IOS,ERR=1)
     &  '# Wkd: start, stop, infil, ventil, source, data'
      WRITE(IUO,'(A)',IOSTAT=IOS,ERR=1)
     &  '   0, 24,    0.500    0.000    0    0.000'
      WRITE(IUO,'(A)',IOSTAT=IOS,ERR=1)
     &  '     1   # no Saturday flow periods'
      WRITE(IUO,'(A)',IOSTAT=IOS,ERR=1)
     &  '# Sat: start, stop, infil, ventil, source, data'
      WRITE(IUO,'(A)',IOSTAT=IOS,ERR=1)
     &  '   0, 24,    0.500    0.000    0    0.000'
      WRITE(IUO,'(A)',IOSTAT=IOS,ERR=1)
     &  '     1   # no Sunday flow periods'
      WRITE(IUO,'(A)',IOSTAT=IOS,ERR=1)
     &  '# Sun: start, stop, infil, ventil, source, data'
      WRITE(IUO,'(A)',IOSTAT=IOS,ERR=1)
     &  '   0, 24,    0.500    0.000    0    0.000'
      WRITE(IUO,'(A)',IOSTAT=IOS,ERR=1)
     &  '     9   # no Weekday casual gains'
      WRITE(IUO,'(A)',IOSTAT=IOS,ERR=1)
     &  '# Wkd: type, start, stop, sens, latent, rad_frac, conv_frac'
      WRITE(IUO,'(A)',IOSTAT=IOS,ERR=1)
     &  '    1,   0,   9,      0.0,      0.0, 0.500, 0.500'
      WRITE(IUO,'(A,F9.1,A)',IOSTAT=IOS,ERR=1)
     &  '   -1,   9,  21,',densityof(1),'       0.0, 0.500, 0.500'
      WRITE(IUO,'(A)',IOSTAT=IOS,ERR=1)
     &  '    1,  21,  24,      0.0,      0.0, 0.500, 0.500'
      WRITE(IUO,'(A)',IOSTAT=IOS,ERR=1)
     &  '    2,   0,   9,      0.0,      0.0, 0.500, 0.500'
      WRITE(IUO,'(A,F9.1,A)',IOSTAT=IOS,ERR=1)
     &  '   -2,   9,  21,',densityof(2),'       0.0, 0.500, 0.500'
      WRITE(IUO,'(A)',IOSTAT=IOS,ERR=1)
     &  '    2,  21,  24,      0.0,      0.0, 0.500, 0.500'
      WRITE(IUO,'(A)',IOSTAT=IOS,ERR=1)
     &  '    3,   0,   9,      0.0,      0.0, 0.500, 0.500'
      WRITE(IUO,'(A,F9.1,A)',IOSTAT=IOS,ERR=1)
     &  '   -3,   9,  21,',densityof(3),'       0.0, 0.500, 0.500'
      WRITE(IUO,'(A)',IOSTAT=IOS,ERR=1)
     &  '    3,  21,  24,      0.0,      0.0, 0.500, 0.500'
      WRITE(IUO,'(A)',IOSTAT=IOS,ERR=1)

     &  '     9   # no Saturday casual gains'
      WRITE(IUO,'(A)',IOSTAT=IOS,ERR=1)
     &  '# Sat: type, start, stop, sens, latent, rad_frac, conv_frac'
      WRITE(IUO,'(A)',IOSTAT=IOS,ERR=1)
     &  '    1,   0,   9,      0.0,      0.0, 0.500, 0.500'
      WRITE(IUO,'(A,F9.1,A)',IOSTAT=IOS,ERR=1)
     &  '   -1,   9,  21,',densityof(1),'       0.0, 0.500, 0.500'
      WRITE(IUO,'(A)',IOSTAT=IOS,ERR=1)
     &  '    1,  21,  24,      0.0,      0.0, 0.500, 0.500'
      WRITE(IUO,'(A)',IOSTAT=IOS,ERR=1)
     &  '    2,   0,   9,      0.0,      0.0, 0.500, 0.500'
      WRITE(IUO,'(A,F9.1,A)',IOSTAT=IOS,ERR=1)
     &  '   -2,   9,  21,',densityof(2),'       0.0, 0.500, 0.500'
      WRITE(IUO,'(A)',IOSTAT=IOS,ERR=1)
     &  '    2,  21,  24,      0.0,      0.0, 0.500, 0.500'
      WRITE(IUO,'(A)',IOSTAT=IOS,ERR=1)
     &  '    3,   0,   9,      0.0,      0.0, 0.500, 0.500'
      WRITE(IUO,'(A,F9.1,A)',IOSTAT=IOS,ERR=1)
     &  '   -3,   9,  21,',densityof(3),'       0.0, 0.500, 0.500'
      WRITE(IUO,'(A)',IOSTAT=IOS,ERR=1)
     &  '    3,  21,  24,      0.0,      0.0, 0.500, 0.500'

      WRITE(IUO,'(A)',IOSTAT=IOS,ERR=1)
     &  '     9   # no Sunday casual gains'
      WRITE(IUO,'(A)',IOSTAT=IOS,ERR=1)
     &  '# Sun: type, start, stop, sens, latent, rad_frac, conv_frac'
      WRITE(IUO,'(A)',IOSTAT=IOS,ERR=1)
     &  '    1,   0,   9,      0.0,      0.0, 0.500, 0.500'
      WRITE(IUO,'(A,F9.1,A)',IOSTAT=IOS,ERR=1)
     &  '   -1,   9,  21,',densityof(1),'       0.0, 0.500, 0.500'
      WRITE(IUO,'(A)',IOSTAT=IOS,ERR=1)
     &  '    1,  21,  24,      0.0,      0.0, 0.500, 0.500'
      WRITE(IUO,'(A)',IOSTAT=IOS,ERR=1)
     &  '    2,   0,   9,      0.0,      0.0, 0.500, 0.500'
      WRITE(IUO,'(A,F9.1,A)',IOSTAT=IOS,ERR=1)
     &  '   -2,   9,  21,',densityof(2),'       0.0, 0.500, 0.500'
      WRITE(IUO,'(A)',IOSTAT=IOS,ERR=1)
     &  '    2,  21,  24,      0.0,      0.0, 0.500, 0.500'
      WRITE(IUO,'(A)',IOSTAT=IOS,ERR=1)
     &  '    3,   0,   9,      0.0,      0.0, 0.500, 0.500'
      WRITE(IUO,'(A,F9.1,A)',IOSTAT=IOS,ERR=1)
     &  '   -3,   9,  21,',densityof(3),'       0.0, 0.500, 0.500'
      WRITE(IUO,'(A)',IOSTAT=IOS,ERR=1)
     &  '    3,  21,  24,      0.0,      0.0, 0.500, 0.500'

      WRITE(IUO,'(A)',IOSTAT=IOS,ERR=1)
     &  '# Labels for gain types'
      WRITE(IUO,'(A)',IOSTAT=IOS,ERR=1)
     &  ' Occupt Lights Equipt'
      CALL ERPFREE(IUO,ISTAT)

C Update configuration file to know about the operation file.
      CALL EMKCFG('-',IER)

      return

C Error messages.
 1    if(IOS.eq.2)then
        call usrmsg(' No permission to write operations file!',
     &            ' returning to menu...','W')
      else
        call usrmsg(' Operations file transfer error !',
     &            ' returning to menu...','W')
      endif
      end


C Run the simulation template and analyse results
C      CALL EDISP(IUOUT,'runesp running simulation(s) ...')
C      CALL RUNSIM

C Dummy routines from common3dv.F
      SUBROUTINE ADJVIEW(ITRC,IER)
      ier=0
      return
      end

      subroutine chgazi(icazi)
      return
      end

      subroutine chgelev(icelev)
      return
      end

      subroutine imgdisp(iforce,focus,ier)
      character focus*4
      return
      end

      subroutine SVDSOPT
      return
      end

      subroutine RCDSOPT
      return
      end

      SUBROUTINE DRAWOBS(IFOC,ier)
      return
      end

      SUBROUTINE DRWSEN(ier)
      return
      end

      SUBROUTINE EGRNDR(IER)
      return
      end

      SUBROUTINE DSGRID(RH,GD,LD,IER)
      return
      end

      SUBROUTINE EMKVIEW(ITRC,IUO,CFGOK,IER)
      logical cfgok
      ier=0
      return
      end

      SUBROUTINE PLELEV(IUF,direc,ier)
      CHARACTER direc*1
      ier=0
      return
      end

***************** FNCNGR (copy block from prj.F) ************************
C FNCNGR changes the name of file ORIGNAM by appending APP
C before an extension EXT, returning NEWNAM as the new file name
      SUBROUTINE FNCNGR(ORIGNAM,APP,EXT,NEWNAM)

      CHARACTER*(*) ORIGNAM,NEWNAM
      CHARACTER APP*4,EXT*4

      LCFIL=LNBLNK(ORIGNAM)
      LA=LNBLNK(APP)
      LX=LNBLNK(EXT)
      if(lcfil.gt.1)then
        IF(ORIGNAM(LCFIL-3:LCFIL).EQ.EXT(1:4))THEN
          IF(LCFIL.GT.(72-3))LCFIL=69
          WRITE(NEWNAM,'(3A)')ORIGNAM(1:LCFIL-4),APP(1:la),EXT(1:lx)
        ELSE
          IF(LCFIL.GT.(72-3))LCFIL=69
          WRITE(NEWNAM,'(2A)')ORIGNAM(1:LCFIL-4),APP(1:la)
        ENDIF
      else
        WRITE(NEWNAM,'(3A)') 'not_yet_defined',APP(1:la),EXT(1:lx)
      endif

      RETURN
      END

C ************** setcontrol
C setcontrol generates a zone control file matching a
C fixed pattern but with setpoints as passed in from
C a 3rd party file.

C The current implemented pattern is three periods in a
C typical day with free float outside of occupied period.
      subroutine setcontrol(setpoints)
#include "building.h"
#include "espriou.h"
      COMMON/FILEP/IFIL
      common/paths/zonepth,netpth,ctlpth,imgpth,radpth,docpth,tmppth,
     &             dbspth
      common/C21/IFCFG,cfgroot,LCFGF
      common/cctl/icascf(mcom)
      common/cctlnm/ctldoc,lctlf

      character zonepth*24,netpth*24,ctlpth*24,imgpth*24,radpth*24
      character docpth*24,tmppth*24,dbspth*24
      character cfgroot*24,LCFGF*72
      character LCTLF*72,ctldoc*248
      character fs*1
      logical unixok
      dimension setpoints(2)

C Set folder separator (fs) to \ or / as required.
      call isunix(unixok)
      if(unixok)then
        fs = char(47)
      else
        fs = char(92)
      endif

C Establish the name of the control file.
      iuo=ifil+2
      LN=max(1,LNBLNK(cfgroot))
      if(ctlpth(1:2).eq.'  '.or.ctlpth(1:2).eq.'./')then
        WRITE(LCTLF,'(2a)')cfgroot(1:ln),'.ctl'
      else
        WRITE(LCTLF,'(4a)') ctlpth(1:lnblnk(ctlpth)),fs,
     &       cfgroot(1:ln),'.ctl'
      endif
      write(currentfile,'(a)') LCTLF(1:lnblnk(LCTLF))

      CALL EFOPSEQ(IUO,LCTLF,3,IER)
      WRITE(IUO,'(2A)',IOSTAT=IOS,ERR=1)
     & 'Heating to 18C and cooling to 26C during occupied period all',
     & ' days of the year.'
      WRITE(IUO,'(A)',IOSTAT=IOS,ERR=1)
     & '* Building'
      WRITE(IUO,'(A)',IOSTAT=IOS,ERR=1)
     & 'Heating and cooling are assumed to be fully convective.'
      WRITE(IUO,'(A)',IOSTAT=IOS,ERR=1)
     & '   1  # No. of functions'
      WRITE(IUO,'(A)',IOSTAT=IOS,ERR=1)
     & '* Control function'
      WRITE(IUO,'(A)',IOSTAT=IOS,ERR=1)
     & '# senses the temperature of the current zone.'
      WRITE(IUO,'(A)',IOSTAT=IOS,ERR=1)
     & '    0    0    0    0  # sensor data'
      WRITE(IUO,'(A)',IOSTAT=IOS,ERR=1)
     & '# actuates air point of the current zone'
      WRITE(IUO,'(A)',IOSTAT=IOS,ERR=1)
     & '    0    0    0  # actuator data'
      WRITE(IUO,'(A)',IOSTAT=IOS,ERR=1)
     & '    1 # No. day types'
      WRITE(IUO,'(A)',IOSTAT=IOS,ERR=1)
     & '    1  365  # valid Tue-01-Jan - Tue-31-Dec'
      WRITE(IUO,'(A)',IOSTAT=IOS,ERR=1)
     & '     3  # No. of periods in day'
      WRITE(IUO,'(A)',IOSTAT=IOS,ERR=1)
     & '    0    2   0.000  # ctl type, law (free floating), start @'
      WRITE(IUO,'(A)',IOSTAT=IOS,ERR=1)
     & '      0.  # No. of data items'
      WRITE(IUO,'(A)',IOSTAT=IOS,ERR=1)
     & '    0    1   9.000  # ctl type, law (basic control), start @'
      WRITE(IUO,'(A)',IOSTAT=IOS,ERR=1)
     & '      7.  # No. of data items'

C In the next line we need to do a better job at setting the heating
C and cooling capacity.  Try first for a per m2 multiplier.
      WRITE(IUO,'(A,2F7.3,a)',IOSTAT=IOS,ERR=1)
     & '  10000.000 0.000 10000.000 0.000 ',setpoints(1),setpoints(2),
     & ' 0.000'
      WRITE(IUO,'(A)',IOSTAT=IOS,ERR=1)
     & '    0    2  21.000  # ctl type, law (free floating), start @'
      WRITE(IUO,'(A)',IOSTAT=IOS,ERR=1)
     & '      0.  # No. of data items'
      WRITE(IUO,'(A)',IOSTAT=IOS,ERR=1)
     & '# Function:Zone links'
      WRITE(IUO,'(A)',IOSTAT=IOS,ERR=1)
     & ' 1'
      CALL ERPFREE(IUO,ISTAT)

c Match single zone with single control function.
      ICASCF(1)=1

C Update configuration file to know about the operation file.
      CALL EMKCFG('-',IER)

      return

C Error messages.
 1    if(IOS.eq.2)then
        call usrmsg(' No permission to write control file!',
     &            ' returning...','W')
      else
        call usrmsg(' Control file transfer error !',
     &            ' returning...','W')
      endif
      end

