C This file is part of the ESP-r system.
C Copyright Sustainable Building Energy Systems Laboratory, Carleton University.
C Please contact Ian Beausoleil-Morrison for details concerning licensing.

C ESP-r is free software.  You can redistribute it and/or
C modify it under the terms of the GNU General Public
C License as published by the Free Software Foundation 
C (version 2 or later).

C ESP-r is distributed in the hope that it will be useful
C but WITHOUT ANY WARRANTY; without even the implied
C warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
C PURPOSE. See the GNU General Public License for more
C details.

C You should have received a copy of the GNU General Public
C License along with ESP-r. If not, write to the Free
C Software Foundation, Inc., 59 Temple Place, Suite 330,
C Boston, MA 02111-1307 USA.

C This file contains the following routines related to the interface
C of the AIM-2 infiltration model.

C ************************ MODULE AIM2_INPUTS_InputData*******************************************
C Created by: Francesca Macdonald
C 
C Initialise        - contains the exact same data as in AIM2_InputData Module.
C CheckForChanges   - checks if the interface has been used to make any changes 
C                     to the AIM2 parameters, so it can promt the user to save 
C                     changes if they have been made.
C Deallocate        - deallocates any memory allocated to iAIM2_infil_to_zones
C
C ********************************************************************************
      MODULE AIM2_INPUTS_InputData 
      
      USE AIM2_InputData
      IMPLICIT NONE
      
      SAVE !ensures values do not change between sucessive invocations

C---------------------------------------------------------------------------------
C Declare parameters - For a detailed description of each parameter see aim2_module
C---------------------------------------------------------------------------------
      INTEGER :: iairtight_type
      INTEGER :: iblower_door_input_option
      REAL :: iACH_50Pa
      REAL :: iELA_deltaP
      INTEGER :: iELA_given
      REAL :: iELA_cm
      REAL :: iELA_Cd
      INTEGER :: iuserspec_leakage
      REAL :: iAIM2_ceil_frac,iAIM2_wall_frac,iAIM2_floor_frac
      INTEGER :: iAIM2_terrain_weather
      INTEGER :: iAIM2_terrain_building
      INTEGER :: iAIM2_wall_shielding
      INTEGER :: iAIM2_flue_shielding
      REAL :: iAIM2_anemom_height
      REAL :: iAIM2_eaves_height
      REAL :: iAIM2_furnace_flue
      REAL :: iAIM2_fire_flue1
      REAL :: iAIM2_fire_flue2
      REAL :: iAIM2_DHW_flue1
      REAL :: iAIM2_DHW_flue2
      INTEGER :: iAIM2_ref_zone
      INTEGER :: iAIM2_num_zones_infil
      INTEGER, ALLOCATABLE, DIMENSION(:) :: iAIM2_zone_infil
      INTEGER :: iAIM2_basement_zone
      INTEGER :: iAIM2_CrawlSpace_zone
      INTEGER :: iAIM2_attic_zone
      
C Add Proceedures
      CONTAINS
C *******************************************************************************
C Initialise() sets all the AIM2_INPUTS_InputData to AIM2_InputData 
C *******************************************************************************
      SUBROUTINE Initialise()

      IMPLICIT NONE
C Declare local variables
      INTEGER :: i                          !loop index
      INTEGER :: allocate_status            !returns 0 for sucessful allocation
C Common blocks
      COMMON/OUTIN/IUOUT,IUIN
      INTEGER :: IUOUT,IUIN

      iairtight_type=airtight_type
      iblower_door_input_option=blower_door_input_option
      iACH_50Pa=ACH_50Pa
      iELA_deltaP=ELA_deltaP
      iELA_given=ELA_given
      iELA_cm=ELA_cm
      iELA_Cd=ELA_Cd
      iuserspec_leakage=userspec_leakage
      iAIM2_ceil_frac=AIM2_ceil_frac
      iAIM2_wall_frac=AIM2_wall_frac
      iAIM2_floor_frac=AIM2_floor_frac
      iAIM2_terrain_weather=AIM2_terrain_weather
      iAIM2_terrain_building=AIM2_terrain_building
      iAIM2_wall_shielding=AIM2_wall_shielding
      iAIM2_flue_shielding=AIM2_flue_shielding
      iAIM2_anemom_height=AIM2_anemom_height
      iAIM2_eaves_height=AIM2_eaves_height
      iAIM2_furnace_flue=AIM2_furnace_flue
      iAIM2_fire_flue1=AIM2_fire_flue1
      iAIM2_fire_flue2=AIM2_fire_flue2
      iAIM2_DHW_flue1=AIM2_DHW_flue1
      iAIM2_DHW_flue2=AIM2_DHW_flue2
      iAIM2_ref_zone=AIM2_ref_zone
      iAIM2_num_zones_infil=AIM2_num_zones_infil
C Allocate memory for iAIM2_zone_infil 
      IF (.NOT.ALLOCATED(iAIM2_zone_infil)) THEN
        ALLOCATE(iAIM2_zone_infil(iAIM2_num_zones_infil),
     &       STAT=allocate_status)
C Check allocation was sucessful     
        IF (.NOT.ALLOCATED(iAIM2_zone_infil)) THEN
          CALL EDISP(IUOUT,' iAIM2_zone_infil not allocated')
        ELSE
          DO i=1,iAIM2_num_zones_infil
            iAIM2_zone_infil(i)=AIM2_zone_infil(i)
          END DO
        END IF
      END IF
      iAIM2_basement_zone=AIM2_basement_zone
      iAIM2_CrawlSpace_zone=AIM2_CrawlSpace_zone
      iAIM2_attic_zone=AIM2_attic_zone
      
      END SUBROUTINE Initialise

C *******************************************************************************
C CheckForChanges() compares AIM2_InputData with AIM2_INPUTS_InputData to see
C if the user has changed any parameters.
C *******************************************************************************

      LOGICAL FUNCTION CheckForChanges()
  
      IMPLICIT NONE

C Declare local variables
      INTEGER :: i                            !loop index

      CheckForChanges = .FALSE.  !flag for changes
      
      IF (iairtight_type.NE.airtight_type) CheckForChanges = .TRUE.
      IF (iblower_door_input_option.NE.blower_door_input_option)
     &   CheckForChanges = .TRUE.
      IF (iACH_50Pa.NE.ACH_50Pa) CheckForChanges = .TRUE.
      IF (iELA_deltaP.NE.ELA_deltaP) CheckForChanges = .TRUE.
      IF (iELA_given.NE.ELA_given) CheckForChanges = .TRUE.
      IF (iELA_cm.NE.ELA_cm) CheckForChanges = .TRUE.
      IF (iELA_Cd.NE.ELA_Cd) CheckForChanges = .TRUE.
      IF (iuserspec_leakage.NE.userspec_leakage) 
     &   CheckForChanges = .TRUE.
      IF (iAIM2_ceil_frac.NE.AIM2_ceil_frac) CheckForChanges = .TRUE.
      IF (iAIM2_wall_frac.NE.AIM2_wall_frac) CheckForChanges = .TRUE.
      IF (iAIM2_floor_frac.NE.AIM2_floor_frac) CheckForChanges = .TRUE.
      IF (iAIM2_terrain_weather.NE.AIM2_terrain_weather) 
     &    CheckForChanges = .TRUE.
      IF (iAIM2_terrain_building.NE.AIM2_terrain_building) 
     &    CheckForChanges = .TRUE.
      IF (iAIM2_wall_shielding.NE.AIM2_wall_shielding) 
     &    CheckForChanges = .TRUE.
      IF (iAIM2_flue_shielding.NE.AIM2_flue_shielding)
     &    CheckForChanges = .TRUE.
      IF (iAIM2_anemom_height.NE.AIM2_anemom_height) 
     &    CheckForChanges = .TRUE.
      IF (iAIM2_eaves_height.NE.AIM2_eaves_height) 
     &   CheckForChanges = .TRUE.
      IF (iAIM2_furnace_flue.NE.AIM2_furnace_flue) 
     &   CheckForChanges = .TRUE.
      IF (iAIM2_fire_flue1.NE.AIM2_fire_flue1) CheckForChanges = .TRUE.
      IF (iAIM2_fire_flue2.NE.AIM2_fire_flue2) CheckForChanges = .TRUE.
      IF (iAIM2_DHW_flue1.NE.AIM2_DHW_flue1) CheckForChanges = .TRUE.
      IF (iAIM2_DHW_flue2.NE.AIM2_DHW_flue2) CheckForChanges = .TRUE.
      IF (iAIM2_ref_zone.NE.AIM2_ref_zone) CheckForChanges = .TRUE.
      IF (iAIM2_num_zones_infil.NE.AIM2_num_zones_infil)
     &   CheckForChanges = .TRUE.
      IF (iAIM2_basement_zone.NE.AIM2_basement_zone) 
     &   CheckForChanges = .TRUE.
      IF (iAIM2_CrawlSpace_zone.NE.AIM2_CrawlSpace_zone)
     &   CheckForChanges = .TRUE.
      IF (iAIM2_attic_zone.NE.AIM2_attic_zone) CheckForChanges = .TRUE.
      
      END FUNCTION CheckForChanges


      
C *******************************************************************************
C Deallocate() deallocates any memory allocated to iAIM2_infil_to_zones
C *******************************************************************************
      SUBROUTINE Deallocate

C Declare local variables
      INTEGER :: deallocatestatus
C Common blocks
      COMMON/OUTIN/IUOUT,IUIN
      INTEGER :: IUOUT,IUIN

      IF (ALLOCATED(iAIM2_zone_infil)) THEN
        DEALLOCATE(iAIM2_zone_infil, STAT=deallocatestatus)
C Check allocation was sucessful     
        IF (deallocatestatus.NE.0) THEN
          CALL EDISP(IUOUT,
     &       ' Problem with deallocation of AIM2_infil_to_zones array')
        END IF
      END IF
      END SUBROUTINE Deallocate

      END MODULE AIM2_INPUTS_InputData

C ********************************************************************************
C ********************************************************************************
C ********************************************************************************
C Created by: Francesca Macdonald
C This file contains the following subroutines:
C   AIM2_Interface - responsible for enabling the creation & editing
C                    of the .AIM file
C   Toplevel_Menu - function displays top level menu, and returns
C                   the menu selection (avoiding gotos)
C   AIM2_Interface - provides access to the Leakage menus, Shielding 
C                    and terrain menus and InfiltrationZonesMenu as 
C                    well as enabling the user to specify Building eves 
C                    height and Flue diameters
C   ClearLeakageParams - clears previously defined blower door parameters
C   BlowerDoorInputMenu - displays the Blower-door results input menu allowing 
C                         the user to iput the required blower door data.
C   LeakageMenu - allows the user to specify whether the leakage description 
C                 is from a blower door test (CGSB), a blower door test as 
C                 operated oran Air tightness type
C   AirTightnessTypeMenu - displays the options for specifying air tightness
C   LeakageDistribution - allows the user to iput the leakage fractions for 
C                         ceiling, wall, and floor
C   ShieldingMenu - displays the shielding menu used to select the local 
C                   shielding on the walls and flue
C   TerrainMenu - displays the terrain menu used to select the terrain flag
C                 for the weather station and for the building site.
C                 by zones tocheck for duplicates.
C   InfiltrationZonesMenu - allows the user to specify the zones used in the
C                           infiltration calculations.
C   SAVE_AIM2 - saves the input data required by the AIM-2 infiltration
C               model (i.e. the contents of the .aim file). 

C *********************************************************************
C Toplevel_Menu() displays the top level menu and returns the selection
C *********************************************************************
      MODULE AIM2_Inputs
      
      USE AIM2_InputData
      USE AIM2_CalcData, ONLY:AIM2_infil_to_zones,AIM2_CO,AIM2_n
      USE AIM2, ONLY:Initialize_AIM2_Params,AIM2_H2KDefaults,
     &    AIM2_report,AIM2_Deallocate
      
      
C Add Proceedures
      CONTAINS
      INTEGER FUNCTION Toplevel_Menu()
      
      IMPLICIT NONE
      
C Declare local variables
      CHARACTER, DIMENSION(10) :: ITEM*34        !Array holding strings for menu items 
      INTEGER :: IER                             !errorflag
      INTEGER :: NITEMS                          !number of items
C Common blocks
      COMMON/POPHELP/H(60)                       !Array holding help text
      CHARACTER :: H*72                          !Strings for help text
      
C Toplevel_Menu needs to be set to -4 for the menu to be displayed in text mode
      Toplevel_Menu=-4
      
      ITEM(1)='a Leakage description'
      ITEM(2)='b Leakage distribution'
      ITEM(3)='c Shielding and terrain '
      ITEM(4)='d Building eves description'
      ITEM(5)='e Flue diameters'
      ITEM(6)='f Coupling to zone model'
      ITEM(7)=' _________________________ '
      ITEM(8)='! save .AIM file           '
      ITEM(9)='? help           '
      ITEM(10)='- exit this menu'
      NITEMS=10
  
      H(1) ='This is the main menu for the empirical air '
      H(2) ='Alberta Infiltration Model (AIM2).  This model applies'
      H(3) ='only to low rise (up to 3 storey) detatched single family'
      H(4) ='residendial buildings.'
      H(5) =' '
      H(6) ='  a. Blower door test data to describe leakage or'
      H(7) ='     defined by air tightness type.'
      H(8) ='  b. Leakage distribution to ceiling, wall and'
      H(9) ='     floor.'
      H(10)='  c. Terrain at weather station and building site,'
      H(11)='     shielding at walls and flue, and anemometer height'
      H(12)='     are all used to calculate the wind speed correction'
      H(13)='     factor.'
      H(14)='  d. Height of building eves is used to define the height'
      H(15)='     of the eaves. The height of the building eaves' 
      H(16)='     defaults to 2.5m*(# of storeys) + 0.5m, based on the'
      H(17)='     number of storeys indicated in the house '
      H(18)='     specifications description. This value may be '
      H(19)='     overwritten. If the number of storeys is '
      H(20)='     subsequently changed, esp-r defaults the eaves'
      H(21)='     height accordingly. '
      H(22)='  e. Fireplace and DHW flue diameters are used to specify'
      H(23)='     the diameter of the flue on a combustion type water '
      H(24)='     heater. Esp-r will assign a default value based on '
      H(25)='     the tank type. This default value can be overwritten'
      H(26)='     at any time.'
      H(27)='  f. Reference zone for infiltration calculation,'
      H(28)='     and zone indexing of zones receiving '
      H(29)='     infiltration.'

      CALL EMENU('Empirical Air Infiltration Model',ITEM,NITEMS,
     &            Toplevel_Menu)
      
      IF (Toplevel_Menu.EQ.NITEMS-1) THEN
C List help text for the top level menu.
        CALL PHELPD('AIM2 model menu',30,'-',0,0,IER)
      END IF
      IF (Toplevel_Menu.EQ.NITEMS) THEN
C Exit this menu
           CALL USRMSG(' ',' ','-')
      END IF
      
      END FUNCTION Toplevel_Menu
      
      
C *********************************************************************
C Created by: Francesca Macdonald
C AIM2_Interface responsible for enabling the creation & editing
C of the .AIM file by providing access to the Leakage menus, Shielding 
C and terrain menus and InfiltrationZonesMenu as well as enabling the 
C user to specify Building eves height and Flue diameters
C *********************************************************************
      SUBROUTINE AIM2_Interface()

      USE AIM2_INPUTS_InputData 
      
      IMPLICIT NONE
C Declare local variables
      INTEGER :: IER                        !errorflag
      INTEGER :: Selection                  !top level menu choice
      INTEGER :: Selection2                 !lower level menu choice
      REAL :: Temp                          !temporary real value
      CHARACTER ::  DisplayString*248       !data selection display string
      LOGICAL :: OK                         !yes/no flag for saving changes
C Common blocks
      COMMON/OUTIN/IUOUT,IUIN
      INTEGER :: IUOUT,IUIN
      COMMON/POPHELP/H(60)                  !Array holding help text
      CHARACTER :: H*72                     !Strings for help text

     
      IF (.NOT.AIM2_Initialized) THEN
C Initialze all input parameters
        CALL Initialize_AIM2_Params()
C Initialze generic house data required by the AIM-2 model      
        CALL AIM2_H2KDefaults()
      END IF

C Copy all parameters to temporary variables to enable checking for changes
      CALL Initialise
      
      DO
        Selection = Toplevel_Menu()
        SELECT CASE (Selection)
        
C Leakage description.
        CASE (1)
          CALL  LeakageMenu(Selection2)
          IF (Selection2.LT.3) THEN
            CALL BlowerDoorInputMenu()
          ELSE IF (Selection2.EQ.3) THEN
            CALL AirTightnessTypeMenu()
          ENDIF
           
          CASE (2)
          CALL LeakageDistribution()

        CASE (3)
C Keep displaying the shielding menu until exit is selected.        
          DO
            CALL ShieldingAndTerrainMenu(Selection2)
             IF (Selection2.EQ.1) THEN
              CALL TerrainMenu(AIM2_terrain_weather, 
     &        'Terrain at weather station    ')
            ELSE IF (Selection2.EQ.2) THEN
              CALL TerrainMenu(AIM2_terrain_building, 
     &        'Terrain at building           ')
            ELSE IF (Selection2.EQ.3) THEN
              CALL ShieldingMenu(AIM2_wall_shielding, 
     &        'Shielding on walls            ')
            ELSE IF (Selection2.EQ.4) THEN
              CALL ShieldingMenu(AIM2_flue_shielding, 
     &        'Shielding on flue             ')
          
C Height of anemometer at weather station.
            ELSE IF (Selection2.EQ.5) THEN
              H(1) ='The Anemometer Height is the height at which the'
              H(2) ='wind speed was measured at the weather station.  A'
              H(3) ='default of 10 meters is assumed, and should not be'
              H(4) ='changed unless a user-defined weather file is used' 
              H(5) ='and the anemometer was at a different height.'
              Temp = AIM2_anemom_height 
              CALL EASKR(Temp,' ',
     &         'Height of anenometor at weather station (m)?',0.1,'F',
     &         100.0,'F',10.0, 'Amenometer height',IER,5)
              IF (IER.EQ.0) AIM2_anemom_height = Temp
              WRITE(DisplayString,'(A, F8.2, A)')
     &          'Height of anenometor: ',AIM2_anemom_height, ' m'
              CALL EDISP(IUOUT,DisplayString)
            ELSE IF (Selection2.EQ.7) THEN
              EXIT
            ENDIF
          END DO

        CASE (4)
C Building eves description.
           Temp = AIM2_eaves_height 
           CALL EASKR(Temp,' ',
     &        'Height of the building eaves (m)?',1.,'F',10.0,
     &        'F',5.0,'Eaves height',IER,3)
           IF (IER.EQ.0) AIM2_eaves_height = Temp
           WRITE(DisplayString,'(A, F8.2, A)')'Building eaves height: ',
     &             AIM2_eaves_height, ' m'
           CALL EDISP(IUOUT,DisplayString)
        
        CASE (5)
C Diameter of furnace flue (mm).
           Temp = AIM2_furnace_flue 
           CALL EASKR(Temp,' ','Diameter of furnace flue (mm)?'
     &          ,0,'F',500.0,'F',200.0,'Furnace flue diameter' 
     &         ,IER,3)
           IF (IER.EQ.0) AIM2_furnace_flue = Temp
           WRITE(DisplayString,'(A, F8.2, A)')'Furnace flue diameter: ',
     &             AIM2_furnace_flue, ' mm'
           CALL EDISP(IUOUT,DisplayString)

C Diameter of #1 fireplace flue (mm).
           Temp = AIM2_fire_flue1 
           CALL EASKR(Temp,' ','Diameter of #1 fireplace flue (mm)?'
     &          ,0,'F',500.0,'F',200.0,'Fireplace #1 flue diameter' 
     &         ,IER,3)
           IF (IER.EQ.0) AIM2_fire_flue1 = Temp
           WRITE(DisplayString,'(A, F8.2, A)')
     &      'Fireplace #1 flue diameter: ', AIM2_fire_flue1, ' mm'
           CALL EDISP(IUOUT,DisplayString)

C Diameter of #2 fireplace flue (mm).
           Temp = AIM2_fire_flue2 
           CALL EASKR(Temp,' ','Diameter of #2 fireplace flue (mm)?'
     &          ,0,'F',500.0,'F',200.0,'Fireplace #2 flue diameter' 
     &         ,IER,3)
           IF (IER.EQ.0) AIM2_fire_flue2 = Temp
           WRITE(DisplayString,'(A, F8.2, A)')
     &      'Fireplace #2 flue diameter: ',AIM2_fire_flue2, ' mm'
           CALL EDISP(IUOUT,DisplayString)

C Diameter of primary DHW system flue (mm).
           Temp = AIM2_DHW_flue1 
           CALL EASKR(Temp,' ',
     &       'Diameter of primary DHW system flue (mm)?',0,'F',
     &       500.0,'F',200.0,'Primary DHW system flue diameter',IER,3)
           IF (IER.EQ.0) AIM2_DHW_flue1 = Temp
           WRITE(DisplayString,'(A, F8.2, A)')
     &       'Primary DHW system flue diameter: ',AIM2_DHW_flue1,' mm'
           CALL EDISP(IUOUT,DisplayString)

C Diameter of secondary DHW system flue (mm).
           Temp = AIM2_DHW_flue2
           CALL EASKR(Temp,' ',
     &        'Diameter of Secondary DHW system flue (mm)?',0,'F',
     &        500.0,'F',200.0,'Secondary DHW system diameter',IER,3)
           IF (IER.EQ.0) AIM2_DHW_flue2 = Temp
           WRITE(DisplayString,'(A, F8.2, A)')
     &       'Secondary DHW system flue diameter: ',AIM2_DHW_flue2, 
     &       ' mm'
           CALL EDISP(IUOUT,DisplayString)

        CASE (6)
          CALL InfiltrationZonesMenu()
        CASE (8)
C Save AIM2 file
          CALL SAVE_AIM2
C Save all parameters to temporary variables to enable checking for 
C any further changes
          CALL Initialise
        CASE (10)
C Check to see if any of the paramets have changed before exiting
          IF (CheckForChanges()) THEN
C Check if the user wants to save the changes made        
            CALL ASKOK(' Do you wish to save your changes?',' ',OK,
     &                .TRUE.,0)
            IF (OK) CALL SAVE_AIM2
          END IF
          EXIT
        END SELECT
      END DO
        
      END SUBROUTINE AIM2_Interface
      
C *********************************************************************
C Created by: Francesca Macdonald
C ClearLeakageParams clears previously defined blower door parameters
C *********************************************************************
      SUBROUTINE ClearLeakageParams()
       
      ACH_50Pa = -1.
      ELA_deltaP = -1.
      ELA_given = 0
      ELA_cm = -1.
      ELA_Cd = -1.
      airtight_type = 0

      END SUBROUTINE ClearLeakageParams

C *********************************************************************
C Created by: Francesca Macdonald
C LeakageMenu allows the user to specify whether the leakage description 
C is from a blower door test (CGSB), a blower door test as operated or
C an Air tightness type
 
C *********************************************************************
      SUBROUTINE LeakageMenu(Selection)
       
      IMPLICIT NONE
C Declare calling parameter types
      INTEGER, INTENT(OUT)  :: Selection        !menu selection
C Declare local variables
      CHARACTER, DIMENSION(5) :: ITEM*34        !Array holding strings for menu items 
      INTEGER :: IER                            !errorflag
      INTEGER :: NITEMS                         !number of items
C Common blocks
      COMMON/POPHELP/H(60)                      !Array holding help text
      CHARACTER :: H*72                         !Strings for help text

      
C Help text for this menu.
      H(1)= 'The Air Tightness Type is used to indicate the natural'
      H(2)= 'infiltration rate. Air tightness is measured in air '
      H(3)= 'changes per hour (ACH). The user has the option of '
      H(4)= 'entering blower door test values to determine the flow'
      H(5)= 'coefficient or specifying an air tightness category where'
      H(6)= 'air change rate and the equivalent leakage area are '
      H(7)= 'automatically calculated by esp-r.'
      H(8)= ''
      H(9)= 'For further information on the blower door tests see'
      H(10)= '1. Canadian General Standards Board (CGSB) standard' 
      H(11)= '   "Determination of the Airtightness of Building '
      H(12)= '    Envelopes by the Fan Depressurization Method" '
      H(13)= '2.  Airtightness tested in accordance with the EnerGuide' 
      H(14)= '    for Houses "as operated" airtightness test procedure'
      H(15)= '    in EnerGuide for Houses: "Energy Advisor Workshop'
      H(16)= '    Manual, Module 3 Conducting a Blower Door Test." '
      
      IF (airtight_type.EQ.1) THEN
        ITEM(1)='a Blower door test (CGSB)        ***'
      ELSE 
        ITEM(1)='a Blower door test (CGSB)  '
      ENDIF
      
      IF (airtight_type.EQ.2) THEN
        ITEM(2)='b Blower door test (as operated) ***'
      ELSE
        ITEM(2)='b Blower door test (as operated)'
      ENDIF
      
      IF (airtight_type.GT.2) THEN
         WRITE(ITEM(3),'(A, I1, A)')
     &           'c Air tightness type   (',airtight_type,')'
      ELSE
        ITEM(3)='c Air tightness type         '
      END IF

      ITEM(4)='? Help         '
      ITEM(5)='- Exit         '
      NITEMS=5

C Selection needs to be set to -4 for the menu to be displayed in text mode
      Selection = -4
      
      CALL EMENU(' Leakage description',ITEM,NITEMS,Selection)
      IF (Selection.EQ.NITEMS-1) THEN! help
C List help text for the Leakage description menu.
        CALL PHELPD('Leakage description',16,'-',0,0,IER)
      ELSE IF (Selection.EQ.NITEMS) THEN
C Exit this menu
        CALL USRMSG(' ',' ','-')
      END IF
              
      END SUBROUTINE LeakageMenu
      
C *********************************************************************
C Created by: Francesca Macdonald
C AirTightnessTypeMenu displays the options for specifying air tightness
C Air tightness type as defined in HOT2000 interface:
C 3=loose; 4=average; 5=present; 6=energy tight.

C *********************************************************************
      SUBROUTINE AirTightnessTypeMenu()
       
      IMPLICIT NONE
C Declare local variables
      CHARACTER, DIMENSION(6) :: ITEM*34        !Array holding strings for menu items 
      CHARACTER :: DisplayString*248            !data selection display string
      INTEGER :: IER                            !errorflag
      INTEGER :: NITEMS                         !number of items
      INTEGER :: INO                            !selection
C Common blocks
      COMMON/OUTIN/IUOUT,IUIN
      INTEGER :: IUOUT,IUIN
      COMMON/POPHELP/H(60)                      !Array holding help text
      CHARACTER :: H*72                         !Strings for help text
      
C Help text for this menu.
      H(1)= 'The Air Tightness Type is used to indicate the natural'
      H(2)= 'infiltration rate. Air tightness is measured in air '
      H(3)= 'changes per hour (ACH). The options are:'
      H(4)= 'Loose (10.35 ACH @ 50 Pa)       '
      H(5)= 'Average (4.55 ACH @ 50 Pa)      '
      H(6)= 'Present (3.57 ACH @ 50 Pa)      '
      H(7)= 'Energy Tight (1.5 ACH @ 50 Pa)  '
      H(8)= 'By specifying one of these air tightness categories, the'
      H(9)= ' air change rate and the equivalent leakage area are '
      H(10)= 'automatically calculated by esp-r.'

      IF (airtight_type-2.EQ.1) THEN    
        ITEM(1)='a Loose          ***'
      ELSE
        ITEM(1)='a Loose             '
      END IF

      IF (airtight_type-2.EQ.2) THEN    
        ITEM(2)='b Average        ***'
      ELSE
        ITEM(2)='b Average           '
      END IF        

      IF (airtight_type-2.EQ.3) THEN    
        ITEM(3)='c Present        ***'
      ELSE
        ITEM(3)='c Present           '
      END IF
      
      IF (airtight_type-2.EQ.4) THEN    
         ITEM(4)='d Energy Tight   ***'
      ELSE
         ITEM(4)='d Energy Tight      '
      END IF
      
      ITEM(5)='? Help              '
      ITEM(6)='- Exit              '
      NITEMS=6

C INO needs to be set to -4 for the menu to be displayed in text mode
      INO = -4
      CALL EMENU(' Air tightness type',ITEM,NITEMS,INO)
      IF (INO.LE.4) THEN
        IF (INO.NE.airtight_type+2) THEN
          CALL ClearLeakageParams()   
        END IF
        airtight_type = INO+2
        WRITE(DisplayString,'(A, A)')'Air tightness type: ',
     &         ITEM(INO)
        CALL EDISP(IUOUT,DisplayString)
      ELSE IF (INO.EQ.NITEMS-1) THEN 
C List help text for the Leakage description menu.
        CALL PHELPD('Leakage description',10,'-',0,0,IER)
      ELSE IF (INO.EQ.NITEMS) THEN
C Exit this menu
        CALL USRMSG(' ',' ','-')
      END IF
          
      END SUBROUTINE AirTightnessTypeMenu
          
C *********************************************************************
C Created by: Francesca Macdonald
C BlowerDoorInputMenu displays the Blower-door results input menu allowing 
C the user to iput the required blower door data.
C Three options are available for the blower-door results inputs
C Option 1: flow coefficient C0 [m^3/(s Pa^n)]
C           flow exponent n
C Option 2: Air change rate @ 50Pa
C           Pressure difference in Pa
C Option 3: Air change rate @ 50Pa
C           Pressure difference in Pa
C           Equivalent leakage area in cm^2
C           Discharge coefficient Cd used to calculate leakage area
 
C *********************************************************************
      SUBROUTINE BlowerDoorInputMenu()
      
      IMPLICIT NONE
C Declare local variables
      CHARACTER, DIMENSION(5) :: ITEM*34        !Array holding strings for menu items 
      CHARACTER :: DisplayString*248            !data selection display string
      INTEGER :: IER                            !errorflag
      INTEGER :: NITEMS                         !number of items
      INTEGER :: INO                            !selection
      REAL :: Temp                              !temporary variable
C Common blocks
      COMMON/OUTIN/IUOUT,IUIN
      INTEGER :: IUOUT,IUIN
      COMMON/POPHELP/H(60)                      !Array holding help text
      CHARACTER :: H*72                         !Strings for help text

C Help text for this menu.
      H(1)= 'The blower door test values entered determine the flow'
      H(2)= 'coefficient.  The blower door test results consist of the'
      H(3)= 'Air Change Rate @ 50 Pa. and the Equivalent Leakage Area'
      H(4)= '(ELA). These results are used to determine the amount of'
      H(5)= 'air leaking through the envelope when an interior/'
      H(6)= 'exterior air pressure differential of 50 Pa air pressure'
      H(7)= 'is applied. Esp-r uses the blower door test data to '
      H(8)= 'generate an air infiltration rate, which provides a '
      H(9)= 'relatively accurate indication of the air leakage '
      H(10)='characteristics of the building. The ELA may be specified'
      H(11)='at either 10 Pa. or 4 Pa. If the ELA is set to zero (0),'
      H(12)='the program estimates the ELA at the specified pressure '
      H(13)='based on the ACH @50, and an assumed flow exponent of '
      H(14)='0.68.'

      IF (blower_door_input_option.EQ.1) THEN
        ITEM(1)='a C & n          ***'
      ELSE
        ITEM(1)='a C & n             '
      ENDIF
      
      IF (blower_door_input_option.EQ.2) THEN
        ITEM(2)='b ACH & delta P     ***'
      ELSE
        ITEM(2)='b ACH & delta P        '
      ENDIF
      
      IF (blower_door_input_option.EQ.3) THEN
         ITEM(3)='c ACH, delta P & ELA   ***'
      ELSE
         ITEM(3)='c ACH, delta P & ELA      '
      ENDIF
      
      
      DisplayString = 'Blower Door Results'
      CALL EDISP(IUOUT,DisplayString)
      
      ITEM(4)='? Help              '
      ITEM(5)='- Exit              '
      NITEMS=5

C INO needs to be set to -4 for the menu to be displayed in text mode
      INO = -4
      CALL EMENU(' Blower-door results input',ITEM,NITEMS,INO)
      IF (INO.NE.blower_door_input_option) THEN
        CALL ClearLeakageParams()   
      END IF
      blower_door_input_option = INO
      

      IF (INO.EQ.1) THEN
C Get the flow coefficient and flow exponent
        Temp = AIM2_CO 
        IF (Temp.EQ.0.) Temp=0.05
        CALL EASKR(Temp,' ',
     &    ' Building fabric flow coefficient [m^3/(s Pa^n)]? ',
     &    0.,'F',0.1,'W',0.05,'flow coefficient',IER,3)
        IF (IER.EQ.0) THEN
          AIM2_CO = Temp
          WRITE(DisplayString,'(A, F7.2, A)')
     &      'Building fabric flow coefficient ',AIM2_CO,
     &      ' [m^3/(s Pa^n)?]'
          CALL EDISP(IUOUT,DisplayString)
        ENDIF
        Temp = AIM2_n
        IF (Temp.EQ.0.) Temp=.67
        CALL EASKR(Temp,' ',
     &    ' Building flow exponent (dimensionless)? ',
     &     0.5,'F',1.,'W',0.67,'flow exponent',IER,3)
        IF (IER.EQ.0) THEN
          AIM2_n = Temp
          WRITE(DisplayString,'(A, F7.2)')
     &      'Building flow exponent (dimensionless) ',AIM2_n
          CALL EDISP(IUOUT,DisplayString)
        ENDIF          

      ELSE IF (INO.LT.4) THEN   ! option 2 or 3 (both need air change rate @ 50Pa)
C Get air change rate @ 50Pa
        Temp = ACH_50Pa
        IF (Temp.EQ.-1.) Temp=15.
        CALL EASKR(Temp,' ',
     &     ' Air change rate @50 Pa? ',
     &     0.1,'F',30.0,'W',15.0,'air change rate',IER,3)
        IF (IER.EQ.0) THEN
          ACH_50Pa = Temp
          WRITE(DisplayString,'(A, F7.2)')
     &      'Air change rate @50 Pa ',ACH_50Pa
          CALL EDISP(IUOUT,DisplayString)
        ENDIF           
C Get Pressure difference in Pa
        Temp = ELA_deltaP
        IF (Temp.EQ.-1.) Temp=10.
        CALL EASKR(Temp,' ','Pressure difference (Pa)?',
     &         4.0,'W',10.0,'W',10.0,'Pressure difference',
     &         IER,3)
        IF (IER.EQ.0) THEN
          ELA_deltaP = Temp
          WRITE(DisplayString,'(A, F7.2, A)')
     &       'Pressure difference ',ELA_deltaP,' Pa'
          CALL EDISP(IUOUT,DisplayString)
        ENDIF          
        IF (INO.EQ.3) THEN
          Temp = ELA_cm
          IF (Temp.EQ.-1.) Temp=500.
          CALL EASKR(Temp,' ',
     &      'Equivalent air leakage area in (ELA) cm^2?',0.1,'F',7999.0
     &      ,'W',500.0,'Equivalent air leakage area',IER,3)
          IF (IER.EQ.0) THEN
            ELA_given = 1 !input given
            ELA_cm = Temp
             WRITE(DisplayString,'(A, F8.2, A)')
     &              'Equivalent air leakage area ',ELA_cm,' cm^2'
            CALL EDISP(IUOUT,DisplayString)
          ELSE         
            ELA_given = 0 !no input
          ENDIF
        ENDIF

      ELSE IF (INO.EQ.NITEMS-1) THEN     !help
C List help text for the Leakage description menu.
        CALL PHELPD('Leakage description',14,'-',0,0,IER)
      ELSE IF (INO.EQ.NITEMS) THEN
C Exit this menu
        CALL USRMSG(' ',' ','-')
      END IF

      END SUBROUTINE BlowerDoorInputMenu

C *********************************************************************
C Created by: Francesca Macdonald
C LeakageDistribution allows the user to iput the leakage fractions for ceiling, wall, and floor
C userspec_leakage - Flag indicating whether user has specified leakage fractions for ceiling,
C wall, and floor: 0 indicates user input not given; 1 indicates user input given.
C AIM2_ceil_frac,AIM2_wall_frac,AIM2_floor_frac - Ceiling, wall, and floor leakage fractions.

C *********************************************************************
      SUBROUTINE LeakageDistribution()
       
      IMPLICIT NONE

C Declare local variables
      CHARACTER :: DisplayString*248        !data selection display string
      INTEGER :: IER                        !errorflag
      INTEGER :: INO                        !selection
      REAL :: Temp                        !temporary variable
C Common blocks
      COMMON/OUTIN/IUOUT,IUIN
      INTEGER :: IUOUT,IUIN
      COMMON/POPHELP/H(60)                 !Array holding help text
      CHARACTER :: H*72                        !Strings for help text

C Help text for the leakage distribution
      H(1)= 'Leakage Fraction for Ceilings, Walls, and Floors'
      H(2)= 'The leakage fractions are used to define the fraction of'
      H(3)= 'the total building air leakage to attribute to the '
      H(4)= 'ceilings, walls and floors.'
      H(5)= 'If use defaults is selected, the default values are set '
      H(6)= 'by esp-r and are based on the house type, number of'      
      H(7)= 'storeys, and the type of foundation (crawl space, '
      H(8)= 'basement) specified for the house.'
      H(9)= 'Otherwise the user must specify the leakage fractions '
      H(10)= 'to ceilings, walls, and floors. The desired leakage '
      H(11)= 'fractions must be entered as a decimal value, and must '
      H(12)= 'total 1.0.'
        
      CALL EASKAB(
     &    'Specify leakage fractions for ceiling, wall and floor?',
     &    'Options:','No - use defaults','Yes',INO,12)
     
      userspec_leakage = INO-1
          
      IF (userspec_leakage.EQ.1) THEN
         !make sure the fractions add up to 1.0
        DO
        
C defaults assumed from http://www.inive.org/members_area/medias/pdf/Inive%5CIBPSA%5CUFSC425.pdf
          Temp = AIM2_ceil_frac
          CALL EASKR(Temp,' ',
     &       'What is the leakage fraction for the ceiling?',0.0,'F',
     &         1.0,'F',0.2,'ceiling leakage fraction',IER,12)
          IF (IER.EQ.0) AIM2_ceil_frac = Temp
          Temp = AIM2_wall_frac
          CALL EASKR(Temp,' ',
     &        'What is the leakage fraction for the wall?  ',0.0,'F',
     &         1.0,'F',0.65,'wall leakage fraction',IER,12)
          IF (IER.EQ.0) AIM2_wall_frac = Temp
          Temp = AIM2_floor_frac
          CALL EASKR(Temp,' ',
     &        'What is the leakage fraction for the floor? ',0.0,'F',
     &         1.0,'F',0.15,'floor leakage fraction',IER,12)

C check to ensure fractions add up to 1.
          IF (IER.EQ.0) AIM2_floor_frac = Temp
            Temp = AIM2_ceil_frac+AIM2_wall_frac+AIM2_floor_frac
          IF (Temp.EQ.1.) THEN
            WRITE(DisplayString,'(A, F6.3, A, F6.3, A, F6.2)')
     &             ' Ceiling: ',AIM2_ceil_frac, 
     &       '     Wall: ',AIM2_wall_frac,
     &       '     Floor: ',AIM2_floor_frac
            CALL EDISP(IUOUT,'Infiltration leakage fractions:')
            CALL EDISP(IUOUT,DisplayString)
            EXIT
          ENDIF
          CALL USRMSG(' ','The fractions must add up to 1.0 ','W')
        END DO
      ENDIF
         
      END SUBROUTINE LeakageDistribution
          
      
C *********************************************************************
C Created by: Francesca Macdonald
C ShieldingAndTerrainMenu enables to user to specify
C Terrain flag at weather station (AIM2_terrain_weather)
C Terrain flag at building site (AIM2_terrain_building)
C Flag indicating local shielding on walls (AIM2_wall_shielding)
C Flag indicating local shielding on flue (AIM2_flue_shielding)
C Height of anenometor at weather station (m).
C *********************************************************************
      SUBROUTINE ShieldingAndTerrainMenu(Selection)
       
      IMPLICIT NONE
C Declare calling parameters 
      INTEGER, INTENT(OUT)  :: Selection
C Declare local variables
      CHARACTER, DIMENSION(7) :: ITEM*34        !Array holding strings for menu items 
      CHARACTER :: DisplayString*248            !data selection display string
      INTEGER :: IER                            !errorflag
      INTEGER :: NITEMS                         !number of items
      INTEGER :: INO                            !menu selection
      REAL :: Temp                              !temporary variable
      INTEGER :: PreviousSelection              !previous menu selction
C Common blocks
      COMMON/OUTIN/IUOUT,IUIN
      INTEGER :: IUOUT,IUIN
      COMMON/POPHELP/H(60)                      !Array holding help text
      CHARACTER :: H*72                         !Strings for help text

C Help text for this menu.
      H(1)= 'The weather station terrain is used to specify the '
      H(2)= 'terrain at the weather station and the building site'
      H(3)= 'terrain is used to specify the local terrain for the'
      H(4)= 'building.  The default for the weather station is'
      H(5)= 'c) Open Flat terrain, grass.'
      H(6)= 'The two terrains are used to calculate the wind speed'
      H(7)= 'correction factor. This is a function of the surface'
      H(8)= 'roughness lengths at the building site and weather '
      H(9)= 'station, the height of the eaves, and the height of '
      H(10)= 'the anemometer at the weather station. '
      H(11)= 'This is equation 27 from Bradley (1993, p8).'
            
      IF (AIM2_terrain_weather.NE.-1) THEN
        WRITE(ITEM(1),'(A, I1, A)')'a Terrain at weather station  (',
     &                  AIM2_terrain_weather,')'
      ELSE
        ITEM(1)='a Terrain at weather station   '
      ENDIF 
      
      IF (AIM2_terrain_building.NE.-1) THEN
        WRITE(ITEM(2),'(A, I1, A)')'b Terrain at building         (',
     &                 AIM2_terrain_building,')'
      ELSE
        ITEM(2)='b Terrain at building          '
      ENDIF 
      
      IF (AIM2_wall_shielding.NE.-1) THEN
        WRITE(ITEM(3),'(A, I1, A)')'c shielding on walls          (',
     &                AIM2_wall_shielding,')'
      ELSE
        ITEM(3)='c shielding on walls       '
      ENDIF 
      
      IF (AIM2_flue_shielding.NE.-1) THEN
        WRITE(ITEM(4),'(A, I1, A)')'d shielding on flue           (',
     &                 AIM2_flue_shielding,')'
      ELSE
        ITEM(4)='d shielding on flue         '
      ENDIF 
      
      IF (AIM2_anemom_height.NE.-1.) THEN
        WRITE(ITEM(5),'(A, F6.2, A)')'e anemometer height  (',
     &                   AIM2_anemom_height,' (m))'
      ELSE
        ITEM(5)='e anemometer height       '
      ENDIF
      
      ITEM(6)='? Help              '
      ITEM(7)='- Exit         '
      NITEMS=7


C Because the selection needs to be set to -4 for the menu to be displayed in text mode
C the selection (if one was made) needs to be saved in case the user does not change their
C selection
      PreviousSelection = Selection  
      Selection = -4

      CALL EMENU(' Shielding and terrain description',ITEM,NITEMS,
     &          Selection)

      IF (Selection.EQ.NITEMS-1) THEN
C List help text for the Shielding and Terrain menu.
        Selection = PreviousSelection 
        CALL PHELPD('Shielding and terrain description',11,'-',0,0,IER)
      ELSE IF (Selection.EQ.NITEMS) THEN
C Exit this menu
        CALL USRMSG(' ',' ','-')
      END IF
     
      END SUBROUTINE ShieldingAndTerrainMenu
     
     
C *********************************************************************
C Created by: Francesca Macdonald
C TerrainMenu displays the terrain menu used to select the terrain flag
C for the weather station and for the building site.
C         1=Open sea,fetch > 5 km
C         2=Mud flats,no vegetation
C         3=Open flat terrain, grass
C         4=Low crops, x/H > 20
C         5=High crops, scattered obstacles
C         6=Parkland, bushes, x/H ~ 10
C         7=Suburban, forest
C         8=City centre
C *********************************************************************
      SUBROUTINE TerrainMenu(TerrainSelection, MenuString)
       
      IMPLICIT NONE
C Declare calling parameters 
      INTEGER, INTENT(INOUT)  :: TerrainSelection            !menu selection
      CHARACTER, INTENT(IN)  :: MenuString*30                !string of menu item
C Declare local variables
      CHARACTER, DIMENSION(10) :: ITEM*34                    !Array holding strings for menu items 
      CHARACTER :: DisplayString*248                         !data selection display string
      INTEGER :: IER                                         !errorflag
      INTEGER :: NITEMS                                      !number of items
      INTEGER :: PreviousSelection                           !previous menu selction
C Common blocks
      COMMON/OUTIN/IUOUT,IUIN
      INTEGER :: IUOUT,IUIN
      COMMON/POPHELP/H(60)                                   !Array holding help text
      CHARACTER :: H*72                                      !Strings for help text

C Help text for this menu.
      H(1)= 'The weather station terrain is used to specify the '
      H(2)= 'terrain at the weather station and the building site'
      H(3)= 'terrain is used to specify the local terrain for the'
      H(4)= 'building.  The default for the weather station is'
      H(5)= 'c) Open Flat terrain, grass.'
      H(6)= 'The two terrains are used to calculate the wind speed'
      H(7)= 'correction factor. This is a function of the surface'
      H(8)= 'roughness lengths at the building site and weather '
      H(9)= 'station, the height of the eaves, and the height of '
      H(10)= 'the anemometer at the weather station. '
      H(11)= 'This is equation 27 from Bradley (1993, p8).'
 
            
      IF (TerrainSelection.EQ.1) THEN
        ITEM(1)='a Open sea,fetch > 5 km          ***'
      ELSE
        ITEM(1)='a Open sea,fetch > 5 km             '
      END IF 
      
      IF (TerrainSelection.EQ.2) THEN
        ITEM(2)='b Mud flats,no vegetation        ***'
      ELSE
        ITEM(2)='b Mud flats,no vegetation           '
      END IF 
      
      IF (TerrainSelection.EQ.3) THEN
        ITEM(3)='c Open flat terrain, grass       ***'
      ELSE
        ITEM(3)='c Open flat terrain, grass          '
      END IF 
      
      IF (TerrainSelection.EQ.4) THEN
        ITEM(4)='d Low crops, x/H > 20            ***'
      ELSE
        ITEM(4)='d Low crops, x/H > 20               '
      END IF 
      
      IF (TerrainSelection.EQ.5) THEN
        ITEM(5)='e High crops, scattered obstacles ***'
      ELSE
        ITEM(5)='e High crops, scattered obstacles    '
      END IF 
      
      IF (TerrainSelection.EQ.6) THEN
        ITEM(6)='f Parkland, bushes, x/H ~ 10     ***'
      ELSE
        ITEM(6)='f Parkland, bushes, x/H ~ 10        '
      END IF 
      
      IF (TerrainSelection.EQ.7) THEN
        ITEM(7)='g Suburban, forest               ***'
      ELSE
        ITEM(7)='g Suburban, forest                  '
      END IF 
      
      IF (TerrainSelection.EQ.8) THEN
        ITEM(8)='h City centre                    ***'
      ELSE
        ITEM(8)='h City centre                       '
      END IF 
     
      ITEM(9)='- Help         '
      ITEM(10)='- Exit         '
      NITEMS=10

C Because the selection needs to be set to -4 for the menu to be displayed in text mode
C the selection (if one was made) needs to be saved in case the user does not change their
C selection
      PreviousSelection = TerrainSelection  
      TerrainSelection = -4

      CALL EMENU(MenuString,ITEM,NITEMS,TerrainSelection)

      IF (TerrainSelection.EQ.NITEMS-1) THEN
C List help text for the Shielding and Terrain menu.
        TerrainSelection = PreviousSelection 
        CALL PHELPD('Terrain selection',11,'-',0,0,IER)
      ELSE IF (TerrainSelection.EQ.NITEMS) THEN 
C Exit this menu
        TerrainSelection = PreviousSelection
        CALL USRMSG(' ',' ','-')
        RETURN
      ENDIF
        
      WRITE(DisplayString,'(A, A, A)')MenuString, ' ',
     &   ITEM(TerrainSelection)
      CALL EDISP(IUOUT,DisplayString)
        
      END SUBROUTINE TerrainMenu
      
C *********************************************************************
C Created by: Francesca Macdonald
C ShieldingMenu displays the shielding menu used to select the local 
C shielding on the walls and flue
C         1=No local shielding
C         2=Light local shielding
C         3=Heavy
C         4=Very heavy
C         5=Complete (by large buildings)
C *********************************************************************
      SUBROUTINE ShieldingMenu(ShieldingSelection, MenuString)
       
      IMPLICIT NONE
C Declare calling parameters 
      INTEGER, INTENT(INOUT)  :: ShieldingSelection          !menu selection
      CHARACTER, INTENT(IN)  :: MenuString*30                !string of menu item
C Declare local variables
      CHARACTER, DIMENSION(7) :: ITEM*34                     !Array holding strings for menu items 
      CHARACTER :: DisplayString*248                         !data selection display string
      INTEGER :: IER                                         !errorflag
      INTEGER :: NITEMS                                      !number of items
      INTEGER :: PreviousSelection                           !previous menu selction
C Common blocks
      COMMON/OUTIN/IUOUT,IUIN
      INTEGER :: IUOUT,IUIN
      COMMON/POPHELP/H(60)                                   !Array holding help text
      CHARACTER :: H*72                                      !Strings for help text

C Help text for this menu.
      H(1)= 'Local Shielding Walls and Flue'
      H(2)= 'The Local Shielding Walls and Flue fields are used to '
      H(3)= 'specify how well both the walls and the flue are shielded'
      H(4)= 'from the wind.  The options are:'
      H(5)= '1. None: no local shielding (i.e. no obstructions)'
      H(6)= '2. Light: local shielding having few obstructions within '
      H(7)= '   two house heights'
      H(8)= '3. Heavy: local shielding having many large obstructions'
      H(9)= '   within two house heights'
      H(10)= '4. Very Heavy: local shielding having many large '
      H(11)= '   obstructions within one house height'
      H(12)= '5. Complete (by large buildings): local shielding having'
      H(13)= '   large buildings immediately adjacent'
 
      
      IF (ShieldingSelection.EQ.1) THEN
        ITEM(1)='a None          ***'
      ELSE
        ITEM(1)='a None             '
      END IF 
      
      IF (ShieldingSelection.EQ.2) THEN
        ITEM(2)='b Light        ***'
      ELSE
        ITEM(2)='b Light           '
      END IF 
      
      IF (ShieldingSelection.EQ.3) THEN
        ITEM(3)='c Heavy       ***'
      ELSE
        ITEM(3)='c Heavy          '
      END IF 
      
      IF (ShieldingSelection.EQ.4) THEN
        ITEM(4)='d Very Heavy            ***'
      ELSE
        ITEM(4)='d Very Heavy               '
      END IF 
      
      IF (ShieldingSelection.EQ.5) THEN
        ITEM(5)='e Complete (by large buildings)    ***'
      ELSE
        ITEM(5)='e Complete (by large buildings)       '
      END IF 
      
      ITEM(6)='- Help         '
      ITEM(7)='- Exit         '
      NITEMS=7

C Because the selection needs to be set to -4 for the menu to be displayed in text mode
C the selection (if one was made) needs to be saved in case the user does not change their
C selection
      PreviousSelection = ShieldingSelection  
      ShieldingSelection = -4
      
      CALL EMENU(MenuString,ITEM,NITEMS,ShieldingSelection)

      IF (ShieldingSelection.EQ.NITEMS-1) THEN
C List help text for the Shielding and Terrain menu.
        ShieldingSelection = PreviousSelection 
        CALL PHELPD('Shielding selection',13,'-',0,0,IER)
       ELSE IF (ShieldingSelection.EQ.NITEMS) THEN 
C Exit this menu
        ShieldingSelection = PreviousSelection
        CALL USRMSG(' ',' ','-')
        RETURN
      ENDIF

      WRITE(DisplayString,'(A, A, A)')MenuString, ' ',
     &        ITEM(ShieldingSelection)
      CALL EDISP(IUOUT,DisplayString)
        
      END SUBROUTINE ShieldingMenu

      
C *********************************************************************
C Created by: Francesca Macdonald
C InfiltrationZonesMenu allows the user to specify the zones used in the
C infiltration calculations.
C Number of zone whose temperature is used as reference. (AIM2_ref_zone)
C Number of zones that receive infiltration.(AIM2_num_zones_infil)
C Matrix holding indices of zones that receive infiltration.(AIM2_zone_infil)
C Zone number of basement.(AIM2_basement_zone)
C Zone number of Crawl Space (AIM2_CrawlSpace_zone)
C Zone number of attic. (AIM2_attic_zone)
C *********************************************************************
      SUBROUTINE InfiltrationZonesMenu()
       
      IMPLICIT NONE
C Declare local variables
      CHARACTER, DIMENSION(8) :: ITEM*34            !Array holding strings for menu items 
      CHARACTER :: DisplayString*248                !data selection display string
      CHARACTER :: TempString*128                   !data selection display string
      INTEGER :: IER                                !errorflag
      INTEGER :: INO                                !Selection
      INTEGER :: zoneindex                          !index for do loop
      INTEGER :: Zone                               !current zone number
      INTEGER :: allocate_status                    !returns 0 for sucessful allocation
      INTEGER :: NITEMS                             !number of items
      LOGICAL :: OK                                 !yes/no flag for reverting basement, crawlspace & attic selections
C Common blocks
      COMMON/OUTIN/IUOUT,IUIN
      INTEGER :: IUOUT,IUIN
      COMMON/FOPENED/CFGOK,MLDBOK,MATDBOK,CTLOK,OPTKOK
      LOGICAL :: CFGOK,MLDBOK,MATDBOK,CTLOK,OPTKOK  !CFGOK flag for wether cfg file has been loaded in
      COMMON/C1/NCOMP,NCON
      INTEGER :: NCOMP,NCON                         !ncomp is the number of zones      
      COMMON/POPHELP/H(60)                          !Array holding help text
      CHARACTER :: H*72                             !Strings for help text
      INTEGER, DIMENSION(NCOMP) :: InfilZones       !Temporary array to hold zones to recieve infiltration

      InfilZones=0
      
          
      ITEM(1)='a Reference zone         '
      ITEM(2)='b Infiltration zones '
      ITEM(3)='c Basement zone '
      ITEM(4)='d Crawl space zone '
      ITEM(5)='e Attic zone '
      ITEM(6)='? Help              '
      ITEM(7)='- Exit              ' 
      NITEMS = 7            
C Help text for this menu.
      H(1)= 'The reference zone is the number of the zone whose '
      H(2)= 'temperature is used as reference for infiltration '
      H(3)= 'calculations.'
      H(4)= ''
      H(5)= 'The infiltration zones are the zone numbers of zones '
      H(6)= 'that receive infiltration.'
      H(7)= ''
      H(8)= 'The basement zone is the number of the zone describing '
      H(9)= 'the basement as basements have different infiltration '
      H(10)= 'air flow allocations to that of living space. If no ' 
      H(11)= 'basement is selected, it is assumed that there is no '
      H(12)= 'basement.'
      H(13)= ''
      H(14)= 'The crawlspace zone is the number of the zone describing'
      H(15)= 'the crawlspace as crawlspaces are not included in the'
      H(16)=' house volume for infiltration calculations.  If no crawl'
      H(17)= 'space is selected, it is assumed that there is no crawl'
      H(18)= 'space.'
      H(19)= ''
      H(20)= 'The attic zone is the number of the zone describing '
      H(21)= 'the attic as infiltration to attics is not calculated'
      H(22)= 'with AIM-2 model. If no attic is selected, it is assumed'
      H(23)= 'that there is no attic.  '

C INO needs to be set to -4 for the menu to be displayed in text mode
      INO = -4
      DO
        OK = .FALSE.      
        CALL EMENU(' Infiltration Zones',ITEM,NITEMS,INO)
      
        SELECT CASE (INO)
C Number of zone whose temperature is used as reference for infiltration calculations.
        CASE (1)
          Zone = AIM2_ref_zone
C present a list of zones.
          Zone = AIM2_ref_zone
          CALL ASKZONE(Zone,Zone,
     &      'Select the zone to use as the reference zone',
     &      'Reference Zone','-','Please select a zone',IER)
C Check for errors     
          IF (IER.EQ.0) THEN
            AIM2_ref_zone = Zone
            WRITE(DisplayString,'(A, I5)')'Reference zone number:',
     &              AIM2_ref_zone
            CALL EDISP(IUOUT,DisplayString)
          END IF 

C Array holding indices of zones that receive infiltration.  
        CASE (2)
          CALL ASKMULTIZONE(AIM2_num_zones_infil,InfilZones,
     &          ' Select zones to receive infiltration?',
     &          'Infiltration Zones','-',IER)
C Check for errors     
          IF (IER.EQ.0) THEN
C Allocate memory for AIM2_zone_infil and AIM2_infil_to_zones matices
            CALL AIM2_Deallocate
            ALLOCATE(AIM2_zone_infil(AIM2_num_zones_infil),
     &          STAT=allocate_status)
C Check allocation was sucessful     
            IF (.NOT.ALLOCATED(AIM2_zone_infil)) THEN
              CALL EDISP(IUOUT,' AIM2_zone_infil not allocated')
            END IF
          
            ALLOCATE(AIM2_infil_to_zones(NCOMP),
     &                 STAT=allocate_status)
C Check allocation was sucessful     
            IF (.NOT.ALLOCATED(AIM2_infil_to_zones)) THEN
              CALL EDISP(IUOUT,'AIM2_infil_to_zones not allocated')
            END IF
C Copy array data            
            AIM2_zone_infil=InfilZones
C Display the zones selected           
            WRITE(DisplayString,'(A, I5)')
     &         'Number of zones receiving infiltration:', 
     &          AIM2_num_zones_infil
            CALL EDISP(IUOUT,DisplayString)
C write out the zones selected
            DisplayString = 'Zones receiving infiltration:'
            DO zoneindex=1,AIM2_num_zones_infil
              WRITE(TempString,'(A,1x,I3)')
     &              DisplayString(1:lnblnk(DisplayString)),
     &              AIM2_zone_infil(zoneindex)
              WRITE(DisplayString,'(A)')TempString
            END DO          
            CALL EDISP(IUOUT,DisplayString)
          END IF
C Zone number of basement 
        CASE (3)
          Zone = AIM2_basement_zone
          IF (Zone.NE.0) THEN
            CALL ASKOK('Do you wish to revert to having no basement?',
     &                ' ',OK,.TRUE.,0)
            IF (OK) AIM2_basement_zone = 0
          END IF
          IF (.NOT.OK) THEN
            CALL ASKZONE(Zone,Zone,'Select the basement zone ',
     &        'Basement Zone','-','Please select a zone',IER)
C check that the basement zone is not the same as the attic and crawlspace
            IF (IER.EQ.0) THEN
              IF (Zone.EQ.AIM2_CrawlSpace_zone) THEN
                CALL USRMSG('',
     &          'Basement & crawlspace zone numbers are the same!','W')
              END IF
              IF (Zone.EQ.AIM2_attic_zone) THEN
                CALL USRMSG('',
     &            'Basement & attic zone numbers are the same!','W')
              END IF
              AIM2_basement_zone = Zone
              WRITE(DisplayString,'(A, I5)')
     &           'Number of basement zone:', AIM2_basement_zone
              CALL EDISP(IUOUT,DisplayString)
            END IF
          END IF 

C Zone number of Crawl Space 
        CASE (4)
          Zone = AIM2_CrawlSpace_zone
          IF (Zone.NE.0) THEN
           CALL ASKOK('Do you wish to revert to having no crawlspace?',
     &                ' ',OK,.TRUE.,0)
            IF (OK) AIM2_CrawlSpace_zone = 0
          END IF
          IF (.NOT.OK) THEN
            CALL ASKZONE(Zone,0,'Select the crawl space zone ',
     &        'Crawl space Zone','-','Please select a zone',IER)
C check that the basement zone is not the same as the attic and crawlspace
            IF (Zone.EQ.AIM2_basement_zone) THEN
              CALL USRMSG(' ',
     &        'Basement & crawlspace zone numbers are the same!','W')
            END IF
            IF (Zone.EQ.AIM2_attic_zone) THEN
              CALL USRMSG(' ',
     &        'Crawlspace & attic zone numbers are the same!','W')
            END IF
            AIM2_CrawlSpace_zone = Zone
            WRITE(DisplayString,'(A, I5)')
     &        'Number of crawl space zone:', AIM2_CrawlSpace_zone
            CALL EDISP(IUOUT,DisplayString)
          END IF
C Zone number of attic. 
        CASE (5)
          Zone = AIM2_attic_zone
          IF (Zone.NE.0) THEN
            CALL ASKOK('Do you wish to revert to having no attic?',
     &                ' ',OK,.TRUE.,0)
            IF (OK) AIM2_attic_zone = 0
          END IF
          IF (.NOT.OK) THEN
            CALL ASKZONE(Zone,0,'Select the attic zone ',
     &        'Attic Zone','-','Please select a zone',IER)
C check that the basement zone is not the same as the attic and crawlspace
            IF (Zone.EQ.AIM2_basement_zone) THEN
              CALL USRMSG('',
     &         'Basement & attic zone numbers are the same!','W')
            END IF
            IF (Zone.EQ.AIM2_CrawlSpace_zone) THEN
              CALL USRMSG('',
     &         'Crawlspace & attic zone numbers are the same!','W')
            END IF
            AIM2_attic_zone = Zone
            WRITE(DisplayString,'(A, I5)')
     &         'Number of attic zone:', AIM2_attic_zone
            CALL EDISP(IUOUT,DisplayString)
         END IF
         CASE (6)
C List help text for the Infiltration Zones menu.
           CALL PHELPD('Infiltration Zones',23,'-',0,0,IER)
         CASE (7)
C Exit this menu
           CALL USRMSG(' ',' ','-')
           EXIT
        END SELECT
      END DO  
      END SUBROUTINE InfiltrationZonesMenu

C ********************************************************************************
C ************************ SAVE_AIM2 *******************************************
C Created by: Francesca Macdonald
C SAVE_AIM2 saves the input data required by the AIM-2 infiltration
C model (i.e. the contents of the .aim file). 

C INPUTS:
C    LAIM2  The name of the AIM-2 data input file.
C ********************************************************************************

      SUBROUTINE SAVE_AIM2

      IMPLICIT NONE
C Declare local variables
      CHARACTER :: OutString*248         !display data string 
      CHARACTER :: TempString*248        !temporary string 
      CHARACTER :: CaseString*128        !temporary string 
      CHARACTER :: PadString*128         !temporary formating string 
      CHARACTER :: PathString*128        !path to aim2 directory
      INTEGER :: IER                     !errorflag
      INTEGER :: INO                     !Selection
      INTEGER :: zoneindex               !index for do loop
      INTEGER :: Zone                    !current zone number
      INTEGER :: allocate_status         !returns 0 for sucessful allocation
      INTEGER :: ISTAT                   !status flag for file closure
      INTEGER :: AIM2_FUnit              !File unit number
      INTEGER :: i                       !loop counter
      INTEGER :: TestCase                !temporary select case variable
      INTEGER :: padlength               !used to pad out a variable length string
C Common blocks
      COMMON/WindowControl/
     &     fWindowSetpoint,
     &     fACSetPoint,
     &     bWindowControlFlag,
     &     iWindowControlZone,
     &     bWindowsAreOpen,
     &    fDeltaTInttoExt,
     &     fWindowLowSetpoint
      REAL fWindowSetpoint
      REAL fACSetPoint
      INTEGER iWindowControlZone
      LOGICAL bWindowControlFlag
      LOGICAL bWindowsAreOpen
      REAL  fDeltaTInttoExt
      REAL fWindowLowSetpoint
      COMMON/OUTIN/IUOUT,IUIN
      INTEGER :: IUOUT, IUIN
      COMMON/USER/BROWSE
      LOGICAL BROWSE
      COMMON/paths/zonepth,netpth,ctlpth,imgpth,radpth,docpth,tmppth,
     &             dbspth,aimpth,bsmpth
      COMMON/rpath/path
      CHARACTER path*72
      CHARACTER*24 :: zonepth,netpth,ctlpth,imgpth,radpth,docpth
      CHARACTER*24 :: tmppth,dbspth,aimpth,bsmpth
      INTEGER :: aim2index
      INTEGER :: ipaths
      LOGICAL :: unixok
      CHARACTER :: fs*1
      
CPrint out all the selected parameters
      CALL AIM2_report(iuout,0)
      
C check that the current model is not one being browsed.
      IF (BROWSE) THEN
        CALL USRMSG('Cannot save the AIM2file while in browse',
     &                'mode: you must own the model!','W')
        RETURN
      END IF

      
      AIM2_FUnit = 42
      
C Set iAIM2 flag to ensure AIM2 file path is saved in the cfg file      
      iAIM2 = 1
        
C Check to see if standard directories exist, by checking to see if there is a zones folder
      ipaths = lnblnk(zonepth)
C Other folders exist so create an aim2 folder if it doesn't      
      IF (ipaths.GT.3) THEN
	aimpth='../aim2'
        WRITE(OutString,'(3A)')'mkdir -p ',path(1:lnblnk(path)),aimpth
C Create aim2 directory (-p in mkdir supresses any error messages resulting from existing directories)
        CALL system(OutString)
C Set folder separator (fs) to \ or / as required.
        CALL isunix(unixok)
        IF(unixok)THEN
          fs = char(47)
        ELSE
          fs = char(92)
        END IF
        WRITE(TempString,'(3A)')aimpth(1:lnblnk(aimpth)),fs,
     &         'infiltration.aim'
      ELSE
        WRITE(TempString,'(2A)')aimpth(1:lnblnk(aimpth)),
     &         'infiltration.aim'
      END IF
C If LAIM2 isn't set get the default
      IF (LAIM2.EQ.'UNKNOWN'.OR.LEN_TRIM(LAIM2).EQ.0) THEN
        WRITE(LAIM2,'(A)')Tempstring(1:LEN(LAIM2))
      END IF
C Get the filename
      CALL EASKF(LAIM2,' What is the AIM2 file name?',' ',
     &      72,TempString,'AIM2 filename',IER,0)
C Check for error
      IF (IER.NE.0) THEN
        CALL USRMSG('Problem with filename',' ','W')
        RETURN
      END IF
C If the infiltration file exists use it check about overwritting, otherwise create it.
      CALL EFOPSEQ(AIM2_FUnit,LAIM2,4,IER)
  
      
C Check for error
      IF (IER.NE.0) THEN
        CALL USRMSG('Problem with opening aim2 file',' ','W')
        RETURN
      END IF

C If error opening file - return
      IF(IER.LT.0)THEN
        WRITE(TempString,'(A, I2)')'File not opened', IER
        CALL USRMSG(' ',TempString,'W')
        RETURN
      ENDIF

C Write air tightness type.
      WRITE(AIM2_FUnit,'(A)')
     &  '#---Leakage description--------------------------------------'
     
C Write air tightness type and supplementary blower door data
      IF (airtight_type.GT.2) THEN
        OutString = '# Air tightness type is :'
        TempString = OutString
        SELECT CASE(airtight_type)
          CASE(3)
            WRITE(OutString,'(A,A)')TempString(1:lnblnk(TempString)),
     &            'Loose '
          CASE(4)
            WRITE(OutString,'(A,A)')TempString(1:lnblnk(TempString)),
     &            'Average '
          CASE(5)
            WRITE(OutString,'(A,A)')TempString(1:lnblnk(TempString)),
     &           'Present '
          CASE(6)
            WRITE(OutString,'(A,A)')TempString(1:lnblnk(TempString)),
     &           'Energy tight '
        END SELECT
        WRITE(AIM2_FUnit,'(I3,37x,A)')airtight_type,OutString
      ELSE
        OutString = '# Blower door input; '
        TempString = OutString
        IF (blower_door_input_option.EQ.1) THEN
           WRITE(OutString,'(A,2(A,F7.2))')
     &       TempString(1:lnblnk(TempString)),'flow coefficient (C)=',
     &       AIM2_CO,' [m^3/(s Pa^n)?]; flow exponent (n)=',AIM2_n
          WRITE(AIM2_FUnit,'(2I3,2F7.2,20x,A)') airtight_type,
     &          blower_door_input_option, AIM2_CO, AIM2_n,OutString
        ELSE
          WRITE(OutString,'(A,2(F7.2,A))')
     &       TempString(1:lnblnk(TempString)),ACH_50Pa,
     &       'ac/h @50 Pa; ELA dP=',ELA_deltaP,' Pa;'
          TempString = OutString
          IF (blower_door_input_option.EQ.2) THEN
            WRITE(OutString,'(2A)')
     &          TempString(1:lnblnk(TempString)),'ELA not given'
            WRITE(AIM2_FUnit,'(2I3,2F7.2,20x,A)') airtight_type,
     &          blower_door_input_option, ACH_50Pa, ELA_deltaP,
     &          OutString
          ELSE IF (blower_door_input_option.EQ.3) THEN
            WRITE(OutString,'(2A,F8.2,A)')
     &          TempString(1:lnblnk(TempString)),'ELA=',ELA_cm,' cm^2'
            WRITE(AIM2_FUnit,'(2I3,4F7.2,6x,A)') airtight_type,
     &          blower_door_input_option, ACH_50Pa,ELA_deltaP, ELA_cm, 
     &          ELA_Cd,OutString
          ENDIF
        ENDIF
      ENDIF

C Write leakage distribution (if specified).
      WRITE(AIM2_FUnit,'(A)')
     &  '#---Leakage distribution-------------------------------------'
      IF(userspec_leakage.EQ.1)THEN
        TempString='# Ceiling, wall & floor fractions'
        WRITE(AIM2_FUnit,'(I3,3F7.2,16x,A)') 
     &     userspec_leakage,AIM2_ceil_frac,AIM2_wall_frac,
     &     AIM2_floor_frac,TempString
      ELSE IF (userspec_leakage.EQ.0)THEN
        WRITE(AIM2_FUnit,'(I3,37x,A)')userspec_leakage,
     &    '# Use default leakage distribution'
      ENDIF
C Write shielding and terrain data.
      WRITE(AIM2_FUnit,'(A)')
     &  '#---Shielding and terrain data-------------------------------'
      DO i=1,2
        IF (i.EQ.1) THEN
          TestCase = AIM2_terrain_weather
          OutString = '# Weather station terrain:'
        ELSE 
          TestCase = AIM2_terrain_building
          TempString = OutString
          WRITE(OutString,'(2A)'),TempString(1:lnblnk(TempString)),
     &         ';   Building site terrain:'
        END IF
        SELECT CASE (TestCase)
          CASE (1)
            CaseString='Open sea,fetch > 5 km'
          CASE (2)
            CaseString='Mud flats,no vegetation'
          CASE (3)
            CaseString='Open flat terrain, grass'
          CASE (4)
            CaseString='Low crops, x/H > 20'
          CASE (5)
            CaseString='High crops, scattered obstacles'
          CASE (6)
            CaseString='Parkland, bushes, x/H ~ 10'
          CASE (7)
            CaseString='Suburban, forest'
          CASE (8)
            CaseString='City centre'
          CASE DEFAULT
            CaseString=''
        END SELECT
        TempString = OutString
        WRITE(OutString,'(3A)'),TempString(1:lnblnk(TempString)),
     &         CaseString(1:lnblnk(CaseString))
      END DO
      WRITE(AIM2_FUnit,'(4I3,F7.2,21x,A)')
     &    AIM2_terrain_weather,AIM2_terrain_building,
     &    AIM2_wall_shielding,AIM2_flue_shielding,AIM2_anemom_height,
     &    OutString
     
      
      DO i=1,2
        IF (i.EQ.1) THEN
          TestCase = AIM2_terrain_weather
          OutString = '# Wall shielding:'
        ELSE 
          TestCase = AIM2_terrain_building
          TempString = OutString
          WRITE(OutString,'(2A)'),TempString(1:lnblnk(TempString)),
     &         ';   flue shielding:'
        END IF
        SELECT CASE (TestCase)
          CASE (1)
            CaseString='None'
          CASE (2)
            CaseString='Light'
          CASE (3)
            CaseString='Heavy'
          CASE (4)
            CaseString='Very heavy'
          CASE (5)
            CaseString='Complete'
          CASE DEFAULT
            CaseString=''
        END SELECT
        TempString = OutString
        WRITE(OutString,'(2A)'),TempString(1:lnblnk(TempString)),
     &         CaseString(1:lnblnk(CaseString))
      END DO
      WRITE(AIM2_FUnit,'(40x,2A,F6.2,A)')OutString(1:lnblnk(OutString)),
     &    ';   anemometer height=',AIM2_anemom_height,' m'

C Write building eaves height.
      WRITE(AIM2_FUnit,'(A)')
     &  '#---Height of building eaves (m)-----------------------------'
      WRITE(AIM2_FUnit,'(F7.2)') AIM2_eaves_height

C Write diameters of furnace, fireplace, and DHW flues.
      WRITE(AIM2_FUnit,'(A)')
     &  '#---Flue diameters (mm)--------------------------------------'
      TempString = '# Furnace, fire#1, fire#2,,dhw#1,dhw#2'
      WRITE(AIM2_FUnit,'(5F7.2,5x,A)')AIM2_furnace_flue,
     &  AIM2_fire_flue1,AIM2_fire_flue2,AIM2_DHW_flue1,AIM2_DHW_flue2,
     &  TempString

C Write the zone coupling data
      WRITE(AIM2_FUnit,'(A)')
     &  '#---Zone indices---------------------------------------------'
C Write the number of the reference zone. 
      OutString = '# Zone whose temperature is used to calculate '
      TempString = OutString
      WRITE(OutString,'(2A)'),TempString(1:lnblnk(TempString)),
     &      ' the density of indoor air'
      WRITE(AIM2_FUnit,'(I3,37x,A)')AIM2_ref_zone, OutString
      
C Write the number of zones in model that will receive infiltration, followed by the
C indices of the zones that receive infiltration.
      WRITE(OutString,'(I3)')AIM2_num_zones_infil
      DO zoneindex=1,AIM2_num_zones_infil
        TempString = OutString
        WRITE(OutString,'(A, I3)'),TempString(1:lnblnk(TempString)),
     &    AIM2_zone_infil(zoneindex)
      END DO
C Pad the string out to line up formatting        
      padlength = 40-LEN_TRIM(OutString)
      PadString = '                                               '
      TempString = OutString
      WRITE(OutString,'(A,A,A)'),TempString(1:lnblnk(TempString)),
     &      PadString(1:padlength), 
     &      '# Total number of zones receiving infil; '
      TempString = OutString
      WRITE(OutString,'(2A)'),TempString(1:lnblnk(TempString)),
     &      ' indices of zones receiving infil'
      WRITE(AIM2_FUnit,'(A)')OutString
C Write zone number of basement,crawlspace and attic
      OutString = '# Index of basement, crawlspace & attic zones'
      TempString = OutString
      WRITE(OutString,'(2A)')TempString(1:lnblnk(TempString)),
     &      ' (=0 if none)'
      WRITE(AIM2_FUnit,'(3I3,31x,A)') AIM2_basement_zone,
     &      AIM2_CrawlSpace_zone,AIM2_attic_zone,OutString

! C Write Blind control and Window control and Zone which temperature  controls the windows.
!       WRITE(AIM2_FUnit,'(A)')
!      &  '#---Blind and window control---------------------------------'
!       IF (bWindowControlFlag) THEN
!         WRITE(AIM2_FUnit,'(A,I4,3F10.2)')' 1  ',iWindowControlZone,
!      &   fWindowSetpoint,fWindowLowSetpoint,fDeltaTInttoExt
!       ELSE 
!         WRITE(AIM2_FUnit,'(A)')' 0  '
!       ENDIF

C Close AIM-2 input data file.
      CALL ERPFREE(AIM2_FUnit,ISTAT)
      RETURN
      END SUBROUTINE SAVE_AIM2
      END MODULE AIM2_Inputs
