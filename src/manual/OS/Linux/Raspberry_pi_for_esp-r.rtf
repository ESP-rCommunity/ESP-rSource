{\rtf1\ansi\ansicpg1252\cocoartf1187\cocoasubrtf390
\cocoascreenfonts1{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}}
\paperw11900\paperh16840\margl1440\margr1440\vieww13780\viewh11700\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\f0\fs24 \cf0 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\qc

\b \cf0 Setting up Raspberry Pi for use with ESP-r12\
19 August 2013\
ESRU, Glasgow, Scotland
\b0 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural
\cf0 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\b\fs22 \cf0 Introduction
\b0\fs20 \
\
ESP-r works on a range of computers from desktops to enterprise servers.  This document discusses how to implement an ESP-r distribution on a computer at the other extreme - the Raspberry Pi.  If you are working with other ARM based single board computers such as the BeagleBoard Balck, the process of setting up the computer is slightly different (see BeagleBoneBlack_for_esp.r.rtf). This match-box sized single board computer (with draws ~2-4W) none-the-less supports a range of simulation tasks one might expect in training workshops where models of limited complexity and focused assessments are the norm. Whereas a typical laptop or desktop machine might run a one month assessment on a small model in ~2 seconds the Pi takes ~20 seconds. Given that a dozen of these take up about the same amount of space as a laptop the possibilities are considerable.\
\
These notes apply to the 512MB Pi with the standard Raspbian operating system image with a few tweaks to support compilation and use of ESP-r.  Raspbian is derived from Debian and thus those familiar with its package managers and compiler tool-chain can use their existing skills sets. The setup of a Pi follows the general pattern of described in the Ubuntu for ESP-r document on the ESRU web site. This document focuses on Pi-specific issues. Scanning both documents before you begin is a 
\b really good idea
\b0 !\
\
Once ESP-r has been setup on on Pi it is possible to use utilities to convert the contents of the SD card into an image file that can be 'burned' onto other SD cards and deployed on other Raspberry.\
\

\b\fs22 Before you start
\b0\fs20 \
\
Review the Raspberry Pi WIKI <en.wikipedia.org/wiki/Raspberry_Pi> as well as <www.raspberrypi.org> and <www.element14.com> web sites for further guidance.   Follow the recommendations for downloading the OS image and merging it onto the SD card (this requires access to another Linux or Mac or Windows computer) The same tools can also be used to transfer the updated OS and ESP-r environment to another SD card for backup or distribution (note: not all 8GB SD cards are the same size so reading and writing of images requires care and attention).  \
\
The standard preloaded 4GB SD card you can by from Raspberry Pi vendors is a bit small. An 8GB SD card is recommended. A class 10 card is much better for simulation and development work than the less expensive class 4 cards.  The steps below will ensure that all the space in a larger drive can be used.\
\
You can run a Pi headless (via a SSH session from another computer) or by connecting a monitor and/or TV, mouse and keyboard.  Your choice.  Similarly, you can run ESP-r in either graphic or pure-text mode on a Pi.  The OS supports the same powerful scripting environment that you can use on compute servers.\
\

\b\fs22 Initial setup
\b0\fs20 \
\
The first time you power up a Pi run the configuration tool (you can also do this later to tweak the Pi). The configuration tool does not need graphics to run so you can do this prior to starting a window manager. Here are the options:\
\pard\tx220\tx720\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\li720\fi-720\pardirnatural
\ls1\ilvl0\cf0 {\listtext	\'95	}Use the expand-to-fill facility to grow the initial OS to fill the SD card.  \
{\listtext	\'95	}Use the keyboard setup utility it makes subsequent tasks easier even if you later run the Pi headless.  \
{\listtext	\'95	}Set a password and remember it.  Later you can add additional users e.g. a training account. \
{\listtext	\'95	}Set the local - choose something like engb which will use a '.' for a decimal place.  \
{\listtext	\'95	}Set the memory split between the CPU and GPU.  You want to maximise CPU memory so choose 32 or 64MB for the GPU.\
{\listtext	\'95	}Set the over clock to High (700-950MHz). Turbo works but has some risk.\
{\listtext	\'95	}Leave the boot option as non-gui so you have maximum flexibility.\
{\listtext	\'95	}Select the raspberry-config update (this will scan the repository and download and install recent software changes).\
{\listtext	\'95	}Set your time-zone.\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural
\cf0 \
When you select <finish> it will undertake the pending tasks and reboot the Pi.  If you want to re-visit the facility give the command:\
  
\b sudo raspi-config
\b0  \
in either text or graphic mode.  \
\
Your next step is to increase the swap space (virtual memory).  The initial setting is a 100MB swop file.  For ESP-r compiling and use you will want between 600MB-1GB.  A discussion of the process can be found at <raspberrypi.stackexchange.com>.  You need to edit the file /etc/dphys-swapfile.  Use sudo nano or your favourite text editor and change the CONF_SWAPSIZE= value in the file.  To record this change give the following commands in a text or graphic command window (see below):\

\b sudo  /etc/init.d/dphys-swapfile stop\
sudo  /etc/init.d/dphys-swapfile start
\b0  \
\

\b\fs22 Command windows
\b0\fs20 \
\
If you stay in the initial text display you can issue commands for applications that do not use graphics (such as the ones listed below).  To start up the window manager give the command\
\
  
\b startx
\b0 \
\
which will start a graphical interface with the potential for an application/widget dock at the bottom and a number of icons on the left.  One of them is marked LXTerminal.  Click on that icon and a graphic command window will open (you could start more than one if you wanted to).  In the LXTerminal you can type in commands to run applications which are either text based or graphical in nature.\
\

\b\fs22 Package mangers
\b0\fs20 \
\
The base OS has much of what you need. Like Debian installing new software packages is based on apt-get (a command line tool).  For example, to install the helper tool xfig the syntax would be:\
\
  
\b sudo apt-get install name-of-package
\b0 \
\
which will temporarily give you administrative privileges and locate name-of-package and also list and acquire its dependencies.  Apt-get has other commands to remove packages, upgrade packages.  There are also commands for finding available packages via:\
\
  
\b apt-cache search
\b0  
\b "text-to-look-for"
\b0 \
\
and to find out if a package has already been installed:\
\
  d
\b pkg -l | grep -i 'package-name'
\b0 \
\
Note: after running the update facility in raspi-config to get a newer version of raspi-config there may be other\
package updates found but not acted upon.  To enable the other packages issue the command:\
\
  
\b sudo apt-get upgrade
\b0 \
\
in either text or graphic mode.\
\
\

\b\fs22 Software needed to build ESP-r
\b0\fs20 \
\
To compile ESP-r you are going to need to install a number of tools and libraries.  These are similar to those included in a Ubuntu machine setup. In the list below are packages which you will need, they may already be included, in which case nothing happens. The list also includes helper applications that ESP-r expects to find. Install requests can be one at a time or you can also combine commands, for example:\
\
  
\b sudo apt-get install build-essential console-tools-dev expect-dev
\b0 \
  \
Development:  build-essential, console-tools-dev, expect-dev, g++, gcc, gfortran, gdb,gettext, libtool, linux-headers, subversion, libxml2, libxml2-dev, libxml2-utils libxslt1-dev libxslt1-dbg\
\
The orating system header files required for ESP-r can be found via:\
\
  
\b sudo apt-cache search linux-headers
\b0 \
\
Graphics: imagemagick (screen grab & display)  xfonts-base gsfonts-x11xfonts-100dpi xfs xfig transfig\
Libraries:  libx11-dev,\
Networking:  openssh-server, ssh\
Shells:  csh\
Word processing:  enscript, psutils nedit\
\
For GTK development selecting the libgtk2.0-dev package will identify most of the dependencies you are likely to need. To assist with debugging also ask for the -dbg versions of the libraries such as:\
libfontconfig1-dbg, libcairo2-dbg, libpixman-1-0-dbg, libgtk2.0-0-dbg\
\
To find out the fonts installed on your computer you can use the command:\
  
\b fc-list
\b0 \
\
To force a refresh of the font cache use the following command:\
   
\b sudo fc-cache -f -v
\b0 \
\
To find out about the compilers (gcc g++ and gfortran) use:\

\b   which gcc\
  gcc --version\
  which gfortran\
  gfortran --version\

\b0 \
\

\b\fs22 Setting up your account and folders
\b0\fs20 \
\
The initial 'pi' account can be used for all tasks.  You may prefer to have a separate 'training' account for casual users.\
\
To simplify other tasks, create a 'bin' folder within each user HOME folder (e.g. /home/fred/bin) at a later stage there are some ESP-r related scripts to copy into this bin folder.\
\
 
\b  cd\
  mkdir bin\
\

\b0 Create a folder for your simulation models (ones that you create and/or for exemplar models that you wish to explore.\
\

\b   cd\
  mkdir Models\
\

\b0 Now is a good time to reboot the Raspberry Pi to ensure that fonts and environment variables are registered. How might you do this? The command is:\
\
  
\b sudo reboot\
\

\b0 If you want to shut down the Raspberry Pi use the following command (before you disconnect the power):\
\
  
\b sudo halt\
\

\b0 \
ESP-r uses a custom Install script instead of  the usual automake based system used in many Linux packages.  Because the Pi uses an ARM processor you will have to use a bespoke version of the ESP-r Install script. (soon to be added to the developent_branch).
\b \

\b0 \
The ESP-r distribution is traditionally placed in either /usr/esru or in /opt/esru. The ESP-r Install script supports this via command line directives.  Create a folder for the standard distribution via: \
\
\pard\tx560\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\b \cf0   sudo mkdir /opt/esru\
  sudo chown pi /opt/esru\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\b0 \cf0 Create a folder structure for Source code in your home folder, checkout the current development_branch from the svn server and use the Install script to build the distribution in the folder /opt/esru with the GCC version 4 compilers:\
\
\pard\tx560\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\b \cf0   cd\
  mkdir Src\
  mkdir Src/cvsdude\
  cd Src/cvsdude\
  svn checkout https://espr.svn.cvsdude.com/esp-r/branches/development_branch\
\
\pard\tx560\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\b0 \cf0 To ensure that ESP-r can compile and run on machines with constrained memory you need to copy a few header files in the src/include folder.  THIS IS IMPORTANT.  Here is what to do:\
\
\pard\tx560\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\b \cf0   cd development_branch/src/include\
  cp building_small.h building.h\
  cp cfd_small.h cfd.h\
  cp control_small.h control.h\
  cp net_flow_small.h net_flow.h\
  cd ../..\
\pard\tx560\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\b0 \cf0 \
The compile process is as follows:\
\pard\tx560\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\b \cf0 \
  cd development_branch/src\
  ./Install -d /opt/esru --gcc4 --reuse_ish_calcs --debug
\b0 \
\
Say yes to XML (if you have that library), say yes to databases and yes to example models and say yes to debug.  You have the option to compile for three different ESP-r interfaces.  The pure-text option is suitable for automated production work as all tasks are carried out via keyboard commands. The X11 interface is the [traditional] interface form.  The GTK interface uses a different graphic library and looks like the Native Windows version of ESP-r.  \
\
You can compile more than one interface, just be sure that the executables are located in separate folders (e.g. /opt/esru/esp-r/bin_text  /opt/esru/esp-r/binX11 /opt/esru/esp-r/binGTK. Of course, once you have installed the databases and exemplar models there is no need to repeat this for the other interface types. \
\
One way to do this is to use the standard Install command and then use the operating system to copy the executables e.g.:\
   <run the compile script for pure-text>\

\b   cd /opt/esru/esp-r\
  mkdir bin_text\
  cd bin\
  cp * ../bin_text\
\pard\tx560\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\b0 \cf0   <go back to the development_branch/src>\
\pard\tx560\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\b \cf0   make clean\
\pard\tx560\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\b0 \cf0   <run the install script for X11>\
\pard\tx560\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\b \cf0   cd /opt/esru/esp-r\
  mkdir binX11\
  cd bin\
  cp * ../binX11\
\pard\tx560\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\b0 \cf0 \
You can switch between these different ESP-r interfaces by going into the home/pi/bin folder and running the link_to script with the alternative path-to-executable e.g.:\
\pard\tx560\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\b \cf0   cd\
  cd bin\
  link_to /opt/esru/esp-r/binX11\
\pard\tx560\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\b0 \cf0 \
After you have installed the databases and exemplar models there is no need to do this for subsequent Install sessions (unless the databases or exemplar models have been updated).\
\
The compile process on a Pi is 
\i\b much slower 
\i0\b0 than on desktop machines.  Expect a couple of hours for the complete Install cycle.\
\pard\tx560\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\b \cf0 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\b0 \cf0 The PATH environment variable is usually defined in the ./profile file in your home folder. You might find a line which includes   
\b PATH="$HOME/bin:$PATH"
\b0 \
\
This instruction includes the /home/username/bin folder in the standard PATH environment variable. You could use a text editor to alter this line:  
\b PATH="$HOME/bin:/opt/esru/esp-r/bin:$PATH"
\b0 \
\
Or, copy the link_to and link_to_bash scripts in the src/bin folder into you $HOME/bin folder via the following commands:\
\

\b   cd \
  mkdir bin\
  cd Src/cvsdude/development_branch/src/bin\
  cp link_to ~/bin\
  cp link_to_bash ~/bin\
  cd\
  cd bin\
  ./link_to /opt/esru/esp-r/bin\
  cd\
  source .profile\
  which prj\

\b0 \
If the 'which prj' commands returns a location the ESP-r executables and libraries are now known.  \
\

\b\fs22 Using ESP-r
\b0\fs20 \
\
Remember when you log into your account on the Raspberry Pi that you need to issue the following command to re-fresh the system knowledge of where ESP-r lives:\
\

\b   cd\
  source .profile\

\b0 \
ESP-r has a large number of exemplar models.  These are located in the ESP-r distribution and the ESP-r Project Manager (prj) will access them and ask you where you want to copy them so that you can explore them and evolve them without messing up the originals.  One strategy is to create a Models subfolder of your home e.g. /home/pi/Models.  When prj asks you where you want to place a model change the suggested /home/pi to /home/pi/Models.  If you want to revisit and open it again you can use a command sequence in the following form (lets assume that the model folder is named small_house and the model cfg file is named small_house.cfg)\
\

\b   cd\
  cd Models/small_house/cfg\
  prj -file small_house.cfg\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural

\b0 \cf0 \
The ESRU download web pages have documents related to managing source code, working with the subversion source code control environment as well as the ESP-r Cookbook which discusses the design of simulation models and working practices with ESP-r.  You may also find some useful materials in the folder src/manual/OS.\
\

\b\fs22 Shutting down a Raspberry Pi
\b0\fs20 \
\
There is no off switch on a Pi.  To properly stop it issue the following command:\
\
  
\b sudo shutdown -h now
\b0 \
\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\fs24 \cf0 \
\
\
}