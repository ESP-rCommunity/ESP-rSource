{\rtf1\ansi\ansicpg1252\cocoartf1187\cocoasubrtf390
\cocoascreenfonts1{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fmodern\fcharset0 Courier;\f2\fmodern\fcharset0 Courier-Bold;
}
{\colortbl;\red255\green255\blue255;\red247\green247\blue247;}
\paperw11900\paperh16840\margl1440\margr1440\vieww13780\viewh11700\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\f0\fs24 \cf0 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\qc

\b \cf0 Setting up a BeagleBoard Black for use with ESP-r12\
19 August 2013\
ESRU, Glasgow, Scotland
\b0 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural
\cf0 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\b\fs22 \cf0 Introduction
\b0\fs20 \
\
ESP-r works on a range of computers from desktops to enterprise servers.  This document discusses how to implement an ESP-r distribution on a computer at the other extreme - the BeagleBone Black (BBB).  The process is similar to setting up a Raspberry Pi and assumes that you are using the Debian Wheezy as an operating system.  \
\
The BBB is 90mm x 55mmis single board computer uses a newer ARM processor than the Pi, but has the same 512MB memory constraint of the Pi.  It supports a range of simulation tasks one might expect in training workshops where models of limited complexity and focused assessments are the norm. Whereas a typical laptop or desktop machine might run a one month assessment on a small model in ~2 seconds the BBB takes ~?? seconds. Given that a dozen of these take up about the same amount of space as a laptop the possibilities are considerable.\
\
These notes assume the Debian Wheezy operating system image (see instructions XX) on a microSD card (the native Angstrom Linux on the BBB eMMC chip has not been tested).  As with the Pi,  a few tweaks to support compilation and use of ESP-r.  Other Those familiar with its package managers and compiler tool-chain can use their existing skills sets. The setup follows the general pattern of described in the Ubuntu for ESP-r document on the ESRU web site. This document focuses on BBB-specific issues. Scanning both documents before you begin is a 
\b really good idea
\b0 !\
\
Once ESP-r has been setup on on BBB it is possible to use utilities to convert the contents of the microSD card into an image file that can be 'burned' onto other SD cards and deployed on other BBB.\
\

\b\fs22 Before you start
\b0\fs20 \
\
Use the Web to review the BBB <http://circuitco.com/support>, <http://circuitco.com/support/index.php?title=Debian_On_BeagleBone_Black>, <http://elinux.org/BeagleBoardUbuntu>.   \
\
Follow the recommendations for downloading the Debian Wheezy 7 OS image and merging it onto the microSD card (this requires access to another Linux or Mac or Windows computer <http://sourceforge.net/projects/win32diskimager/files/latest/download>) The same tools can also be used to transfer the updated OS and ESP-r environment to another SD card for backup or distribution (note: not all 8GB SD cards are the same size so reading and writing of images requires care and attention).  \
\
An 8GB microSD card is recommended. A class 10 card is much better for simulation and development work than the less expensive class 4 cards.  The steps (described below) will ensure that all the space in a larger drive can be used.\
\
You can run a BBB headless (via a SSH session from another computer) or by connecting a monitor and/or TV, mouse and keyboard.  Your choice.  Similarly, you can run ESP-r in either graphic or pure-text mode.  The OS supports the same powerful scripting environment that you can use on compute servers.\
\

\b\fs22 Initial setup
\b0\fs20 \
\
Booting a BBB via the microSD card requires that you hold down a small boot switch as power is applied to the BBB. The boot switch is above the microSD card slot.  The documentation says that a BBB runs better powered from the 5VDC rather than via the USB Client port.  Hold down the switch for ~15 seconds and you should see the blue user LEDs blinking.  If you do not hold down the boot switch the internal Angstrom Linux will start.  To stop a BBB issue the command:\
\
  
\b sudo halt
\b0 \
\
Once the blue LED have stopped blinking you can remove power.  A restart (assuming the power is still connected) press the power button AND the boot button otherwise hold down the book button as you apply power.\
\
\

\b Expanding file system to fill microSD card
\b0 \
\
Debian images are sized to fit on a 2GB card, and retain this size when copied onto the microSD card. To expand the file system\
follow the instructions at <http://circuitco.com/support/index.php?title=Expanding_File_System_Partition_On_A_microSD>. Since microSD cards differ slightly in size, to ensure that you can backup your card and restore it to another card consider setting the expanded size a bit smaller than the maximum of the card.\
\
\

\b Creating swop space
\b0 \
\
The limited memory on the BBB requires the creation of swap space (600-1000MB of virtual memory) so that ESP-r can be compiled and run. A discussion of the process can be found at the BBB pages of eLinux.org <http://elinux.org/BeagleBoardUbuntu#Swapfile> and differ from that used on the Raspberry Pi.  Issue the following commands to create a 1GB swop:\
\pard\pardeftab720

\f1\fs26 \cf0 \cb2 \
 
\f0\b\fs20 sudo mkdir -p /var/cache/swap/   \
  sudo dd if=/dev/zero of=/var/cache/swap/swapfile bs=1M count=1024\
  sudo chmod 0600 /var/cache/swap/swapfile \
  sudo mkswap /var/cache/swap/swapfile \
  sudo swapon /var/cache/swap/swapfile\

\f2 \

\f0\b0 Then use a text editor to add the following to the /etc/fstab file so that swap is used every time you boot up.\
\

\f1\fs26  
\f0\b\fs20 /var/cache/swap/swapfile    none    swap    sw    0   0\

\f1\b0\fs26 \

\f0\b\fs20 \cb1 Installing a graphical environment
\b0 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural
\cf0 \
The Debian image that can be downloaded for a BBB is a minimal system that supports text interaction. Follow the instructions at <http://circuitco.com/support/index.php?title=Installing_LXDE> to install the LXDE desktop. After rebooting you will be presented with graphical login options.\
\

\b\fs22 Command windows
\b0\fs20 \
\
To accomplish many tasks you will need a command window.  In LXDE this is LXTerminal. It may be an icon on the desktop or it might be found in the LXDE menu under accessories.  Other desktops will offer different tools. If you are logging in remotely you have the choice of working with a text-only command window or using graphics (typically via forwarding X11 graphics via ssh). If you stay in the initial text display you can issue commands for applications that do not use graphics.  \
\

\b\fs22 Package mangers
\b0\fs20 \
\
The base OS has much of what you need. Like Debian installing new software packages is based on apt-get (a command line tool).  For example, to install the helper tool xfig the syntax would be:\
\
  
\b sudo apt-get install name-of-package
\b0 \
\
which will temporarily give you administrative privileges and locate name-of-package and also list and acquire its dependencies.  Apt-get has other commands to remove packages, upgrade packages.  There are also commands for finding available packages via:\
\
  
\b apt-cache search
\b0  
\b "text-to-look-for"
\b0 \
\
and to find out if a package has already been installed:\
\
  d
\b pkg -l | grep -i 'package-name'
\b0 \
\
Note: as part of the initial setup and then every few weeks force a re-discovery of software updates via:\
\
  
\b sudo apt-get upgrade
\b0 \
\
in either text or graphic mode.\
\
\

\b\fs22 Software needed to build ESP-r
\b0\fs20 \
\
To compile ESP-r you are going to need to install a number of tools and libraries.  These are similar to those included in a Ubuntu machine setup. In the list below are packages which you will need, they may already be included, in which case nothing happens. The list also includes helper applications that ESP-r expects to find. Install requests can be one at a time or you can also combine commands, for example:\
\
  
\b sudo apt-get install build-essential console-tools-dev expect-dev
\b0 \
  \
Development:  build-essential, console-tools-dev, expect-dev, g++, gcc, gfortran, gdb,gettext, libtool, linux-headers, subversion, libxml2, libxml2-dev, libxml2-utils libxslt1-dev libxslt1-dbg\
\
The orating system header files required for ESP-r can be found via:\
\
  
\b sudo apt-cache search linux-headers
\b0 \
\
Graphics: imagemagick (screen grab & display)  xfonts-base gsfonts-x11xfonts-100dpi xfs xfig transfig\
Libraries:  libx11-dev,\
Networking:  openssh-server, ssh\
Shells:  csh\
Word processing:  enscript, psutils nedit\
\
For GTK development selecting the libgtk2.0-dev package will identify most of the dependencies you are likely to need. To assist with debugging also ask for the -dbg versions of the libraries such as:\
libfontconfig1-dbg, libcairo2-dbg, libpixman-1-0-dbg, libgtk2.0-0-dbg\
\
To find out the fonts installed on your computer you can use the command:\
  
\b fc-list
\b0 \
\
To force a refresh of the font cache use the following command:\
   
\b sudo fc-cache -f -v
\b0 \
\
To find out about the compilers (gcc g++ and gfortran) use:\

\b   which gcc\
  gcc --version\
  which gfortran\
  gfortran --version\

\b0 \
\

\b\fs22 Setting up your account and folders
\b0\fs20 \
\
The initial 'debian' account can be used for all tasks.  You may prefer to have a separate 'training' account for casual users.\
\
To simplify other tasks, create a 'bin' folder within each user HOME folder (e.g. /home/fred/bin) at a later stage there are some ESP-r related scripts to copy into this bin folder.\
\
 
\b  cd\
  mkdir bin\
\

\b0 Create a folder for your simulation models (ones that you create and/or for exemplar models that you wish to explore.\
\

\b   cd\
  mkdir Models\
\

\b0 Now is a good time to reboot to ensure that fonts and environment variables are registered. How might you do this? The command is:\
\
  
\b sudo reboot\
\

\b0 If you want to shut down use the following command (before you disconnect the power):\
\
  
\b sudo halt\
\

\b0 \
ESP-r uses a custom Install script instead of  the usual automake based system used in many Linux packages.  Because the BBB uses an ARM processor the ESP-r Install script and Makefile will need to recognise armv7l as the processor. (soon to be added to the development_branch).
\b \

\b0 \
The ESP-r distribution is traditionally placed in either /usr/esru or in /opt/esru. The ESP-r Install script supports this via command line directives.  Create a folder for the standard distribution via: \
\
\pard\tx560\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\b \cf0   sudo mkdir /opt/esru\
  sudo chown debian /opt/esru\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\b0 \cf0 Create a folder structure for Source code in your home folder, checkout the current development_branch from the svn server and use the Install script to build the distribution in the folder /opt/esru with the GCC version 4 compilers:\
\
\pard\tx560\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\b \cf0   cd\
  mkdir Src\
  mkdir Src/cvsdude\
  cd Src/cvsdude\
  svn checkout https://espr.svn.cvsdude.com/esp-r/branches/development_branch\
\
\pard\tx560\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\b0 \cf0 To ensure that ESP-r can compile and run on machines with constrained memory you need to copy a few header files in the src/include folder. THIS IS IMPORTANT.  Here is what to do:\
\
\pard\tx560\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\b \cf0   cd development_branch/src/include\
  cp building_small.h building.h\
  cp cfd_small.h cfd.h\
  cp control_small.h control.h\
  cp net_flow_small.h net_flow.h\
  cd ../..\
\pard\tx560\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\b0 \cf0 \
The compile process is as follows:\
\pard\tx560\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\b \cf0 \
  cd development_branch/src\
  ./Install -d /opt/esru --gcc4 --reuse_ish_calcs --debug
\b0 \
\
Say yes to XML (if you have that library), say yes to databases and yes to example models and say yes to debug.  You have the option to compile for three different ESP-r interfaces.  The pure-text option is suitable for automated production work as all tasks are carried out via keyboard commands. The X11 interface is the [traditional] interface form.  The GTK interface uses a different graphic library and looks like the Native Windows version of ESP-r.  \
\
You can compile more than one interface, just be sure that the executables are located in separate folders (e.g. /opt/esru/esp-r/bin_text  /opt/esru/esp-r/binX11 /opt/esru/esp-r/binGTK. Of course, once you have installed the databases and exemplar models there is no need to repeat this for the other interface types. \
\
One way to do this is to use the standard Install command and then use the operating system to copy the executables e.g.:\
   <run the compile script for pure-text>\

\b   cd /opt/esru/esp-r\
  mkdir bin_text\
  cd bin\
  cp * ../bin_text\
\pard\tx560\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\b0 \cf0   <go back to the development_branch/src>\
\pard\tx560\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\b \cf0   make clean\
\pard\tx560\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\b0 \cf0   <run the install script for X11>\
\pard\tx560\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\b \cf0   cd /opt/esru/esp-r\
  mkdir binX11\
  cd bin\
  cp * ../binX11\
\pard\tx560\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\b0 \cf0 \
You can switch between these different ESP-r interfaces by going into the home/debian/bin folder and running the link_to script with the alternative path-to-executable e.g.:\
\pard\tx560\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\b \cf0   cd\
  cd bin\
  link_to /opt/esru/esp-r/binX11\
\pard\tx560\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\b0 \cf0 \
After you have installed the databases and exemplar models there is no need to do this for subsequent Install sessions (unless the databases or exemplar models have been updated).\
\
The compile process on a BBB is 
\i\b much slower 
\i0\b0 than on desktop machines.  Expect a couple of hours for the complete Install cycle.\
\pard\tx560\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\b \cf0 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\b0 \cf0 The PATH environment variable is usually defined in the ./profile file in your home folder. You might find a line which includes   
\b PATH="$HOME/bin:$PATH"
\b0 \
\
This instruction includes the /home/username/bin folder in the standard PATH environment variable. You could use a text editor to alter this line:  
\b PATH="$HOME/bin:/opt/esru/esp-r/bin:$PATH"
\b0 \
\
Or, copy the link_to and link_to_bash scripts in the src/bin folder into you $HOME/bin folder via the following commands:\
\

\b   cd \
  mkdir bin\
  cd Src/cvsdude/development_branch/src/bin\
  cp link_to ~/bin\
  cp link_to_bash ~/bin\
  cd\
  cd bin\
  ./link_to /opt/esru/esp-r/bin\
  cd\
  source .profile\
  which prj\

\b0 \
If the 'which prj' commands returns a location the ESP-r executables and libraries are now known.  \
\

\b\fs22 Using ESP-r
\b0\fs20 \
\
Remember when you log into your account on that you need to issue the following command to re-fresh the system knowledge of where ESP-r lives:\
\

\b   cd\
  source .profile\

\b0 \
ESP-r has a large number of exemplar models.  These are located in the ESP-r distribution and the ESP-r Project Manager (prj) will access them and ask you where you want to copy them so that you can explore them and evolve them without messing up the originals.  One strategy is to create a Models subfolder of your home e.g. /home/debian/Models.  When prj asks you where you want to place a model change the suggested /home/debian to /home/debian/Models.  If you want to revisit and open it again you can use a command sequence in the following form (lets assume that the model folder is named small_house and the model cfg file is named small_house.cfg)\
\

\b   cd\
  cd Models/small_house/cfg\
  prj -file small_house.cfg\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural

\b0 \cf0 \
The ESRU download web pages have documents related to managing source code, working with the subversion source code control environment as well as the ESP-r Cookbook which discusses the design of simulation models and working practices with ESP-r.  You may also find some useful materials in the folder src/manual/OS.\
\

\b\fs22 Shutting down
\b0\fs20 \
\
To properly stop the BBB issue the following command:\
\
  
\b sudo shutdown -h now\
\

\b0 or
\b \
\
  sudo halt
\b0 \
\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\fs24 \cf0 \
\
\
}