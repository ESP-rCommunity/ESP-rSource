#!/bin/bash
#
# For use on sun/linux/cygwin/mingw/OS X/Windows platforms.
#
# This script handles installation of ESP-r executables,
# databases, training and reference materials.
#
# This script is a work in progress, and is undergoing
# continual improvement.

#=====================================================================
clim_convert()  # converts climate dbs from iwec.a to binary formats
#=====================================================================
# Arg_1 = target file
# Arg_2 = source file
{


# short=`echo $1 | sed 's/^.*\///g'`
# city=$short
# country=$short
# country=`echo $short | sed 's/_.*$//g;'`
# city=`echo $short | sed 's/_iwec//g;'`
# city=`echo $city | sed 's/.iwec//g;'`
# city=`echo $city | sed 's/_cwec//g;'`
# city=`echo $city | sed 's/.cwec//g;'`
# city=`echo $city | sed 's/^.*_//g;'`

# printf "\r   - Creating binary climate databases [$city ($country)]..."

# sed-less version

TargetName=`echo $2 |  sed 's/\.a$//g'`
printf "\r                                                                            "
printf "\r   - Creating binary climate databases [${TargetName}]..."

rm -f $1
$CLM -mode text -file $1 -act asci2bin silent $2  >/dev/null 2>/dev/null

}


#=====================================================================
pdb_convert()  # converts plant dbs from iwec.a to binary formats
#=====================================================================
{
SourceName=$1
TargetName=$2
TargetFolder=$3
printf "\r                                                                            "
printf "\r   - Creating binary plant databases [${TargetName}]..."

$PDB -mode text -file $TargetName -act asci2bin ${SourceName}
mv $TargetName $TargetFolder

}
#=====================================================================
# Main script
#=====================================================================

echo " "
echo "          ESP-r installation script."
echo " "
echo " Please consult the README file before commencing "
echo " installation.  This script will rebuild the ESP-r"
echo " modules on your system.  You can abort this process"
echo " at any time by pressing <control> c."


# Set default settings.
mode="interactive"         # Interactive/silent installation
                           # (silent mode isn't yet supported)
SRCdir=`pwd`               # Source Directory
DESTdir=/usr/esru          # Target Directory
COSIMdir=" "			   # Harmonizer install directory
xml_support=prompt         # support for XML output
SQLite_support="no"        # support for SQLite output
debugging="no"             # include debugging symbols
EXE=""                     # executable file extension (i.e. .exe on cygwin and Windows)
FFLAGS="-I../include "     # initial fortran compiler flags
CFLAGS="-I../include "     # initial C compiler flags
LD_FLAGS=" "               # inisial link-loader flags
platform="auto-detect"     # default platform
install_dbs="yes"          # Install dbs files
install_training="yes"     #         training files
install_exes="prompt"      #         executables
delete_temp_files="yes"    # Delete temporary files.
preserve_espr_dir="yes"    # save existing ESP-r directory by default
gnu_version="gcc4"         # flag indicating which version of gcc is in use
make_msg_file=".make_msg"  # Dump make messages?
compiler_version="none"    # append string to compilers?
xLibs="X11"                # Default x-library
enable_cosim="no"          # Co-simulation with TRNSYS
extendedDebug="no"         # Enable agressive debugging / warnings /FPE?
use_intel="no"             # Use intel compilers?
skip_ish_calcs="no"        # Skip update of exemplar shading files?
reuse_ish_calcs="no"       # if yes limit re-calculation of exemplar shading files?
clean="yes"                # Clean object files?
unversioned="no"           # Check svn for versioning info?

#-----------------------------------------------------------
# List of targets understood by bps
#-----------------------------------------------------------

# Buildable targets:
programs="aco b2e bps dbm dfs cdb c2e clm e2r ecnv eco grd ish mfs mld mrt pdb prj res stats vew"
# (bld plt, net are not currently built)
# (net, run, stats are not currently built)

# Add leading and trailing spaces for regexp matching
programs=" ${programs} "

# default targets: empty for now
targets=" "

#-----------------------------------------------------------
# Detect architecture. In the case of OSX 10.6 or 10.7 force it to x86_64
# otherwise let uname -m do it.
#-----------------------------------------------------------
architecture=`uname -s`      # computer type e.g. Linux Darwin SunOS
if [ "$architecture" = "Darwin" ]; then
  machine="x86_64"
else
  machine=`uname -m`           # CPU  e.g. i386 x86_64  sun4u
fi

#-----------------------------------------------------------
# Is Stat available? assume stat will be in /bin or /usr/bin,
# since which might also not be available.
#-----------------------------------------------------------

if [ -x /usr/bin/stat ]; then
   stat_avail="yes"
elif [ -x /bin/stat ]; then
   stat_avail="yes"
else
   stat_avail="no"
fi

# Command line options.
help=0
input="no"
if [ $# -ne 0 ]; then
   for i do
      if [ "${input}" = "yes" ]; then
         input="no"
      else
        case "$i" in
        -h | --help)    help=1;                    shift;;
        --debug)        debugging=yes; clean=no;   shift;;
        -d) shift;      DESTdir=$1; input="yes";   shift;;
        --force)        preserve_espr_dir="no";    shift;;
        --no_training | --no-training)
                        install_training="no";     shift;;
        --no_dbs | --no-dbs )
                        install_dbs="no";          shift;;
        --no_exes | --no-exes )
                        install_exes="no";         shift;;
        --extra-debug | --extra_debug )
                        debugging="yes"; clean=no;
                        extendedDebugging="yes";   shift;;
        --silent)       mode="silent";             shift;;
        --xml)          xml_support=yes;           shift;;
        --SQLite)       SQLite_support="yes";      shift;;
        --co-sim) shift; COSIMdir=$1; input="yes";  enable_cosim="yes";  shift;;
        --gcc4)         gnu_version="gcc4";        shift;;
        --intel)        use_intel="yes";           shift;;
        --X11)          xLibs="X11";               shift;;
        --GTK)          xLibs="GTK";               shift;;
        --noX)          xLibs="noX";               shift;;
        --compiler_version |--compiler-version)
                        shift;
                        input="yes";
                        compiler_version=$1;       shift;;
        -v | --verbose) make_msg_file="";          shift;;
        --reuse_ish_calcs) reuse_ish_calcs="yes";    shift;;
        --unversioned)    unversioned="yes";       shift;;
        --quick_rebuild) clean="no";               shift;;
        --skip_ish_calcs | --skip-ish-calcs )
                        skip_ish_calcs="yes";      shift;;
        --quick_rebuild |  --quick-rebuild )
                        clean="no";                shift;;
        --no-svn-query | --no_svn_query)
                        unversioned="yes";       shift;;
        clean)          targets="${targets} clean" shift;;
        *)
              # check if target is "buildable",
              match="no"
              position=`expr match " $programs " ".* ${i} .*"`
              if  [ "${position}" != 0 ]; then
                 targets="${targets} ${i}"
                 shift
              else
                 # Trap unsupported arguments.
                 echo " "
                 echo " Error: argument $i is not supported. "
                 echo " Run ./Install --help for more information."
                 echo " "
                 exit
              fi
           ;;
        esac
      fi
   done
fi

# If Targets is empty, build all programs by default.
if [ "${targets}" = " " ]; then
  targets="${programs}"
else
  # Add a trailing space for regexp search
  targets="${targets} "
fi

if [ "$enable_cosim" == "yes" ]; then
  targets="harmonizer harmonizerdll bpsdll"
fi


#-----------------------------------------------------------
# Header.
#-----------------------------------------------------------
if [ $help -eq 1 ]; then
  echo " "
  echo " USAGE: Install [OPTIONS] [NAME]"
  echo " "
  echo " This installation script can be used to install"
  echo " ESP-r on your system. To install ESP-r using the "
  echo " standard defaults and interactive dialogues, run "
  echo " the script without any arguements, eg:"
  echo " "
  echo "   $ ./Install "
  echo " "
  echo " You can also specify alternate configurations "
  echo " using the script's options. For instance, to "
  echo " install ESP-r in your home directory, use the"
  echo " command:"
  echo " "
  echo "   $ ./Install -d ~/esru"
  echo " "
  echo " For MSWindows environment using the following "
  echo " command ensures databases are also copied"
  echo " "
  echo "   $ ./Install -d c:/Esru "
  echo " "
  echo " It is also possible to build esp-r executables "
  echo " individually, by specifying the name(s) of the "
  echo " desired program(s), eg:"
  echo " "
  echo "   $ ./Install bps "
  echo " "
  echo " or to install a module in a specific location"
  echo " "
  echo "   $ ./Install -d ~/esru bps "
  echo " "
  echo " The installation script also supports silent "
  echo " (non-interactive) usage, using the '--silent' "
  echo " command line argument. Any of the command-line "
  echo " arguments specified below can be used in "
  echo " combination with the '--silent' option."
  echo " "
  echo " ARGUMENTS: "
  echo " "
  echo "    <NAME> to install one or more named modules (e.g."
  echo "           'Install clm' for the module clm)"
  echo " "
  echo "    --compiler-version <STRING>: Append <STRING> to the default"
  echo "        compiler binaries. For instance, to invoke the compiler"
  echo "        binaries gcc-4.3, g++-4.3, and gfortran-4.3, specify "
  echo "        '--compiler_version -4.3'."
  echo " "
  echo "    -d <PATH>,  --destination <PATH>: Install ESP-r in"
  echo "        <PATH>/esp-r directory. The default path is:"
  echo "        ${DESTdir}."
  echo " "
  echo "    --debug: Include debugging symbols in ESP-r binaries:"
  echo "        (the default is no debugging symbols). This option also"
  echo "        preserves the object files, allowing ESP-r to be"
  echo "        quickly rebuilt during development."
  echo " "
  echo "    --extra-debug: Enable extended debugging options. Adds"
  echo "        pedantic range checking, floating-point exception "
  echo "        handling and stack dump capabilities to ESP-r binaries."
  echo "        This option is only supported by the intel and gcc4"
  echo "        compilers."
  echo " "
  echo "    --force: Overwrite a corrupted installation. "
  echo " "
  echo "    --gcc4: Use the GCC4 compilers (gcc, g++ and gFortran)."
  echo "         (this option is enabled by default)."
  echo " "
  echo "    -h, --help:  Display this help message."
  echo " "
  echo "    --intel: Use the intel compiler suite (icc,ifort,icpc)."
  echo " "
  echo "    --no-dbs: Skip installation of database files."
  echo " "
  echo "    --no-exes: Do not copy executable files into the"
  echo "        installation directory."
  echo " "
  echo "    --no-training: Skip installation of training models."
  echo " "
  echo "    --no-svn-query: Do not query svn for versioning"
  echo "        information. If specified, ESP-r binaries will not"
  echo "        report the svn source they are built from. This "
  echo "        option may speed-up the installation procedure when"
  echo "        the svn repository temporarly unavailable."
  echo " "
  echo "    --skip-ish-calcs: Skip recalculation of shading files "
  echo "        associated with training and validation exemplars."
  echo "        This option significantly shortens the time required"
  echo "        to install training and validation files, but shading"
  echo "        files must be updated manually."
  echo " "
  echo "    --reuse_ish_calcs: Converts existing ascii shading files "
  echo "        associated with training and validation exemplars, otherwise"
  echo "        recalculate shading and insolation. This shortens the time"
  echo "        required to install training and validation files."
  echo " "
  echo "    --silent: Invoke the silent (non-interactive) installation"
  echo "        mode. Default options will be selected, unless "
  echo "        alternatives are specified in command-line parameters."
  echo " "
  echo "    --X11, --GTK, --noX:"
  echo "        Build ESP-r using the specified graphics library (that",
  echo "        is: X11, GTK or noX for a console-only application)."
  echo " "
  echo "    --xml: Compile bps with support for direct export of results"
  echo "        in xml and csv formats. Requires the GNU libxml2 and"
  echo "        libstdc++ libraries."
  echo " "
  echo "    --SQLite: Compile bps with support for SQLite export of results"
  echo "        in an SQLite database. Requires the libsqlite3.so library."
  echo "        **EXPERIMENTAL**"
  echo " "
  echo "    --co-sim <PATH>: Compile Harmonizer.exe, Harmonizer.dll and bps.dll"
  echo "        for co-simulation with TRNSYS. Harmonizer.exe and Harmonizer.dll"
  echo "        will be installed in <PATH> directory, and bps.dll will be" 
  echo "        installed in the same directory as the rest of ESP-r."
  echo "        Only works under MinGW."
  echo " "
  echo "    -v, --verbose: Print compilation messages to screen."
  echo " "
  echo " Notes:"
  echo " "
  echo " 1. The latest ESP-r release (11.11) no longer compiles with GCC3 / g77"
  echo "    which are now regarded as obsolete. Use GCC4 / gFortran compilers"
  echo "    instead. The current reference version is GCC 4.3.2"
  echo " "
  echo " 2. There are two versions of ESP-r - the standard full distribution"
  echo "    based on the X11 graphic libraries and a beta version which uses the"
  echo "    GTK graphic libraries (but which lacks a few facilities)."
  echo " "
  exit
fi


# check that xml support is available
if [ "$xml_support" = "yes" ] || [ "$xml_support" = "prompt" ]; then
   # check for libxml2 headers on system
   if [ ! -d /usr/include/libxml2 ] && [ ! -d /usr/local/include/libxml2 ]; then
      # Libraries not found. Disable XML support
      xml_support="no"
      xml_libs_found="no"
      # If runnning silently, warn user.
      if [ "$mode" = "silent" ]; then
         echo " "
         echo " Warning: Library libxml2 could not be found"
         echo " in /usr/include or /usr/local/include "
         echo " "
         echo " XML support disabled."
      fi
   else
    # Add XML include files to include paths
    xml_libs_found="yes"
    LIBXML2_INCLUDE="-I/usr/include -I/usr/include/libxml2 -I/usr/local/include/libxml2 -I/usr/include/libxslt -I/local/include/libxslt"
    echo " "
    echo " XML output support enabled."
    # xml support may optionally include support for xslt & exslt. Check
    # that libraries are available
    #
    # This code has only been tested with GNU ld.
    #
    ld_output=`ld -lxslt`
    case $ld_output in
      "") xsl_libs_available="yes";;
      *)  xsl_libs_available="no";;
    esac

   fi
fi

# check that SQLite support is available
if [ "$SQLite_support" = "yes" ]; then
   # check for libsqlite3.so library on system
   ld_output=`ld -lsqlite3`
   case $ld_output in 
     "" ) SQLite_libs_found="yes";
          if [ "$xml_support" = "no" ]; then
             # XML not installed, Disable SQLite support
             SQLite_support="no"
             # If running silently, warn user.
             if [ "$mode" = "silent" ]; then
                echo " "
                echo " Warning: SQLite requires the XML option"
                echo " to be enabled"
                echo " "
                echo " SQLite support disabled."
             fi
          else
            LIBSQLITE3_INCLUDE="-I/usr/lib -lsqlite3"
          fi
          ;;
     *  ) SQLite_libs_found="no"; 
          SQLite_support="no"; 
          if [ "$mode" = "silent" ]; then
             echo " ";
             echo " Warning: Library libsqlite3 could not be found";
             echo " in /usr/lib ";
             echo " ";
             echo " SQLite support disabled.";
          fi
          ;;
   esac
fi

#--------------------------------------------------------------------
# Error trap command-line options
#--------------------------------------------------------------------

#check that platform can be successfully detected.
if [ "$platform" = "auto-detect" ]; then
   # auto-dectectable architectures - add more as additional platforms
   # become available.
   if [ "$architecture" != "Linux" ] &&
      [ "$architecture" != "CYGWIN_NT-5.1" ] &&
      [ "$architecture" != "CYGWIN_NT-5.0" ] &&
      [ "$architecture" != "CYGWIN_NT-5.2" ] &&
      [ "$architecture" != "CYGWIN_NT-6.0" ] &&
      [ "$architecture" != "CYGWIN_NT-6.1" ] &&
      [ "$architecture" != "CYGWIN_NT-6.1-WOW64" ] &&
      [ "$architecture" != "MINGW32_NT-5.1" ] &&
      [ "$architecture" != "MINGW32_NT-5.0" ] &&
      [ "$architecture" != "MINGW32_NT-5.2" ] &&
      [ "$architecture" != "MINGW32_NT-6.1" ] &&
      [ "$architecture" != "Darwin" ] &&
      [ "$architecture" != "SunOS" ]; then
      platform="prompt";
      # Auto-detection of platform is not supported
      # If in silent mode, inform user and quit.
      if [ "$mode" = "silent" ]; then
         echo " "
         echo " ERROR: could not interpret machine architecture (${architecture})"
         echo " Specify using the --platform switch, or run script in interactive"
         echo " mode."
         echo " "
         exit
       fi

   fi
fi


#----------------------------------------------------------------------
#  Prompt user for basic options if script is running interactively
#
#  - We could add more options here, and perhaps provide novice/expert
#    modes...
#----------------------------------------------------------------------

if [ "$mode" = "interactive" ]; then
   echo " "
   echo " Please answer the following questions. Default answers"
   echo " are in []. To accept the default, press return. "


   # Check if platform auto-dectection is enabled, and confirm with user
   if [ "${platform}" = "auto-detect" ]; then
      YN=none;
      echo " "
      echo " Your computer identifies itself as ${architecture} "
      echo " and processor as ${machine}. "
      echo " Is this information correct (y/n)? [y]"

      while [ "$YN" != "y" ] && [ "$YN" != "n" ] && [ "$YN" != "" ]
      do
         if [ "$YN" != "none" ]; then
            echo ""
            echo "Please answer yes or no  (y/n) [y]."
         fi
         read YN
      done

      if [ "$YN" = "n" ]; then
         # user must be prompted for platform
         platform="prompt"
      fi
   fi

   #Platform auto-detection disabled, or user wants to overide
   if [ "${platform}" = "prompt" ]; then
      A=none;
      while [ $A != "1" ] &&
            [ $A != "2" ] &&
            [ $A != "3" ] &&
            [ $A != "4" ] &&
            [ $A != "5" ] &&
            [ $A != "6" ]
      do
         if [ $A != "none" ]; then
            echo ""
            echo " Please choose a type from the list (1-5)."
            echo ""
         fi
         echo " Computer type: "
         echo "  (1) Sun / solaris"
         echo "  (2) Linux"
         echo "  (3) Cygwin"
         echo "  (4) MinGW (native Windows)"
         echo "  (5) MacOS X (10.4 or later)"
         read A

         # Use the 'known_host' keyword to permit compilation
         # on frequently used, nonstandard hosts.
         if [ "$A" = "known_host" ]; then
          echo " Host: "
          echo "  (1) nrn7 (SunOS)"
          read A
          case $A in
            1) custom_host="nrn7"
               A=1
               mode="silent";;
            *) echo "Error: Unknown host"
               exit;;
          esac
         fi

      done
      case "$A" in
         1) platform=sun;;
         2) platform=linux;;
         3) platform=cygwin;;
         4) platform=mingw;;
         5) platform=mac;;
      esac
   fi
fi

#-----------------------------------------------------------
# If auto-detection is active, interpret architecture
#-----------------------------------------------------------
if [ "$platform" = "auto-detect" ]; then
   # Add more architectures here as they become available.
   # Note: $architecture has been error-trapped above.
   case $architecture in
      Linux)                           platform="linux";;
      CYGWIN_NT-5.2  | CYGWIN_NT-5.1  | CYGWIN_NT-5.0  | CYGWIN_NT-6.0 | CYGWIN_NT-6.1 | CYGWIN_NT-6.1-WOW64 ) platform="cygwin";;
      MINGW32_NT-6.1 | MINGW32_NT-5.2 | MINGW32_NT-5.1 | MINGW32_NT-5.0 ) platform="mingw";;
      Darwin)                          platform="mac";;
      SunOS)                           platform="sun";;
   esac
fi

#-----------------------------------------------------------
#  Architcture is now known. If architecture is sun, prompt
#  for compiler. Otherwise, use GNU set.
#-----------------------------------------------------------
if [ "$mode" = "interactive" ]; then
  if [ "$platform" = "sun" ] || [ "$platform" = "linux" ]; then
    compiler="prompt"
  fi
fi

if [ "$compiler" != "prompt" ]; then
  if [ "$use_intel" = "yes" ]; then
    compiler="intel"
  else
    compiler="GNU"
  fi
fi

if [ "$compiler" = "prompt" ] && [ "$mode" = "interactive" ]; then
  A=none;
  echo ""
  echo " ESP-r can be built with the Sun Fortran 90, GNU or "
  echo " intel compilers."
  while [ $A != "1" ] &&
        [ $A != "2" ] &&
        [ $A != "3" ]
  do
     if [ $A != "none" ]; then
        echo ""
        echo " Please choose a compiler from the list [2]."
        echo ""
     fi
     echo " Compiler: "
     echo "  (1) Sun fortran 90 (cc and f90)"
     echo "  (2) GNU fortran (gcc 4.X and gfortran)"
     echo "  (3) Intel fortran (icc, icpc and ifort)"
     read A
     if [ "$A" = "" ]; then
       A="2"
     fi
  done
  case "$A" in
     1) compiler=sunF90;;
     2) compiler=GNU;;
     3) compiler=intel;;
  esac
else
  echo " "
  echo " The $compiler compiler set will be used."
fi

#-----------------------------------------------------------
# Prompt user for inclusion of H3Kreports (XML output)
# on supported platforms (presently linux/cygwin/mingw!)
#-----------------------------------------------------------
if [ "$mode" = "interactive" ]; then

   if [ "$platform" = "linux" ]  ||
      [ "$platform" = "cygwin" ] ||
      [ "$platform" = "mingw" ]  ||
      [ "$platform" = "mac" ]  ||
      [ "$platform" = "sun" ] ; then
      # XML available on platform
      if [ "${xml_libs_found}" = "no" ]; then

         #LIBXML2 libraries not available.
         echo " "
         echo " The libxml2 library does not appear to be installed"
         echo " on this system. The library could not be found in"
         echo " /usr/include or /usr/local/include. Support for  "
         echo " experimental XML output will be disabled, but the "
         echo " rest of the ESP-r installation will proceed normally. "
      else
         # Libraries were found. Prompt user for inclusion.
         B="none"
         while [ "$B" != "y" ] && [ "$B" != "n" ] && [ "$B" != "Y" ] && [ "$B" != "N" ]
         do
            if [ "$B" != "none" ]; then
               echo ""
               echo "Please answer yes or no (y/n)."
            fi
            echo " "
            echo " Install with experimental XML output support? This may "
            case "${xml_support}" in
              yes) echo " significantly increase simulation run-time. (y/n) [y]";;
              *)   echo " significantly increase simulation run-time. (y/n) [n]";;
            esac

            read B
            if [ "$B" = "" ]; then
              case "${xml_support}" in
                yes) B="y";;
                *)   B="n";;
              esac
            fi
         done
         if [ "$B" = "y" ]; then
            # Enable xml
            xml_support="yes"
            echo " XML output enabled for bps"

            # if xml install true prompt for SQLite support.
            # SQLite is not available if XML reporting is not installed
            if [ "${SQLite_libs_found}" = "no" ]; then
               # LIBSQLite libraries not available.
               echo " "
               echo " The libsqlite3 library does not appear to be installed"
               echo " on this system. The library could not be found in"
               echo " /usr/lib. Support for experimental SQLite output will "
               echo " be disabled, but the rest of the ESP-r installation will "
               echo " proceed normally. "
            else
               # Libraries were found. Prompt user for inclusion.
               B="none"
               while [ "$B" != "y" ] && [ "$B" != "n" ] && [ "$B" != "Y" ] && [ "$B" != "N" ]
               do
                  if [ "$B" != "none" ]; then
                     echo ""
                     echo "Please answer yes or no (y/n)."
                  fi
                  echo " "
                  echo " Install with experimental SQLite output support? (y/n) [n] "
                  read B
                  if [ "$B" = "" ]; then
                    B="n"
                  fi
               done
               if [ "$B" = "y" ]; then
                  # Enable xml
                  SQLite_support="yes"
                  echo " SQLite output enabled for bps"
               else
                  # Disable SQLite
                  SQLite_support="no"
                  echo " SQLite output excluded from bps"
               fi
               echo " "
            fi
         else
            # Disable XML
            xml_support="no"
            echo " XML output excluded from bps"
         fi
      fi
   else
      # XML not available on platform.
      echo " "
      echo " Experimental XML output support. is presently not  "
      echo " available on ${platform}. XML support disabled."
      xml_support="no"
   fi
else
  # Silent mode: Disable XML by default
  if [ "$xml_support" = "prompt" ]; then
    xml_support="no"
  fi
fi


#----------------------------------------------------------------------
# Prompt for graphics libraries
#----------------------------------------------------------------------

if [ "$mode" = "interactive" ]; then

  # Which modes are actually available, given our platform/compiler
  # combination?
  GTK_prompt="1"
  X11_prompt="2"
  noX_prompt="3"
  default="$X11_prompt"

  # Iif [ "$compiler" = "sunF90" ];  then
  # I  # Is GTK really incompatable with f90 on sun?
  # I  GTK_prompt="-"
  # Ifi

  if [ "$platform" = "mingw" ]; then
    # MinGW by definition excludes X11.
    X11_prompt="-"
    default="$noX_prompt"
  fi

  A=none;
  while [ "$A" != "$GTK_prompt" ] &&
        [ "$A" != "$X11_prompt" ] &&
        [ "$A" != "$noX_prompt" ]
  do
     if [ "$A" != "none" ]; then
        echo ""
        echo " Please choose a graphics library from the list."
        echo ""
     fi
     echo " Graphics library: [$default] "
     if [ "$GTK_prompt" != "-" ]; then
        echo "  (1) GTK graphics library";
     fi
     if [ "$X11_prompt" != "-" ]; then
        echo "  (2) X11 graphics library";
     fi
     if [ "$noX_prompt" != "-" ]; then
        echo "  (3) no graphics library (text-only application)";
     fi
     read A
     if [ "$A" = "-" ]; then
        A=none;
     fi
     if [ "$A" = "" ]; then
        A="$default"
     fi
  done
  case "$A" in
     "$GTK_prompt") xLibs=GTK;;
     "$X11_prompt") xLibs=X11;;
     "$noX_prompt") xLibs=noX;;
  esac
else
  # Assume X11 is available on all systems, except mingw
  # Xll is defaulted to
  if [ "$platform" = "mingw" ]; then
    xLibs=noX
    echo " "
    echo " A text-only application will be compiled."
  else
    echo " "
    echo " The $xLibs libraries will be used."
  fi
fi

#---------------------------------------------------------
# Prepend approprate grapics library to target list
#----------------------------------------------------------

case $xLibs in
  X11) targets=" libX11 $targets";;
  GTK) targets=" libGTK $targets";;
  noX) targets=" libnoX $targets";;
esac

#---------------------------------------------------------
# Query about debugging, installation of training and
# database files
#---------------------------------------------------------

if [ "$mode" = "interactive" ]; then
  # Debugging
  B="none"
  while [ "$B" != "y" ] && [ "$B" != "n" ] && [ "$B" != "Y" ] && [ "$B" != "N" ]
  do
    if [ "$B" != "none" ]; then
        echo ""
        echo " Please answer yes or no (y/n)."
    else
      echo " "
      echo " ESP-r can optionally retain debugging symbols and "
      echo " object files for use with a debugging program such"
      echo " as GDB."
      echo " "
    fi

    case "${debugging}" in
      yes) echo " Retain debugging symbols? (y/n) [y]";;
      *)   echo " Retain debugging symbols? (y/n) [n]";;
    esac

    read B
    if [ "$B" = "" ]; then
      case "${debugging}" in
        yes) B="y";;
        *)   B="n";;
      esac
    fi
  done
  if [ "$B" = "y" ] || [ "$B" = "Y" ]; then
    debugging="yes"
  else
    debugging="no"
  fi


  # System databases
  B="none"
  while [ "$B" != "y" ] && [ "$B" != "n" ] && [ "$B" != "Y" ] && [ "$B" != "N" ]
  do
    if [ "$B" != "none" ]; then
        echo ""
        echo "Please answer yes or no (y/n)."
    fi
      case "${install_dbs}" in
      yes) echo " Install ESP-r database files? (y/n) [y]";;
      *)   echo " Install ESP-r database files? (y/n) [n]";;
    esac

    read B
    if [ "$B" = "" ]; then
      case "${install_dbs}" in
        yes) B="y";;
        *)   B="n";;
      esac
    fi
  done
  if [ "$B" = "y" ] || [ "$B" = "Y" ]; then
    install_dbs="yes"
  else
    install_dbs="no"
  fi

  # Training files
  B="none"
  while [ "$B" != "y" ] && [ "$B" != "n" ] && [ "$B" != "Y" ] && [ "$B" != "N" ]
  do
    if [ "$B" != "none" ]; then
        echo ""
        echo "Please answer yes or no (y/n)."
    fi
      case "${install_training}" in
      yes) echo " Install training files? (y/n) [y]";;
      *)   echo " Install training files? (y/n) [n]";;
    esac

    read B
    if [ "$B" = "" ]; then
      case "${install_training}" in
        yes) B="y";;
        *)   B="n";;
      esac
    fi
  done
  if [ "$B" = "y" ] || [ "$B" = "Y" ]; then
    install_training="yes"
  else
    install_training="no"
  fi

fi

#---------------------------------------------------------
# Assign universal flags and variables.
#---------------------------------------------------------
#Enbable debug mode
if [ "$debugging" = "yes" ]; then
    debug_flag="-g"
else
    debug_flag=" "
fi

#---------------------------------------------------------
# Assign architecture-specific flags
#---------------------------------------------------------

#ESP-r related header files
LOCAL_INCLUDES="-I../include -I../shocc -I/usr/local/include -I../cetc/h3kreports"


#---------- MCTYPE ---------------------------------
# Create short strings for architecture types
case $platform in
   sun)      MCTYPE=sun ;;
   linux)    MCTYPE=lin ;;
   cygwin)   MCTYPE=cygw;;
   mac)      MCTYPE=osx ;;
   mingw)    MCTYPE=mingw ;;
# Custom hosts follow:
   nrn7)     MCTYPE=sun;;
esac


#---------------- XINSTALLDIR ----------------------
# Default location of x libraries

case $xLibs in
  GTK) XINSTALLDIR="`pkg-config gtk+-2.0 --cflags --libs`";;
  X11) X11_found="no"
       case $platform in
         sun)
            XDEFDIR="/usr/openwin"
            # Check if the libraries are in /usr/openwin
            if [ -d /usr/openwin/lib/X11 ]; then
               X11_found="yes"
               XINSTALLDIR="/usr/openwin"
            fi
            ;;
         *)
            # linux/mac/cygwin/arm: we'll need to search for
            # the X11 libraries in a number of possible
            # locations:

            XDEFDIR="/usr/X11R6 or /usr"

            # Try /usr/X11R6 - legacy location on monolithic X locations
            case $machine in
              x86_64)
                case $platform in
                  mac) if [ -d /usr/X11R6/lib/X11 ] ; then
                    X11_found="yes"
                    XINSTALLDIR="/usr/X11R6"
                  fi;;
                  *) if [ -d /usr/X11R6/lib64/X11 ] ; then
                       X11_found="yes"
                       XINSTALLDIR="/usr/X11R6"
                     else
                       if [ -d /usr/lib64/X11 ] ; then
                         X11_found="yes"
                         XINSTALLDIR="/usr/lib64"
                       fi
                     fi;;
                esac;;
              sun4u)
                if [ -d /usr/X11R6/lib/64 ] ; then
                  X11_found="yes"
                  XINSTALLDIR="/usr/X11R6"
                fi;;
              armv6l)
                if [ -d /usr/lib/arm-linux-gnueabihf ] ; then
                  X11_found="yes"
                  XINSTALLDIR="/usr/lib/arm-linux-gnueabihf"
                fi;;
              *)
                if [ -d /usr/X11R6/lib/X11 ] ; then
                  X11_found="yes"
                  XINSTALLDIR="/usr/X11R6"
                fi;;
            esac

            # Try /usr --- location on new linux distros with 'modular X'
            if [ -d /usr/lib/X11 ] && [ "$X11_found" = "no" ]; then
              X11_found="yes"
              XINSTALLDIR="/usr"
            fi
            if [ -d /usr/lib64/X11 ] && [ "$X11_found" = "no" ]; then
              X11_found="yes"
              XINSTALLDIR="/usr/lib64"
            fi

         ;;
       esac

       # if X11 still hasn't been found, ask user where it's
       # installed.

       if [ "$X11_found" = "no" ] && [ "$mode" = "interactive" ]; then
         echo " The X11 libraries could not be found in the defualt"
         echo " location ($XDEFDIR)."

         try_agian="y"
         while [ "$try_agian" == "y" ] || [ "$try_agian" == "Y" ]
         do
           echo " Do you wish to search for the X11 libraries at"
           echo " an alternate location?"
           read try_again
           if [ "$try_agian" = "" ]; then
             try_again="y"
           fi
           if [ "$try_again" = "y" ] || [ "$try_agian" = "Y" ]; then
             echo " Location of X11 installation? "
             read XINSTALLDIR
             if [ -d $XINSTALLDIR/lib/X11 ]; then
               echo " X11 was found at $XINSTALLDIR."
               X11_found="yes"
               try_agian="no"
             else
               echo " X11 could not be found at $XINSTALLDIR!"
             fi

           fi

         done
       fi

       # If X11 still hasn't been found, issue error and quit.
       if [ "$X11_found" = "no" ]; then
         echo " "
         echo " ERROR:"
         echo " Could not find the X-window libraries!"
         echo " "
         exit
       fi

       # Now check if the appropriate include files are installed
       # on the system.
       if [ -r $XINSTALLDIR/include/X11/X.h ]; then
         X11INCLUDEDIR=$XINSTALLDIR/include
       else
         if [ -r /usr/include/X11/X.h ]; then
           X11INCLUDEDIR=/usr/include
         else
           echo " "
           echo " ERROR:"
           echo " The X-window libraries were found at $XINSTALLDIR,"
           echo " but the X11 header files (e.g. X.h) could not be"
           echo " found at $XINSTALLDIR/include/X11."
           echo " "
           echo " This may indicate that you're missing the X11 header"
           echo " files necessary to compile the X11 version of ESP-r."
           echo " Check to see if you've installed the X11 development"
           echo " package (usually called xfree86-devel, xorg-X11-devel,"
           echo " or libX11-devel.)"
           exit
         fi
       fi
     ;;
  noX) XINSTALLDIR="";;
esac



#--------------- CC, CPL, FC -----------------------
# Assign compilers
case $compiler in
   sunF90)   CC=cc;  CPL=CC;  FC=f90  ;;
   GNU) case $gnu_version in
           gcc4)     CC=gcc;   CPL=g++;    FC=gfortran  ;;
        esac;;
   intel)    CC=icc;  CPL=icpc;  FC=ifort ;;
esac

if [ "$compiler_version" != "none" ]; then
  CC="$CC$compiler_version"
  CPL="$CPL$compiler_version"
  FC="$FC$compiler_version"
fi

#--------------- OPTIONS for extended debugging -----------
ExtendedDebugFlags=""
if [ "$extendedDebugging" == "yes" ]; then
  case $compiler in
    sunF90) ExtendedDebugFlags="$ExtendedDebugFlags";;
    GNU) case $gnu_version in
            gcc4)     ExtendedDebugFlags="$ExtendedDebugFlags -fbounds-check -Wunderflow -Wconversion -frange-check -ffpe-trap=zero,invalid,overflow,underflow"  ;;
          esac;;
    intel)  ExtendedDebugFlags="$ExtendedDebugFlags -debug all -C -fp-stack-check -traceback -inline-debug-info -fpe0 "  ;;
  esac
fi

#--------------- WWLINK -----------------------
# Assign wwlink variable --- is this used anymore?
case $compiler in
   sunF90)   WWLINK="shared_solaris" ;;
   GNU)      WWLINK="unshared"       ;;
esac


#--------------- FFLAGS -----------------------
# Write out platform specific ifdef variables.
# These will be inserted into FFLAGS, below.
# for OSX 10.6 and x86_64 force -m64 otherwise -m32
case $platform in
   sun) case $machine in
          sun4u)   fDefType="-DSUN -DOSI";;
          i86PC)   fDefType="-DSUN";;
          i386)    fDefType="-DSUN";;
        esac;;
   linux) case $machine in
          i386)    fDefType="-DLIN";;
          i686)    fDefType="-DLIN";;
          x86_64)  fDefType="-DLIN";;
          armv6l)  fDefType="-DLIN";;
        esac;;
   cygwin)     fDefType="-DCYGW";;
   mac) case $machine in
          i386)    fDefType="-DOSX -DOSI -DLIN -m32";;
          x86_64)  fDefType="-DOSX -DLIN -m64";;
        esac;;
   mingw)      fDefType="-DMINGW";;
esac

# Append -DX11 flag as necessary
if [ "$xLibs" = "X11" ]; then
  fDefType="$fDefType -DX11"
fi
if [ "$xLibs" = "GTK" ]; then
  fDefType="$fDefType -DGTK"
fi

# Assign fortran compilation flags
case $compiler in
   # Note '-C' flag causes some grief on older sun F90 compilers (~v5.0)
   sunF90) FFLAGS="$LOCAL_INCLUDES $fDefType -DF90 $debug_flag $ExtendedDebugFlags -C " ;;
   GNU)    FFLAGS="$LOCAL_INCLUDES $fDefType $debug_flag $ExtendedDebugFlags -fno-automatic ";
           case $gnu_version in
             gcc4) FFLAGS="$FFLAGS -DGCC4"            ;;
           esac ;;
   intel) FFLAGS="$LOCAL_INCLUDES $fDefType -save -zero -assume byterecl $debug_flag $ExtendedDebugFlags -O0" ;;
esac

if [ "$platform" = "mingw" ] && [ "$xLibs" = "GTK" ]; then
   FFLAGS="$FFLAGS -mwindows -mms-bitfields"
fi

if [ "$enable_cosim" == "yes" ] && [ "$platform" == "mingw" ]; then
   FFLAGS="$FFLAGS -fcray-pointer -mrtd"
fi

#-------------- CFLAGS ---------------------
# set up paths to c/c++ include files --- append X11 include
# path for X11 builds
case $xLibs in
  X11)  cINCLUDES="$LOCAL_INCLUDES -I$X11INCLUDEDIR";;
  *)    cINCLUDES="$LOCAL_INCLUDES";;
esac

# Append XML include paths, if needed
case $xml_support in
  yes)  cINCLUDES="$cINCLUDES $LIBXML2_INCLUDE";;
  no)   cINCLUDES="$cINCLUDES";;
esac

# Append SQLite include path, if needed
case $SQLite_support in
  yes)  cINCLUDES="$cINCLUDES $LIBSQLITE3_INCLUDE";;
  no)   cINCLUDES="$cINCLUDES";;
esac

# assign c/c++ IDFEF flags. These will be inserted into CFLAGS, below.
cDefType="$fDefType"

# Set xsl ifdef flag depending on whether xslt libraries are available
# and XML support is active,

if [ "$xml_support" = "yes" ] && [ "$xsl_libs_available" = "yes" ]; then
  cDefType="$cDefType -DXSL"
fi

# Set SQLite ifedf flag depending on whether sqlite libraries are available
# and XML support is active,
if [ "$xml_support" = "yes" ] && [ "$SQLite_support" = "yes" ]; then
  cDefType="$cDefType -DSQLITE"
fi

# set up c compilation flags
case $compiler in
   sunF90)  CFLAGS="$cINCLUDES $cDefType $debug_flag $ExtendedDebugFlags";;
   GNU)     CFLAGS="$cINCLUDES $cDefType $debug_flag $ExtendedDebugFlags";;
   intel)     CFLAGS="$cINCLUDES $cDefType -save -zero $debug_flag $ExtendedDebugFlags";;
esac

# Add '-mms-bitfields' and '-mwindows' on Mingw+GTK

if [ "$platform" = "mingw" ] && [ "$xLibs" = "GTK" ]; then
   CFLAGS="$CFLAGS -mwindows -mms-bitfields"
fi


#------------- ULIBS -------------------------
# Assign library paths/flags
case $platform in
   sun)      ULIBS="-L${SRCdir}/lib ";;
   linux)    ULIBS="-L${SRCdir}/lib ";;
   cygwin)   ULIBS="-L${SRCdir}/lib ";;
   mac)      ULIBS="-L${SRCdir}/lib ";;
   mingw)    ULIBS="-L${SRCdir}/lib -L/usr/local/lib -L/local/lib -L/usr/lib";;
esac

# Append versioning information library
ULIBS="$ULIBS -lversion"

# Append X11 library paths to ULIBS as required
# For OSX 10.6 and x86_64 look in lib rather than lib64
case $xLibs in
  X11) case $machine in
         sun4u) ULIBS="$ULIBS -lxesru -L${XINSTALLDIR}/lib -lX11";;
         i386) ULIBS="$ULIBS -lxesru -L${XINSTALLDIR}/lib -lX11";;
         i86pc) ULIBS="$ULIBS -lxesru -L${XINSTALLDIR}/lib -lX11";;
         i686) ULIBS="$ULIBS -lxesru -L${XINSTALLDIR}/lib -lX11";;
         armv6l) ULIBS="$ULIBS -lxesru -L${XINSTALLDIR} -lX11";;
         x86_64) case $platform in
                 mac) ULIBS="$ULIBS -lxesru -L${XINSTALLDIR}/lib -lX11";;
                 *) ULIBS="$ULIBS -lxesru -L${XINSTALLDIR}/lib64 -lX11";;        
                 esac;;
       esac;;
  GTK) ULIBS="$ULIBS -lgtkesru -L${XINSTALLDIR}";;
  noX) ULIBS="$ULIBS -lnoxesru";;
esac


# Append XML output libararies to ULIBS as required (libxml2 and libstdc++)
case $xml_support in
  yes)
       # Link xml libraries, along with stdc++.
       case $compiler in
         sunF90)  ULIBS="$ULIBS -lXML -lCstd";;
         GNU)     ULIBS="$ULIBS -lXML -lstdc++";;
         intel)   ULIBS="$ULIBS -lXML -lstdc++";;
       esac;

       # If libxslt is available, link it too
       case $xsl_libs_available in
         "yes") ULIBS="$ULIBS -lxslt";;
         "no")  ULIBS="$ULIBS ";;
         esac;

       # Add link to libxml2. This must follow
       # -lxslt on cygwin/mingw.
       ULIBS="$ULIBS -lxml2";

       # Append ws2_32 library on mingw and Crun to Sun
       case $platform in
            mingw)    ULIBS="$ULIBS -lws2_32";;
            sun)    ULIBS="$ULIBS -lCrun";;
            *)        ULIBS="$ULIBS";;
       esac;
       # Flag xml for inclusion in bps
       targets="enableXML $targets";;
  no)  ULIBS="$ULIBS -lXML ";
       # Flag xml for exclusion in bps
       targets="disableXML $targets";;
esac

# Append SQLite database library to ULIBS as required (libsqlite3)
case $SQLite_support in
  yes)
       # Link SQLite library,along with stdc++.
       case $compiler in
         sunF90)  ULIBS="$ULIBS -L/usr/local/lib -lSQLite -lsqlite3 -lCstd";;
         GNU)     ULIBS="$ULIBS -L/usr/local/lib -lSQLite -lsqlite3 -lstdc++";;
         intel)   ULIBS="$ULIBS -L/usr/local/lib -lSQLite -lsqlite3 -lstdc++";;
       esac;

       # Append ws2_32 library on mingw and Crun to Sun
       case $platform in
            mingw)    ULIBS="$ULIBS -lws2_32";;
            sun)    ULIBS="$ULIBS -lCrun";;
            *)        ULIBS="$ULIBS";;
       esac;
       # Flag SQLite for inclusion in bps
       targets="enableSQLite $targets";;
  no)  ULIBS="$ULIBS -lSQLite ";
       # Flag SQLite for exclusion in bps
       targets="disableSQLite $targets";;
esac

#-------------- LDFLAGS ------------------------
# Directives for the link-loader (ld). The reduce-memory-overheads
# speeds up linking greatly if machine memory is limited and has
# little impact otherwise.
case $platform in
   mingw)    LD_FLAGS="-DMINGW -Wl,--reduce-memory-overheads";;
   mac)      LD_FLAGS="";;
   *)  case $machine in
      armv6l) LD_FLAGS="-Wl,--reduce-memory-overheads";;
      *)      LD_FLAGS="-Wl,--reduce-memory-overheads";;
      esac;;
esac
    if [ "$enable_cosim" == "yes" ] ; then
       LD_FLAGS="-DMINGW -shared";
    fi

#-------------- EXE ------------------------
# Set exe file extention
case $platform in
   sun)      EXE="";;
   linux)    EXE="";;
   cygwin)   EXE=".exe";;
   mac)      EXE="";;
   mingw)    EXE=".exe";;
#Custom housts follow
   nrn7)     EXE="" ;;
esac
if [ "$enable_cosim" == "yes" ] && [ "$platform" == "mingw" ]; then
   EXE=".dll"
fi


#===========================================
##### End Computer Architecture
#####
##### Create esp-r directory tree
#===========================================

#---------------------------------------------------------
# Check if installation directories exist, and create
# if necessary
#---------------------------------------------------------
create_espr_dir="no"
# Does top-level installation directory exist?
if [ ! -d $DESTdir ]; then
  # NO! Is script running interactively, or has user specified a 'force?'
  if [ $mode = "interactive" ] && [ "$preserve_espr_dir" == "yes" ] ; then
    # Does user want to create it?
    echo " "
    echo " The esp-r installation directory does not exist. "
    echo " (${DESTdir})"
    A=none
    while [ "$A" != "y" ] && [ "$A" != "n" ]
    do
      echo " "
      echo " Do you wish to create this directory? (y/n) [y]"
      echo " "
      read A
      if [ "$A" = "" ]; then
        A="y"
      fi
    done
    if [ "$A" = "n" ]; then
      create_espr_dir="no"
    else
      create_espr_dir="yes"
      preserve_espr_dir="no"
    fi
  else
    create_espr_dir="yes"
    preserve_espr_dir="no"
  fi

  if [ "$create_espr_dir" = "yes" ]; then

    # Attempt to create directory
    mkdir ${DESTdir}
    # Was directory successfully created?
    if [ ! -d ${DESTdir} ]; then
      # No! User may not have write permissions on installation dir.
      # warn, and exit.
      echo " "
      echo " Installation error: Destination directory (${DESTdir})"
      echo " could not be created. Installation aborted."
      echo " "
      exit
    fi
    # This flag will be used later when the script checks
    # if the directory tree is correct.

  else
  # User doesn't want to create directory, but it doesn't exist.
  # Issue warning and quit.
    echo " "
    echo " Installation error: Destination directory (${DESTdir})"
    echo " does not exist. Installation aborted"
    echo " "
    exit
  fi
fi

# Determine if master path is writable.
if [ ! -w $DESTdir ] || [ ! -d $DESTdir ]; then
  # Warn user and quit.
  echo " "
  echo " Installation error: Cannot write to installation directory:"
  echo " $DESTdir"
  echo " Installation aborted."
  echo " "
  exit
fi
if [ "$enable_cosim" == "yes" ]; then
	#---------------------------------------------------------
	# Check if Harmonizer installation directory has been specified
	# if not set it to esp-r installation directory
	#---------------------------------------------------------
	if [ $COSIMdir == " " ]; then
	    ${COSIMdir} = ${DESTdir}/esp-r/bin 
	    echo " co-sim dir = (${DESTdir})"
	fi
	#---------------------------------------------------------
	# Check if Harmonizer installation directories exist, and create
	# if necessary
	#---------------------------------------------------------
	create_harmonizer_dir="no"
	# Does top-level installation directory exist?
	if [ ! -d $COSIMdir ]; then
	  # NO! Is script running interactively, or has user specified a 'force?'
	  if [ $mode = "interactive" ] ; then
	    # Does user want to create it?
	    echo " "
	    echo " The Harmonizer installation directory does not exist. "
	    echo " (${COSIMdir})"
	    A=none
	    while [ "$A" != "y" ] && [ "$A" != "n" ]
	    do
	      echo " "
	      echo " Do you wish to create this directory? (y/n) [y]"
	      echo " "
	      read A
	      if [ "$A" = "" ]; then
	        A="y"
	      fi
	    done
	    if [ "$A" = "n" ]; then
	      create_harmonizer_dir="no"
	    else
	      create_harmonizer_dir="yes"
	      preserve_harmonizer_dir="no"
	    fi
	  else
	    create_espr_dir="yes"
	    preserve_espr_dir="no"
	  fi
	
	  if [ "$create_harmonizer_dir" = "yes" ]; then
	
	    # Attempt to create directory
	    mkdir ${COSIMdir}
	    # Was directory successfully created?
	    if [ ! -d ${COSIMdir} ]; then
	      # No! User may not have write permissions on installation dir.
	      # warn, and exit.
	      echo " "
	      echo " Installation error: Destination directory (${COSIMdir})"
	      echo " could not be created. Installation aborted."
	      echo " "
	      exit
	    fi
	    # This flag will be used later when the script checks
	    # if the directory tree is correct.
	
	  else
	  # User doesn't want to create directory, but it doesn't exist.
	  # Issue warning and quit.
	    echo " "
	    echo " Installation error: Destination directory (${COSIMdir})"
	    echo " does not exist. Installation aborted"
	    echo " "
	    exit
	  fi
	fi
	
	# Determine if master path is writable.
	if [ ! -w $COSIMdir ] || [ ! -d $COSIMdir ]; then
	  # Warn user and quit.
	  echo " "
	  echo " Installation error: Cannot write to installation directory:"
	  echo " $COSIMdir"
	  echo " Installation aborted."
	  echo " "
	  exit
	fi
fi

#-----------------------------------------------------------
# Now check if ESP-r directory tree exists. Note: If we
# created the master directory (above), there's no need to prompt
# the user since the directory will obviously be empty. Check
# value of DirCreated variable.
#-----------------------------------------------------------
# Strip trailing space from DESTdir
DESTdir=`echo "$DESTdir" | sed "s/\/$//"`

ESPdir=${DESTdir}/esp-r
ESPbin=${DESTdir}/esp-r/bin
corrupted_tree="no"
if [ "$create_espr_dir" = "no" ]; then


  if [ ! -d $ESPdir ]                   ||
     [ ! -d $ESPdir/bin ]               ||
     [ ! -d $ESPdir/climate ]           ||
     [ ! -d $ESPdir/databases ]         ||
     [ ! -d $ESPdir/electric_loads ]    ||
     [ ! -d $ESPdir/lib ]               ||
     [ ! -d $ESPdir/manual ]            ||
     [ ! -d $ESPdir/xsl ]; then

    # ESP-r directory tree does not exist, or has been corrupted.

     corrupted_tree="yes"

     if [ "$create_espr_dir" = "no" ]; then
      echo " "
      echo " The ESP-r directory tree does not exist at ${DESTdir},"
      echo " or may have been corrupted. The following directories are"
      echo " required: "
      echo "    $ESPdir"
      echo "    $ESPdir/bin "
      echo "    $ESPdir/climate "
      echo "    $ESPdir/databases "
      echo "    $ESPdir/electric_loads "
      echo "    $ESPdir/lib "
      echo "    $ESPdir/manual "
      echo "    $ESPdir/xsl "
    fi

    if [ "$mode" = "interactive" ] && [ "$preserve_espr_dir" = "yes" ] ; then

      # IF we've created the destination directory, there's
      # no need to warn the user.

      A=none
      while [ "$A" != "y" ] && [ "$A" != "n" ]
      do
        echo " "
        echo " Do you wish to create the ESP-r directory tree at"
        echo " this location? (y/n) [y]"
        read A
        if [ "$A" = "" ]; then
          A="y"
        fi
      done
      if [ "$A" = "y" ]; then
        preserve_espr_dir="no"
      else
        preserve_espr_dir="yes"
      fi
    fi
  fi
fi

#--------------------------------------------------------------
#  Now build directory tree, if necessary.
#--------------------------------------------------------------
if [ "$corrupted_tree" = "yes" ] || [ "$create_espr_dir" = "yes" ]; then
  if [ "$preserve_espr_dir" = "yes" ]; then
    echo " "
    echo " Installation error: Will not not overwrite ESP-r "
    echo " directory structure at ${DESTdir}. Installation"
    echo " aborted."
    echo " "
    if [ "$mode" = "silent" ]; then
      echo " Use the '--force' option to overwrite the directory"
      echo " structure. Run 'Install --help' for more information."
      echo " "
      exit
    fi
  fi

  rm -fr $ESPdir
  mkdir $ESPdir
  mkdir $ESPdir/bin
  mkdir $ESPdir/climate
  mkdir $ESPdir/databases
  mkdir $ESPdir/electric_loads
  mkdir $ESPdir/lib
  mkdir $ESPdir/manual
  mkdir $ESPdir/xsl

fi

#--------------------------------------------------------------
# End ESP-r directory management
#--------------------------------------------------------------

#--------------------------------------------------------------
#
#--------------------------------------------------------------

####### create an installdir.h file so startup.F knows where to look
  echo "c this is where esp-r is installed" > ${SRCdir}/include/espinstalldir.h
  echo "       character instpath*60" >> ${SRCdir}/include/espinstalldir.h
  echo "       instpath = " >> ${SRCdir}/include/espinstalldir.h
  echo "     & '${ESPdir}'" >> ${SRCdir}/include/espinstalldir.h


##### Initiate make:
if [ "${make_msg_file}" = "" ]; then
  echo " "
  echo " Intended shell command:"
  echo " make MCTYPE=${MCTYPE} MCC=${CC} MCPL=${CPL} MFC=${FC} DESTdir=${DESTdir} ESPdir=${ESPdir} WWLINK=${WWLINK} EXE="${EXE}" XINSTALLDIR=${XINSTALLDIR} CFLAGS=${CFLAGS} FFLAGS=${FFLAGS} LD_FLAGS=${LD_FLAGS} ULIBS=${ULIBS} xml_status=${xml_status} $targets"
  echo " "
  echo " where the $xlibs libraries are in ${XINSTALLDIR}"
fi

if [ "$mode" = "interactive" ]; then
  A=x
  while [ "$A" != y ] && [ "$A" != n ] && [ "$A" != "" ]
  do
    echo " "
    echo " Proceed with installation of esp-r modules (y/n) [y]?"
    read A
  done

  if [ "$A" = "n" ]; then
    echo " "
    echo " Aborting ESP-r installation. "
    echo " "
    exit
  fi
fi


echo " "
echo " Installing ESP-r system. This may take some time."

#--------------------------------------------------------------
# Get SVN build info for versioning purposes.
#--------------------------------------------------------------

 echo -n "    - gathering versioning information from svn..."

 # Ensure that build information is always recompiled into
 # every binary - touch common file version.F, and delete
 # library/object files.
 touch ${SRCdir}/lib/version.F >/dev/null 2>&1
 rm ${SRCdir}/lib/libversion.a  ${SRCdir}/lib/version.o >/dev/null 2>&1

 # Get time of build
 time=`date`

 # Get system information. (host not used at present)
 architecture=`uname -m`
 system=`uname -s`
 os_flavour=`uname -r`
 host=`uname -n`


 # Digest version information in Version text file
 release=`cat ${SRCdir}/Version | grep "ESP-r release " | sed "s/ESP-r release //g"`

 
 # Try to collect svn information
 svn_info_command="svn info"
 svn_status_command="svn status"

 # For debugging...
 # svn_info_command="cat ~/svn_info.txt"
 # svn_status_command="cat ~svn_status.txt"

 if [ "$unversioned" == "no" ]; then
   svnrevision=`$svn_info_command 2>&1 | grep "^Revision:"`
   svnnotfound=`$svn_info_command 2>&1 | grep "command not found"`
   notworkingcopy=`$svn_info_command 2>&1 | grep "is not a working copy"`
   URL=`$svn_info_command 2>&1 | grep "^URL" | sed "s/URL: //g"`
   URLcvsdude=` echo $URL | grep "https*://espr.svn[0-9]*.cvsdude.com/esp-r/"`
   URLesprcentral=` echo $URL | grep "https*://[a-zA-Z0-9]*@*esp-r.net/esp-r/"`
 else
   svnnotfound="yes"
 fi

 
 # Ensure that the URL is from ESP-r central. Code built from
 # other repositories is to be designated 'unversioned'

 if [ "$unversioned"    == "yes" ]
    [ "$svnnotfound"    != "" ]    ||
    [ "$notworkingcopy" != "" ] ||
    [ "$svnrevision"    ==  "" ] ;   then
   versioned_repository="no";
 else
   if [ "$URLcvsdude" != "" ] || [ "$URLesprcentral"  != "" ]; then
     versioned_repository="yes"
   else
     versioned_repository="no"
   fi
 fi
 

 # If svn is available and repository is under versioning,
 # get misc svn information
 if [ "$versioned_repository" = "yes" ]; then
   revision_number=`$svn_info_command 2>&1 | grep "^Revision" | sed "s/Revision: //g"`

   # Get branch name: Strip ESP-r.net/espr/esp-r portion of url
   branch_name=`echo $URL | sed "s/^.*\/esp-r\///g"`

   # Strip leading 'branches', if any
   branch_name=`echo $branch_name | sed "s/branches\///g"`
   # Strip trailing 'src'
   branch_name=`echo $branch_name | sed "s/\/src//g"`

   # Now determine if URL describes development branch, a sub-branch,
   # or the trunk

   # Default version to sub-branch...
   source="Sub-branch"

   if [ "$branch_name" = "trunk" ]; then
     source="Trunk"
   fi

   if [ "$branch_name" = "development_branch" ]; then
     source="Development branch"
   fi

   # Use svn status to deterine if repository has
   # been locally modified (denoted by M/G/C status)
   #
   svn_status=`$svn_status_command 2>&1 | grep "^[MGC]" `
   if [ "$svn_status" != "" ]; then
    state="Locally modified"
   else
    state="Vanilla"
   fi

   echo " Done."
 else
   echo " Unavailable!"
 fi


#--------------------------------------------------------------
# Now write out build information into automatically generated
# header file.
#--------------------------------------------------------------
  echo "C      build_info.h"                                              >  ${SRCdir}/include/build_info.h
  echo "C      "                                                          >> ${SRCdir}/include/build_info.h
  echo "C      This file contains versioning and build information"       >> ${SRCdir}/include/build_info.h
  echo "C      for the ESP-r system. It is generated automatically"       >> ${SRCdir}/include/build_info.h
  echo "C      by the Install script each time ESP-r is recompiled---"    >> ${SRCdir}/include/build_info.h
  echo "C      any changes should be made in the Install scipt, and "     >> ${SRCdir}/include/build_info.h
  echo "C      not in this file"                                          >> ${SRCdir}/include/build_info.h
  echo "C      "                                                          >> ${SRCdir}/include/build_info.h
  echo "C      The following fortran variable assignments are "           >> ${SRCdir}/include/build_info.h
  echo "C      digested by procedure ESPrVersion() in esrucom/Startup.F"  >> ${SRCdir}/include/build_info.h
  echo "       "                                                          >> ${SRCdir}/include/build_info.h
  echo "       logical  bRelease,bVersioned,bModified"                    >> ${SRCdir}/include/build_info.h
  echo "       character cBuilder*32       ! User who compiled system"    >> ${SRCdir}/include/build_info.h
  echo "       character cArchitecture*32  ! Machine archictecture"       >> ${SRCdir}/include/build_info.h
  echo "       character cOperSystem*32    ! Operating system"            >> ${SRCdir}/include/build_info.h
  echo "       character cOSversion*32     ! OS flavour/version"          >> ${SRCdir}/include/build_info.h
  echo "       character cHost*256         ! Host name"                   >> ${SRCdir}/include/build_info.h
  echo "       character cRelease_Num*8    ! Release version"             >> ${SRCdir}/include/build_info.h
  echo "       character cSource*32        ! Repository version"          >> ${SRCdir}/include/build_info.h
  echo "       character cBranch*48        ! Branch name"                 >> ${SRCdir}/include/build_info.h
  echo "       character cRevision*32      ! Revision number"             >> ${SRCdir}/include/build_info.h
  echo "       character cState*32         ! Flag for repository state."  >> ${SRCdir}/include/build_info.h
  echo "       character cCC*32            ! Flags for compilers."        >> ${SRCdir}/include/build_info.h
  echo "       character cFC*32            ! fortran"                     >> ${SRCdir}/include/build_info.h
  echo "       character cCPL*32           ! C++"                         >> ${SRCdir}/include/build_info.h
  echo "       character cXML_support*32   ! Compile-time options"        >> ${SRCdir}/include/build_info.h
  echo "       character cSQLite_support*32! Compile-time options"        >> ${SRCdir}/include/build_info.h
  echo "       character cXlibrary*32      ! where which"                 >> ${SRCdir}/include/build_info.h
  echo "       "                                                          >> ${SRCdir}/include/build_info.h
  echo "       cBuilder          = \"${USER}\" "                          >> ${SRCdir}/include/build_info.h
  echo "       cHost             = \"${host}\""                           >> ${SRCdir}/include/build_info.h
  echo "       cArchitecture     = \"${architecture}\""                   >> ${SRCdir}/include/build_info.h
  echo "       cOperSystem       = \"${system}\""                         >> ${SRCdir}/include/build_info.h
  echo "       cOSversion        = \"${os_flavour}\""                     >> ${SRCdir}/include/build_info.h

  # Set flag indicating if this is a 'release' build
  # A release MUST be built from a versioned copy
  # of TRUNK in a Vanilla state.
  if [ "$versioned_repository" = "yes" ] &&
     [ "$source" = "Trunk"             ] &&
     [ "$state"  = "Vanilla"           ];  then
    echo "       bRelease          = .TRUE."                              >> ${SRCdir}/include/build_info.h
  else
    echo "       bRelease          = .FALSE."                             >> ${SRCdir}/include/build_info.h
  fi

  echo "       cRelease_num      = \"${release}\""                        >> ${SRCdir}/include/build_info.h

  if [ "${versioned_repository}" = "yes" ]; then
    echo "       bVersioned        = .TRUE. "                             >> ${SRCdir}/include/build_info.h
  else
    echo "       bVersioned        = .FALSE. "                            >> ${SRCdir}/include/build_info.h
  fi

  if [ "$state" = "Vanilla" ]; then
    echo "       bModified         = .FALSE."                             >> ${SRCdir}/include/build_info.h
  else
    echo "       bModified         = .TRUE."                              >> ${SRCdir}/include/build_info.h
  fi

  echo "C      URL commented out, as it likely exceeds g77's  "           >> ${SRCdir}/include/build_info.h
  echo "C      72 character-per-line limit."                              >> ${SRCdir}/include/build_info.h

  echo "C      cURL              = \"${URL}\""                            >> ${SRCdir}/include/build_info.h
  echo "       cSource           = \"$source\""                          >> ${SRCdir}/include/build_info.h
  echo "       cBranch           = \"$branch_name\" "                     >> ${SRCdir}/include/build_info.h
  echo "       cRevision         = \"$revision_number\""                  >> ${SRCdir}/include/build_info.h
  echo "       cState            = \"${state}\""                          >> ${SRCdir}/include/build_info.h
  # Add compilers, x-libraries & xml/xsl status
  echo "       cCC               = \"$CC\""                               >> ${SRCdir}/include/build_info.h
  echo "       cFC               = \"$FC\""                               >> ${SRCdir}/include/build_info.h
  echo "       cCPL              = \"$CPL\""                              >> ${SRCdir}/include/build_info.h
  if [ "$xml_support" = "yes" ]; then
    echo "       cXML_support      = \"supported\""                       >> ${SRCdir}/include/build_info.h
  else
    echo "       cXML_support      = \"unsupported\""                     >> ${SRCdir}/include/build_info.h
  fi
  if [ "$SQLite_support" = "yes" ]; then
    echo "       cSQlite_support   = \"supported\""                       >> ${SRCdir}/include/build_info.h
  else
    echo "       cSQLite_support   = \"unsupported\""                     >> ${SRCdir}/include/build_info.h
  fi
  echo "       cXlibrary         = \"$xLibs\" "                           >> ${SRCdir}/include/build_info.h

 
#--------------------------------------------------------------
# Now write a gnome desktop file so an icon can be used to start prj
# other variants may be required for other display managers
#--------------------------------------------------------------
  echo "       "                                                          >> ${HOME}/esp-r.desktop
  echo "[Desktop Entry]"                                                  >> ${HOME}/esp-r.desktop
  echo "Version=1.0"                                                      >> ${HOME}/esp-r.desktop
  echo "Type=Application"                                                 >> ${HOME}/esp-r.desktop
  echo "Terminal=false"                                                   >> ${HOME}/esp-r.desktop
  echo "Icon=${ESPdir}/esplogosmall.png"                                  >> ${HOME}/esp-r.desktop
  echo "Name=esp-r"                                                       >> ${HOME}/esp-r.desktop
  echo "Exec=prj"                                                         >> ${HOME}/esp-r.desktop
  echo "Comment=For use with Ubuntu 10.4"                                 >> ${HOME}/esp-r.desktop
  echo "GenericName=Starts ESP-r Project Manager"                         >> ${HOME}/esp-r.desktop

# Copy the png icon into the ESP-r distribution
  cp ${SRCdir}/bitmaps/esplogosmall.png ${ESPdir}

# For linux computers only
case $platform in
   linux)    chmod a+x ${HOME}/esp-r.desktop
             mv ${HOME}/esp-r.desktop ${HOME}/Desktop/esp-r.desktop
     ;;
esac

#---------------------------------------------------------------------
# Begin build
#---------------------------------------------------------------------
targets="${targets} end_of_exes"
# Build each executable, 1 by 1.
while [ "${targets}" != "end_of_exes" ]
do
   # The following chunk of code is an ugly, but sh-compatable
   # string-based shift register.

   # strip any leading spaces
   targets=`echo $targets | sed 's/^ *//g'`

   # Extract leading execuitable from targets
   target=`echo $targets | sed 's/ .*$//g'`

   # Now remove exe from targets

   targets=`echo $targets | sed 's/^[^ ]* //g'`

   # Let user know what's going on
   echo -n "    - building ${target}... "

   # Empty 'make_msg_file' if it's defined
  if [ "$make_msg_file" != "" ]; then
    echo "Compilation of $target on `date`"> $make_msg_file
  fi

   # Delete existing binary
   case $target in
     libX11) result="${SRCdir}/lib/libxesru.a"    ;;
     libGTK) result="${SRCdir}/lib/libgtkesru.a"  ;;
     libnoX) result="${SRCdir}/lib/libnoxesru.a"  ;;
     enableXML | disableXML ) result="${SRCdir}/lib/libXML.a"  ;;
     enableSQLite | disableSQLite ) result="${SRCdir}/lib/libSQLite.a"  ;;
     ecnv)   result="${SRCdir}/esrucnv/ecnv${EXE}"      ;;
     vew)    result="${SRCdir}/esruvew/viewer${EXE}"      ;;
     bpsdll) result="${SRCdir}/esrubps/bps.dll"   ;;
     harmonizer) result="${SRCdir}/harmonizer/harmonizer.exe"   ;;
     harmonizerdll) result="${SRCdir}/harmonizer/harmonizer.dll"   ;;
     *)      result="${SRCdir}/esru${target}/$target${EXE}"   ;;
   esac

   if [ -r $result ]; then
     if [ "${make_msg_file}" != "" ]; then
       echo " Deleting $result " >> $make_msg_file
       rm $result >> $make_msg_file 2>&1
     else
       echo -n " Deleting $result "
       rm $result
     fi
   fi
   
   # harmonizer.exe doesn't fit the pattern for the normal make proceedure...
   if [ "$result" == "${SRCdir}/harmonizer/harmonizer.exe" ]; then
		gfortran ${SRCdir}/harmonizer/win32_interface.f95 ${SRCdir}/harmonizer/launch_dll.f95 -fcray-pointer -o ${SRCdir}/harmonizer/harmonizer.exe
	else
   # execute make with redirection, if make_msg_file specified. Otherwise
   # display messages in buffer.
   if [ "${make_msg_file}" != "" ]; then
      echo " Make command:"             >>$make_msg_file
      echo " -------------"             >>$make_msg_file
      echo "   make MCTYPE=${MCTYPE} MCC=${CC} MCPL=${CPL} MFC=${FC} DESTdir="${DESTdir}" ESPdir="${ESPdir}" WWLINK="${WWLINK}" EXE="${EXE}" XINSTALLDIR="${XINSTALLDIR}" CFLAGS="${CFLAGS}" FFLAGS="${FFLAGS}" LD_FLAGS="${LD_FLAGS}" ULIBS="${ULIBS}" xml_status="${xml_status}" SQLite_status="${SQLite_status}" -f Makefile  ${target} >>$make_msg_file 2>&1 " >> $make_msg_file
      echo " "                          >>$make_msg_file
      echo " Make output:"              >>$make_msg_file
      echo " ------------"                    >>$make_msg_file
      make MCTYPE=${MCTYPE} MCC=${CC} MCPL=${CPL} MFC=${FC} DESTdir="${DESTdir}" ESPdir="${ESPdir}" WWLINK="${WWLINK}" EXE="${EXE}" XINSTALLDIR="${XINSTALLDIR}" CFLAGS="${CFLAGS}" FFLAGS="${FFLAGS}" LD_FLAGS="${LD_FLAGS}" ULIBS="${ULIBS}" xml_status="${xml_status}" SQLite_status="${SQLite_status}" -f Makefile  ${target} >>$make_msg_file 2>&1
   else
      echo ""

      make MCTYPE=${MCTYPE} MCC=${CC} MCPL=${CPL} MFC=${FC} DESTdir="${DESTdir}" ESPdir="${ESPdir}" WWLINK="${WWLINK}" EXE="${EXE}" XINSTALLDIR="${XINSTALLDIR}" CFLAGS="${CFLAGS}" FFLAGS="${FFLAGS}" LD_FLAGS="${LD_FLAGS}" ULIBS="${ULIBS}" xml_status="${xml_status}" SQLite_status="${SQLite_status}" -f Makefile  ${target}
   fi
   fi
   # was target built successfully?
   if [  ! -r $result ]; then
      #ignore if a clean command was invoked.
      if [ "$target" != "clean" ]; then
        # file has not changed --- installation failed.
        # Warn user and quit.
        echo " "
        echo " ERROR: could not build executable ${target}! "
        echo " ERROR: result $result! "

        # If redirection in use, dump messages.
        if [ "${make_msg_file}" != "" ]; then
           echo " Compilation messages follow: "
           echo " ----------------------------------------- "
           cat ${make_msg_file}
           echo " ----------------------------------------- "
           rm -f ${make_msg_file}
        fi

        echo " Install: Fatal error. "
        echo " Executable ${target} could not be built!"
        echo " Installation aborted."
        echo " "
        exit
      fi

   else
     echo "Done."
   fi
   # delete message file, if necessary
   if [ "${make_msg_file}" != "" ]; then
      rm -f ${make_msg_file}
   fi
done

#### End Initiate make

##### Install training, manual & support files.
# Set executables to be the just compiled versions (default to users default
#  if any not found).
BPS=bps
CLM=clm
ISH=ish
PRJ=prj
PDB=pdb
if [ -f esrubps/bps ] ; then
  BPS=${SRCdir}/esrubps/bps
fi
if [ -f esruclm/clm ] ; then
  CLM=${SRCdir}/esruclm/clm
fi
if [ -f esruish/ish ] ; then
  ISH=${SRCdir}/esruish/ish
fi
if [ -f esruprj/prj ] ; then
  PRJ=${SRCdir}/esruprj/prj
fi
if [ -f esrupdb/pdb ] ; then
  PDB=${SRCdir}/esrupdb/pdb
fi
echo " "
echo -n " Installing esprc and default (configuration files) into ${ESPdir}..."

#-----------------------------
# Write out default ESP-r file
#-----------------------------

  echo -n "   - Installing help files..."
  cp -r ${SRCdir}/tutorial/*.help ${ESPdir}/lib

# Header tag for default file
echo "*ESP-r Defaults" > ${ESPdir}/default

# Installation path?
echo "*ipth ${ESPdir}" >> ${ESPdir}/default

# Default names for model files (why do they point to explicit paths
# in the training directory, and what about all the files that aren't
# included in this list/
echo "*cfg ${ESPdir}/training/basic/cfg/bld_basic.cfg" >> ${ESPdir}/default
echo "*ctl ${ESPdir}/training/basic/ctl/bld_basic.ctl" >> ${ESPdir}/default
echo "*mfn ${ESPdir}/training/basic/nets/bld_basic_af1.afn" >> ${ESPdir}/default
echo "*dfd ${ESPdir}/training/cfd/template.dfd" >> ${ESPdir}/default
echo "*pnf ${ESPdir}/training/plant/vent_simple/cfg/vent.cfg" >> ${ESPdir}/default


# Will we install databases?
case "${install_dbs}" in
  yes) # Use current installation folder for default databses
       DBInstDir="${ESPdir}"
       LinkDB="yes"
      ;;
  no) # Check if databases were previously installed in this folder
      if [ -r ${ESPdir}/databases/pressc.db1 ]; then
        # They were previously installed. Link to installation folder
        DBInstDir="${ESPdir}"; LinkDB="yes"
      else
        # They were not installed. Perhaps they're available in usr/esru?
        if [ -r /usr/esru/esp-r/databases/pressc.db1 ]; then
          DBInstDir="/usr/esru/esp-r"; LinkDB="yes"
        else
          LinkDB="no"
        fi
      fi
      ;;
esac

if [ "${LinkDB}" = "yes" ]; then

  # Are these default names for results files, or pointers
  # to example database files?
  echo "*res ${ESPdir}/databases/test.res" >> ${ESPdir}/default
  echo "*mfr ${ESPdir}/databases/test.mfr" >> ${ESPdir}/default

  # Default database file locations?
  echo "*clm ${DBInstDir}/climate/clm67" >> ${ESPdir}/default
  echo "*prs ${DBInstDir}/databases/pressc.db1" >> ${ESPdir}/default
  echo "*prm ${DBInstDir}/databases/material.db3.a" >> ${ESPdir}/default
  echo "*mlc ${DBInstDir}/databases/multicon.db3" >> ${ESPdir}/default
  echo "*opt ${DBInstDir}/databases/optics.db2" >> ${ESPdir}/default
  echo "*evn ${DBInstDir}/databases/profiles.db2.a" >> ${ESPdir}/default
  echo "*pdb ${DBInstDir}/databases/plantc.db1" >> ${ESPdir}/default
  echo "*ecdb ${DBInstDir}/databases/elcomp.db1" >> ${ESPdir}/default
  echo "*mcdb ${DBInstDir}/databases/mscomp.db2" >> ${ESPdir}/default
  echo "*icdb ${DBInstDir}/databases/icons.db1" >> ${ESPdir}/default
  echo "*mldb ${DBInstDir}/databases/mould.db1" >> ${ESPdir}/default
  echo "*sbem ${DBInstDir}/databases/SBEM.db1" >> ${ESPdir}/default

fi

# End of default file.
echo "*end" >> ${ESPdir}/default

#-----------------------------------
# Write out ESP-r configuration file
#-----------------------------------

echo "*ESPRC" > ${ESPdir}/esprc

echo "*gprn,rectangular dump,import" >> ${ESPdir}/esprc
echo "*tprn,Text dump,/tmp/tx_dump" >> ${ESPdir}/esprc
echo "*gxwd,screen dump,import -window root" >> ${ESPdir}/esprc
echo "*cad,CAD package,xzip,ZIP" >> ${ESPdir}/esprc
# Image viewer program is platform specific:
case "${MCTYPE}" in
  mingw) # Use IE as image viewer (does this work?)
         echo "*image_display,TIF,iexplore.exe" >> ${ESPdir}/esprc
         echo "*image_display,XBMP,iexplore.exe" >> ${ESPdir}/esprc
         echo "*image_display,GIF,iexplore.exe" >> ${ESPdir}/esprc
         echo "*image_display,XWD,iexplore.exe" >> ${ESPdir}/esprc
    ;;
  *)     # Use display as image editor (and what if it's not available?)
         echo "*image_display,TIF,display" >> ${ESPdir}/esprc
         echo "*image_display,XBMP,display" >> ${ESPdir}/esprc
         echo "*image_display,GIF,display" >> ${ESPdir}/esprc
         echo "*image_display,XWD,display" >> ${ESPdir}/esprc
    ;;
esac
echo "*journal,OFF" >> ${ESPdir}/esprc
# Text editor is platform specific:
case "${MCTYPE}" in
  mingw) # Use Wordpad
         echo "*editor,editor,wordpad.exe" >> ${ESPdir}/esprc
    ;;
  *)     # Use nedit --- but what if it's not available?
         # We could use the value of the EDITOR environment
         # variable, but it might point to a command-line
         # editor such as vi/nano that wouldn't initialize
         # correctly outside a terminal.
         echo "*editor,editor,nedit" >> ${ESPdir}/esprc
    ;;
esac
echo "*report_gen,Reporting tool,xfs" >> ${ESPdir}/esprc

# Pointer to exemplar files. Will we install exemplar and validation
# standards?

case "${install_training}" in
  yes) # Use current installation folder for default databses
       TVInstDir="${ESPdir}"
       LinkTV="yes"
      ;;
  no) # Check if training/ were previously installed in this folder
      if [ -r ${ESPdir}/training/exemplars  ] &&
         [ -r ${ESPdir}/validation/stds_list ]; then
        # They were previously installed. Link to installation folder
        TVInstDir="${ESPdir}"; LinkTV="yes"
      else
        # They were not installed. Perhaps they're available in usr/esru?
        if [ -r /usr/esru/esp-r/training/exemplars  ] &&
           [ -r /usr/esru/esp-r/validation/stds_list ]; then
          TVInstDir="/usr/esru/esp-r"; LinkTV="yes"
        else
          LinkTV="no"
        fi
      fi
      ;;
esac

if [ "${LinkTV}" = "yes" ]; then
  echo "*exemplars,Exemplars,${TVInstDir}/training/exemplars" >> ${ESPdir}/esprc
  echo "*validation_stds,Validation standards,${TVInstDir}/validation/stds_list" >> ${ESPdir}/esprc
fi

# Pointer to defaults file.
echo "*db_defaults,Defaults,${ESPdir}/default" >> ${ESPdir}/esprc

# Pointer to climate list. Depends on whether databases were installed/found.
if [ "${LinkDB}" = "yes" ]; then
  echo "*db_climates,climatelist,${DBInstDir}/climate/climatelist" >> ${ESPdir}/esprc
fi
# End of file.
echo "*end" >> ${ESPdir}/esprc

echo " Done."

#---------------------------------------
# Write out training files.
#---------------------------------------

if [ "$install_training" = "yes" ]; then
     echo " "
     echo " Installing training and validation models. This may take some time."
     echo -n "   - Installing standard bitmaps into ${ESPdir}/lib..."
     cp ${SRCdir}/bitmaps/*.xbm ${ESPdir}/lib
     echo " Done."

     echo -n "   - Removing previous training and validation models..."
     rm -rf ${ESPdir}/training ${ESPdir}/validation
     echo " Done."

     echo -n "   - Updating materials and climate databases in training models..."
     cd ${SRCdir}

     # Note: We're dumping the output to /dev/null, which will suppress
     #       error messsages that would otherwise warn the user if a
     #       database failed to install. But this section of the
     #       installation script is otherwise so verbose, it's extremely
     #       unlikely a user (or developer) would ever notice such a
     #       message.
     #
     #       In the future, we could wrap the database conversion commands
     #       in a low-level script that would silently invoke prj/clm/pdb/ish,
     #       check if the target binary database was actually created, and
     #       verify its intregity. The script could then stop when an error
     #       was encountered, and provide meaningful output to the user.
     #
     #       Maybe someday...

     cd ${SRCdir}/training/cg_ctl/daylit_coef/cfg
     $CLM -mode text -file dec94_clm -act asci2bin silent dec94_clm.a >/dev/null
     cd ${SRCdir}/training/Temporal_Clm
     $CLM -mode text -file 15265.climate -act asci2bin 15265.climate.a >/dev/null
     cd ${SRCdir}
     echo " Done."
     echo -n "   - Updating climate databases in validation models..."
     cd ${SRCdir}/validation/CEN/13791/databases
     $CLM -mode text -file Cond.clm -act asci2bin silent Cond.clm.a >/dev/null
     $CLM -mode text -file WM_A.clm -act asci2bin silent WM_A.clm.a >/dev/null
     $CLM -mode text -file WM_B.clm -act asci2bin silent WM_B.clm.a >/dev/null
     cd ${SRCdir}
     echo " Done."
     echo -n "   - Copying training and validation models..."
     cp -r ${SRCdir}/training ${ESPdir}/training
     sed -e 's|/usr/esru/esp-r|'"${ESPdir}"'|' ${SRCdir}/training/exemplars > ${ESPdir}/training/exemplars
     cp -r ${SRCdir}/validation ${ESPdir}/validation
     sed -e 's|/usr/esru/esp-r|'"${ESPdir}"'|' ${SRCdir}/validation/stds_list > ${ESPdir}/validation/stds_list
     echo " Done."
     echo -n "   - Removing versioning information from training and validation files..."
     find  ${ESPdir}/training -name "\.svn" | xargs rm -fr
     find  ${ESPdir}/validation -name "\.svn" | xargs rm -fr
     echo " Done."
     echo -n "   - Removing binary database from training models ..."
     cd ${SRCdir}/
     rm -f training/cg_ctl/daylit_coef/cfg/dec94_clm
     rm -f validation/CEN/13791/databases/WM_A.clm
     rm -f validation/CEN/13791/databases/WM_B.clm
     rm -f validation/CEN/13791/databases/Cond.clm
     echo " Done."
  # Update directory names in training models to reflect DESTdir
  #
  # Scan training and validation folders for configuration files.
  #

  echo "   - Updating model shading and database records..."
  cfgnames=(`find ./training ./validation -name "*.cfg" -print`)
  # Count cfg files
  cfgcount=`find ./training ./validation -name "*.cfg" -print | wc -l`
  #
  # For each cfg file check for shading dbs
  #
  cfgnum=0
  for file in "${cfgnames[@]}"; do
    cfgnum=$((${cfgnum} + 1))
    printf "      -> model ${cfgnum}/${cfgcount} (${file})"
  #  echo FILE: $file
  #
  # Create a list of zone ref numbers and isi files in this cfg file
  #

    if [ "${skip_ish_calcs}" = "no" ]; then
      isi=(`egrep '(\*isi\ |\*zon\ )' $file | cut -d# -f1`)
      # Count zones with shading
      ish_tag_count=(`egrep '(\*isi\ )' $file | cut -d# -f1 | wc -l `)
      hits=${#isi[@]}

      i=0
      #
      # Get the zone number and check if there is a isi file associated
      # with this zone.  The format of the isi variable is
      # "*zon  1  *zon  2  *isi  ../zones/xx.shd" and so on where hits
      # is the number of words in the list isi.
      #
      ish_processed_count=0
      while [ $((i)) -lt $((hits-2)) ]; do
      if [ ${isi[$((i))]} == "*zon" ]; then

        if [ ${isi[$((i+2))]} == "*isi" ]; then
          ish_processed_count=$((${ish_processed_count}+1))

          if [ "${reuse_ish_calcs}" = "no" ]; then
            printf "\r      -> model ${cfgnum}/${cfgcount} (${file}); zone ${ish_processed_count}/${ish_tag_count}"
            $ISH -mode text -file ${file:2} -zone ${isi[$((i+1))]} -act update_silent > /dev/null
            shdfile=${file%/*}/${isi[$((i+3))]}
            mv -f ${shdfile} ${ESPdir}/${shdfile}
          elif [ "${reuse_ish_calcs}" = "yes" ]; then
            printf "\r      -> model ${cfgnum}/${cfgcount} (${file}); zone ${ish_processed_count}/${ish_tag_count}"
            $ISH -mode text -file ${file:2} -zone ${isi[$((i+1))]} -act useupdate_silent > /dev/null
            shdfile=${file%/*}/${isi[$((i+3))]}
            mv -f ${shdfile} ${ESPdir}/${shdfile}
          fi
        fi
      fi
      i=2+$(($i))
      done
    fi
    printf "\n"
  #
  # Now update the paths in models to reflect install dir.
  #
  # Note: This approach will not work for models with plant
  #       networks. ESP-r saves the plant database path in
  #       two locations: a) in the .cfg file, and in the
  #       .pln file. prj uses the record in the .cfg file,
  #       while bps references the record in the .pln file.
  #       Thus training models containing plant networks will
  #       bre browsable, but will not run.
  #
  #       This code should either be updated to edit the .pln
  #       file as well, or (preferably) bps should be updated
  #       to reference the plant database record in the cfg
  #       file.
  #
  sed -e 's|/usr/esru|'"${DESTdir}"'|' ${file} > ${ESPdir}/${file:2}

  done
  echo "     Done."

  # Sample result set.
  echo -n "   - Creating example binary results database..."
  rm -f ${ESPdir}/databases/test.res
  $BPS -mode text >/dev/null 2>&1 <<zzz
a
d
y
c
${ESPdir}/databases/test.res
11 7
17 7
1
1
s

example_results
y
y
-
-
zzz
     echo " Done."
     cd ${SRCdir}


  echo -n "   - Installing manual files..."
  rm -rf ${ESPdir}/manual
  mkdir ${ESPdir}/manual
  cp -r ${SRCdir}/manual/* ${ESPdir}/manual
  echo " Done."

  echo -n "   - Installing tutorial files..."
  rm -rf ${ESPdir}/tutorial
  mkdir ${ESPdir}/tutorial
  cp -r ${SRCdir}/tutorial/*.tut ${ESPdir}/tutorial
  echo " Done."


fi

##### End Install training, manual & tutorial files.

##### Install databases

if [ "$install_dbs" = "yes" ]; then

echo " "
echo " Installing standard databases. This may take some time."

  # remove existing binary databases
  echo -n "   - Removing existing databases..."
  rm -f ${DESTdir}/esp-r/databases/*
  rm -f ${DESTdir}/esp-r/climate/clm67
  rm -f ${DESTdir}/esp-r/databases/test.res
  echo " Done."
  # Construction databases. Note constr.db1 and constr.db2 are subsets
  # of constr.db3. Perhaps they can be merged into a single file?
  echo -n "   - Creating binary materials databases..."
  ./bin/materials_db_conv databases constr.db1.a ${DESTdir}/esp-r/databases/constr.db1 >/dev/null
  ./bin/materials_db_conv databases constr.db2.a ${DESTdir}/esp-r/databases/constr.db2 >/dev/null
  ./bin/materials_db_conv databases constr.db3.a ${DESTdir}/esp-r/databases/constr.db3 >/dev/null
  ./bin/materials_db_conv databases north_american.materialdb.a ${DESTdir}/esp-r/databases/north_american.materialdb >/dev/null
  cp ${SRCdir}/databases/ccht_constr.db1 ${DESTdir}/esp-r/databases/ccht_constr.db1
  cp ${SRCdir}/databases/ccht_na_constr.db1 ${DESTdir}/esp-r/databases/ccht_na_constr.db1
  cp ${SRCdir}/databases/ccht_material.ascii ${DESTdir}/esp-r/databases/ccht_material.ascii
  cp ${SRCdir}/databases/constr.db1.a ${DESTdir}/esp-r/databases/constr.db1.a
  cp ${SRCdir}/databases/constr_db1.materialdb ${DESTdir}/esp-r/databases/constr_db1.materialdb
  cp ${SRCdir}/databases/constr.db2.a ${DESTdir}/esp-r/databases/constr.db2.a
  cp ${SRCdir}/databases/constr_db2.materialdb ${DESTdir}/esp-r/databases/constr_db2.materialdb
  cp ${SRCdir}/databases/constr.db3.a ${DESTdir}/esp-r/databases/constr.db3.a
  cp ${SRCdir}/databases/constr_db3.materialdb ${DESTdir}/esp-r/databases/constr_db3.materialdb
  cp ${SRCdir}/databases/north_american.materialdb.a ${DESTdir}/esp-r/databases/north_american.materialdb.a
  cp ${SRCdir}/databases/material.db3.a ${DESTdir}/esp-r/databases/material.db3.a

  cp ${SRCdir}/databases/SBEM.db1 ${DESTdir}/esp-r/databases/SBEM.db1
  cp ${SRCdir}/databases/UK_notional.constrdb ${DESTdir}/esp-r/databases/UK_notional.constrdb
  cp ${SRCdir}/databases/profiles.db1.a ${DESTdir}/esp-r/databases/profiles.db1.a
  cp ${SRCdir}/databases/profiles.db2.a ${DESTdir}/esp-r/databases/profiles.db2.a
  echo " Done."

   cd ${SRCdir}/databases

   echo -n "   - Creating binary plant components databases..."

   # pdb convert: [ source file ] [ dest. file ] [ dest folder ]
   pdb_convert plantc.db1.a plantc.db1 ${DESTdir}/esp-r/databases
   pdb_convert plantc.db2.a plantc.db2 ${DESTdir}/esp-r/databases
   pdb_convert plantc.tt.a  plantc.tt  ${DESTdir}/esp-r/databases
   echo " Done."

   echo -n "   - Creating binary climate databases "
   cd ${SRCdir}/climate
   cp climatelist ${DESTdir}/esp-r/climate
   sed -e 's|/usr/esru/esp-r|'"${ESPdir}"'|' ${SRCdir}/climate/climatelist > ${ESPdir}/climate/climatelist
   cp README ${DESTdir}/esp-r/climate/Readme
   cp README_IWEC ${DESTdir}/esp-r/climate/Readme_iwec


   #Find all assci files (we use the convention of .a)
   for file in *.a
   do
     #Assign asscii file to variable.
     CLIM_a=${file}
     #Create binary file name by cutting off the .a suffix.
     CLIM_b=`echo $file |  sed 's/\.a$//g'`
     #Convert.
     clim_convert ${ESPdir}/climate/${CLIM_b} ${CLIM_a}
   done
   echo " Done."

   cd ${SRCdir}/databases
   echo -n "   - Copying ASCII databases..."
   cp components.db1 ccht_mlc.db multicon.db1 multicon.db2 multicon.db3 multicon.db4 north_american.constrdb optics.db1 optics.db2 optics.db3 ccht-optics.db1 mould.db1 pressc.db1 mscomp.db1 mscomp.db2 *.desc ${DESTdir}/esp-r/databases
   echo " Done."

fi

##### End Install databases

##### If xml support requested install the XSLT files.
if [ "$xml_support" = "yes" ]; then
echo " "
echo -n " Installing xslt files ..."
cp ${SRCdir}/cetc/h3kreports/xsl/*.xsl ${DESTdir}/esp-r/xsl
echo " Done."

fi

##### Install and  Clean up
cd ${SRCdir}
echo " "
echo -n " Installing executables... " 
if [ "$debugging" = "no" ]; then
  make ESPdir=${ESPdir} EXE=${EXE} COSIMDir=${COSIMdir} strip  >/dev/null 2>&1
fi
make ESPBinDir=${ESPbin} EXE=${EXE} COSIMDir=${COSIMdir} InstBins  >/dev/null 2>&1
if [ "$clean" = "yes" ]; then
  make EXE=${EXE} clean  >/dev/null 2>&1
fi
echo "Done."


# Makeup an appropriate esp-r script.
if [ ${MCTYPE} = sun ]; then
  echo "#!/bin/sh" > ${ESPdir}/bin/esp-r
  echo "if [ X$EFONT_0 = X ]; then" >> ${ESPdir}/bin/esp-r
  echo "      EFONT_0=6x12" >> ${ESPdir}/bin/esp-r
  echo "      EFONT_1=6x13" >> ${ESPdir}/bin/esp-r
  echo "      EFONT_2=8x13" >> ${ESPdir}/bin/esp-r
  echo "      EFONT_3=9x15" >> ${ESPdir}/bin/esp-r
  echo "fi" >> ${ESPdir}/bin/esp-r
  echo "prj \$@ &" >> ${ESPdir}/bin/esp-r
  chmod a+x ${ESPdir}/bin/esp-r
elif [ ${MCTYPE} = lin ]; then
  echo "#!/bin/sh" > ${ESPdir}/bin/esp-r
  echo "if [ X$EFONT_0 = X ]; then" >> ${ESPdir}/bin/esp-r
  echo "      EFONT_0=6x12" >> ${ESPdir}/bin/esp-r
  echo "      EFONT_1=6x13" >> ${ESPdir}/bin/esp-r
  echo "      EFONT_2=8x13" >> ${ESPdir}/bin/esp-r
  echo "      EFONT_3=9x15" >> ${ESPdir}/bin/esp-r
  echo "fi" >> ${ESPdir}/bin/esp-r
  echo "prj \$@ &" >> ${ESPdir}/bin/esp-r
  chmod a+x ${ESPdir}/bin/esp-r
elif [ ${MCTYPE} = cygw ]; then
  echo "#!/bin/sh" > ${ESPdir}/bin/esp-r
  echo "if [ X$EFONT_0 = X ]; then" >> ${ESPdir}/bin/esp-r
  echo "      EFONT_0=6x12" >> ${ESPdir}/bin/esp-r
  echo "      EFONT_1=6x13" >> ${ESPdir}/bin/esp-r
  echo "      EFONT_2=8x13" >> ${ESPdir}/bin/esp-r
  echo "      EFONT_3=9x15" >> ${ESPdir}/bin/esp-r
  echo "fi" >> ${ESPdir}/bin/esp-r
  echo "prj \$@ &" >> ${ESPdir}/bin/esp-r
  chmod a+x ${ESPdir}/bin/esp-r
elif [ ${MCTYPE} = osx ]; then
  echo "#!/bin/sh" > ${ESPdir}/bin/esp-r
  echo "if [ X$EFONT_0 = X ]; then" >> ${ESPdir}/bin/esp-r
  echo "      EFONT_0=6x12" >> ${ESPdir}/bin/esp-r
  echo "      EFONT_1=6x13" >> ${ESPdir}/bin/esp-r
  echo "      EFONT_2=8x13" >> ${ESPdir}/bin/esp-r
  echo "      EFONT_3=9x15" >> ${ESPdir}/bin/esp-r
  echo "fi" >> ${ESPdir}/bin/esp-r
  echo "prj \$@ &" >> ${ESPdir}/bin/esp-r
  chmod a+x ${ESPdir}/bin/esp-r
elif [ ${MCTYPE} = mingw ]; then
  echo "@rem batch file to start project manager - associate with cfg files" > ${ESPdir}/bin/esp-r.cmd
  echo "start prj -file %1" >> ${ESPdir}/bin/esp-r.cmd
fi

echo " "
echo " Installation complete.  Please consult file ${SRCdir}/env/README."
echo " "
echo " NOTE: Be sure that you have updated your PATH environment"
echo "       to include directives for the location of the ESP-r"
echo "       executables. You should ensure that: "
echo "       "${ESPdir}"/bin"
echo "       is included in the definition."
echo " "

exit

