#!/bin/bash
#
# For use on sun/linux/cygwin/mingw/OS X/Windows platforms.
#
# This script handles installation of ESP-r executables,
# databases, training and reference materials.
#
# This script is a work in progress, and is undergoing
# continual improvement. It has been tested on the following
# platform/compiler/graphics library configurations:
#
# =====================================================================================
# OS      Distribution / Host       User         rev   Compiler   x11   GTK   noX   XML
# =====================================================================================
# Linux   Gentoo / NRCan:c.monster  aferguso     578   gcc3.4.6    P     P     P     P
#                                                      gcc4.1.1    P     P     P     P
#                                                      gcc32       P     P     P     P
#         -----------------------------------------------------------------------------
#         Fedora Core 5             A.Horsford   489   gcc32       P     -     -     -
#                                                480   gcc4.1.0    X     -     -     -
#         -----------------------------------------------------------------------------
#         Linspire (2.6.14) (a)     C.Jones      480   gcc3.3.5    X     X     -     -
# -------------------------------------------------------------------------------------
# CYGWIN  NT5.1                     aferguso     578   gcc3.4.4    P     P     P     -
# -------------------------------------------------------------------------------------
# MINGW   NT5.1                     aferguso     578   gcc3.4.2    -     P     P     -
# -------------------------------------------------------------------------------------
# Solaris SunOS 4 / NRCan:nrn7      aferguso     578   sunCC       X (b) -     P     -
# -------------------------------------------------------------------------------------
# Mac OSX 
# =====================================================================================
# Notes:
#  P  : pass - all ESP-r binaries compiled successfully, ancillary files installed
#  X  : fail - one or more of the ESP-r binaries failed to compile
#  -  : not applicable / not tested
#  (a): Linspire seems to be an extrodinarly non-standard linux system.
#  (b): nrn7 appears to have non-standard X11 header files.
#

echo " "
echo "          ESP-r installation script."
echo " "
echo " Please consult the README file before commencing "
echo " installation.  This script will rebuild the ESP-r"
echo " modules on your system.  You can abort this process"
echo " at any time by pressing <control> c."
echo " "


# Set default settings.
mode="interactive"         # Interactive/silent installation
                           # (silent mode isn't yet supported)
SRCdir=`pwd`               # Source Directory
DESTdir=/usr/esru          # Target Directory
xml_support=prompt         # support for XML output
debugging="prompt"         # include debugging symbols
EXE=""                     # executable file extension (i.e. .exe on cygwin and Windows)
FFLAGS="-I../include "     # initial fortran compiler flags
CFLAGS="-I../include "     # initial C compiler flags
LD_FLAGS=" "               # inisial link-loader flags
platform="auto-detect"     # default platform
install_dbs="yes"          # Install dbs files
install_training="yes"     #         training files
install_exes="prompt"      #         executables
delete_temp_files="yes"    # Delete temporary files.
preserve_espr_dir="yes"    # save existing ESP-r directory by default
gnu_version="gcc3"         # flag indicating which version of gcc is in use
make_msg_file=".make_msg"  # Dump make messages?
compiler_version="none"    # append string to compilers?
clean_up="prompt"          # Remove symbols and temproary files?

#-----------------------------------------------------------
# List of targets understood by bps
#-----------------------------------------------------------

# Buildable targets:
programs="aco b2e bps dfs c2e cfg clm e2r ecnv eco grd ish mfs mld mrt pdb prj pro res tdf vew"
# (bld plt, net and vww are not currently built)

# Add leading and trailing spaces for regexp matching
programs=" ${programs} "

# default targets: empty for now
targets=" "

#-----------------------------------------------------------
# Detect architecture.
#-----------------------------------------------------------
architecture=`uname -s`      # machine type

#-----------------------------------------------------------
# Is Stat available? assume stat will be in /bin or /usr/bin,
# since which might also not be available. 
#-----------------------------------------------------------

if [ -x /usr/bin/stat ]; then
   stat_avail="yes"
elif [ -x /bin/stat ]; then
   stat_avail="yes"
else
   stat_avail="no"
fi

# Command line options.
help=0
input="no"
if [ $# -ne 0 ]; then
   for i do
      if [ "${input}" = "yes" ]; then
         input="no"
      else
        case "$i" in
        -h | --help)    help=1;                    shift;;
        --debug)        debugging=yes; clean_up="no";  shift;;
        -d) shift;      DESTdir=$1; input="yes";   shift;;
        --force)        preserve_espr_dir="no";    shift;;
        --no_training)  install_training="no";     shift;;
        --no_dbs)       install_dbs="no";          shift;;
        --silent)       mode="silent";             shift;;
        --xml)          xml_support=yes;           shift;;
        --gcc32)        gnu_version="gcc32";       shift;;
        --gcc4)         gnu_version="gcc4";        shift;;
        --compiler_version) shift; input="yes";
                        compiler_version=$1;       shift;;
        -v | --verbose) make_msg_file="";          shift;;
        clean)          targets="${targets} clean" shift;;
        *)
              # check if target is "buildable",
              match="no"
              position=`expr match " $programs " ".* ${i} .*"` 
              if  [ "${position}" != 0 ]; then
                 targets="${targets} ${i}"
                 shift
              else
                 # Trap unsupported arguements.
                 echo " " 
                 echo " Error: arguement $i is not supported. "
                 echo " Run ./Install --help for more information."
                 echo " " 
                 exit
              fi
           ;;
        esac
      fi
   done
fi

# If Targets is empty, build all programs by default.
if [ "${targets}" = " " ]; then
  targets="${programs}"
else
  # Add a trailing space for regexp search
  targets="${targets} "
fi


#-----------------------------------------------------------
# Header.
#-----------------------------------------------------------
if [ $help -eq 1 ]; then
  echo " "
  echo " USAGE: Install [OPTIONS] [NAME]"
  echo " "
  echo " This installation script can be used to install"
  echo " ESP-r on your system. To install ESP-r using the "
  echo " standard defaults and interactive dialogues, run "
  echo " the script without any arguements, eg:"
  echo " "
  echo "   $ ./Install "
  echo " "
  echo " You can also specify alternate configurations "
  echo " using the script's options. For instance, to "
  echo " install ESP-r in your home directory, use the"
  echo " command:"
  echo " "
  echo "   $ ./Install -d ~/esru"
  echo " "
  echo " It is also possible to build esp-r executables "
  echo " individually, by specifying the name(s) of the "
  echo " desired program(s), eg:"
  echo " "
  echo "   $ ./Install bps "
  echo " " 
  echo " or to install a module in a specific location" 
  echo " "
  echo "   $ ./Install -d ~/esru bps "
  echo " "
  echo " The installation script also supports silent "
  echo " (non-interactive) usage, using the '--silent' "
  echo " command line argument. Any of the command-line "
  echo " arguments specified below can be used in "
  echo " combination with the '--silent' option."
  echo " " 
  echo " ARGUMENTS: "
  echo " "
  echo "    <NAME> to install one or more named modules (e.g."
  echo "           Install clm for the module clm)"
  echo " "
  echo "    --compiler_version <STRING>: Append <STRING> to the default"
  echo "        compiler binaries. For instance, to invoke the compiler"
  echo "        binaries gcc-3.4.6, g++-3.4.6, and g77-3.4.6, specify "
  echo "        '--compiler_version -3.4.6'."
  echo " "
  echo "    -d <PATH>,  --destination <PATH>: Install "
  echo "        ESP-r in <PATH>/esp-r directory. The "
  echo "        default path is ${DESTdir}."
  echo " " 
  echo "    --debug: Include debugging symbols in executable"
  echo "        the default is no debugging symbols. "
  echo " "
  echo "    -h, --help:  Display this help message."
  echo " "
  echo "    --force: Overwrite a corrupted installation. "
  echo " "
  echo "    --gcc32: Use 3.2 version of GCC provided by the"
  echo "         compat-gcc-32, compat-gcc-32-c++, compat-gcc-32-g77"
  echo "         and compat-libf2c-32 packages."
  echo " "
  echo "    --gcc4: Use the GCC4 compilers (gcc, g++ and gFortran)."
  echo "         NOTE: compilation of ESP-r with GCC4+ is not currently"
  echo "         supported, and may introduce uncertianty into results."
  echo "         GCC4-builds of ESP-r should be used for testing purposes"
  echo "         only."
  echo " "
  echo "    --no_dbs: Skip installation of database files."
  echo " "
  echo "    --no_training: Skip installation of training models."
  echo " "
  echo "    --silent: Invoke the silent (non-interactive) installation"
  echo "        mode. Default options will be selected, unless "
  echo "        alternatives are specified in command-line parameters."
  echo " "
  echo "    --xml: Compile bps with support for direct export of results"
  echo "        in xml and csv formats. Requires the GNU libxml2 and"
  echo "        libstdc++ libraries."
  echo " "
  echo "    -v, --verbose: Print compilation messages to screen."
  echo " "
  echo " Notes:"
  echo " "
  echo " 1. While ESP-r compiles with the GCC 4 / gFortran compilers, the "
  echo "    results obtained with ESP-r binaries built with GCC4 exhibit "
  echo "    unexplained differences from the GCC3 versions. Until the "
  echo "    GCC4 results have been verified, use GCC3-built versions of "
  echo "    ESP-r for scientific research or consulting work."
  echo " "
  echo " 2. There are two versions of ESP-r - the standard full distribution"
  echo "    based on the X11 graphic libraries and a beta version which uses the"
  echo "    GTK graphic libraries (but which lacks a few facilities)."
  echo " "
  exit
fi

# check that xml support is available
if [ "$xml_support" = "yes" ] || [ "$xml_support" = "prompt" ]; then
   # check for libxml2 headers on system
   if [ ! -d /usr/include/libxml2 ] && [ ! -d /usr/local/include/libxml2 ]; then
      # Libraries not found. Disable XML support 
      xml_support="no"
      xml_libs_found="no"
      # If runnning silently, warn user.
      if [ "$mode" = "silent" ]; then
         echo " "
         echo " Warning: Library libxml2 could not be found"
         echo " in /usr/include or /usr/local/include "
         echo " " 
         echo " XML support disabled."
         echo " "
      fi
   else
    # Add XML include files to include paths
    xml_libs_found="yes"
    LIBXML2_INCLUDE="-I/usr/include/libxml2 -I/usr/local/include/libxml2"

    # xml support may optionally include support for xslt & exslt. Check
    # that libraries are available
    #
    # This code has only been tested with GNU ld.
    #
    ld_output=`ld -o /dev/null -lxslt 2>&1 | sed "s/^ld: cannot find .*$//g"`
    case $ld_output in
      "") xsl_libs_available="no";;
      *)  xsl_libs_available="yes";;
    esac
    
   fi
fi

#--------------------------------------------------------------------
# Error trap command-line options
#--------------------------------------------------------------------

#check that platform can be successfully detected.
if [ "$platform" = "auto-detect" ]; then
   # auto-dectectable architectures - add more as additional platforms
   # become available.
   if [ "$architecture" != "Linux" ] &&
      [ "$architecture" != "CYGWIN_NT-5.1" ] &&
      [ "$architecture" != "CYGWIN_NT-5.0" ] &&
      [ "$architecture" != "CYGWIN_NT-5.2" ] &&
      [ "$architecture" != "MINGW32_NT-5.1" ] &&
      [ "$architecture" != "MINGW32_NT-5.0" ] &&
      [ "$architecture" != "MINGW32_NT-5.2" ] &&
      [ "$architecture" != "Darwin" ] &&
      [ "$architecture" != "SunOS" ]; then
      platform="prompt";
      # Auto-detection of platform is not supported
      # If in silent mode, inform user and quit.
      if [ "$mode" = "silent" ]; then
         echo " "
         echo " ERROR: could not interpret machine architecture (${architecture})"
         echo " Specify using the --platform switch, or run script in interactive"
         echo " mode."
         echo " "
         exit
       fi
         
   fi
fi


#----------------------------------------------------------------------
#  Prompt user for basic options if script is running interactively
#
#  - We could add more options here, and perhaps provide novice/expert
#    modes...
#----------------------------------------------------------------------

if [ "$mode" = "interactive" ]; then

   echo " Please answer the following questions. Default answers"
   echo " are in []. To accept the default, press return. "
   echo " "

   # Check if platform auto-dectection is enabled, and confirm with user
   if [ "${platform}" = "auto-detect" ]; then
      YN=none;
      echo " Your computer identifies itself as ${architecture}. "
      echo " Is this information correct (y/n)? [y]"

      while [ "$YN" != "y" ] && [ "$YN" != "n" ] && [ "$YN" != "" ]
      do
         if [ "$YN" != "none" ]; then
            echo ""
            echo "Please answer yes or no  (y/n) [y]."
            echo ""
         fi
         read YN
      done
      
      if [ "$YN" = "n" ]; then
         # user must be prompted for platform
         platform="prompt"
      fi
   fi

   #Platform auto-detection disabled, or user wants to overide
   if [ "${platform}" = "prompt" ]; then
      A=none;   
      while [ $A != "1" ] &&
            [ $A != "2" ] &&
            [ $A != "3" ] &&
            [ $A != "4" ] &&
            [ $A != "5" ] &&
            [ $A != "6" ]
      do
         if [ $A != "none" ]; then
            echo ""
            echo " Please choose a type from the list (1-5)."
            echo ""
         fi
         echo " Computer type: "
         echo "  (1) Sun / solaris"
         echo "  (2) Linux"
         echo "  (3) Cygwin (Late-Beta testing)"
         echo "  (4) MinGW (native Windows)"
         echo "  (5) MacOS X (10.2 or later)"
         read A

         # Use the 'known_host' keyword to permit compilation
         # on frequently used, nonstandard hosts.
         if [ "$A" = "known_host" ]; then
          echo " Host: "
          echo "  (1) nrn7 (SunOS)"
          read A
          case $A in
            1) custom_host="nrn7"
               A=1
               mode="silent";;
            *) echo "Error: Unknown host"
               exit;;
          esac
         fi
      echo " " 
      done
      case "$A" in
         1) platform=sun;;
         2) platform=linux;;
         3) platform=cygwin;;
         4) platform=mingw;;
         5) platform=mac;;
      esac
   fi
fi 

#-----------------------------------------------------------
# If auto-detection is active, interpret architecture
#-----------------------------------------------------------
if [ "$platform" = "auto-detect" ]; then
   # Add more architectures here as they become available.
   # Note: $architecture has been error-trapped above.
   case $architecture in
      Linux)                           platform="linux";;
      CYGWIN_NT-5.2  | CYGWIN_NT-5.1  | CYGWIN_NT-5.0  ) platform="cygwin";;
      MINGW32_NT-5.2 | MINGW32_NT-5.1 | MINGW32_NT-5.0 ) platform="mingw";;
      Darwin)                          platform="mac";;
      SunOS)                           platform="sun";;
   esac
fi

#-----------------------------------------------------------
#  Architcture is now known. If architecture is sun, prompt
#  for compiler. On macs, default to gcc3.3. Otherwise,
#  use GNU set. 
#-----------------------------------------------------------
if [ "$platform" = "sun" ] && [ "$mode" = "interactive" ]; then
  compiler=prompt
else
  compiler=GNU
  # Flag exception for gcc-3.3 on mac
  if [ "$platform" = "mac" ] && [ "$gnu_version" = "gcc3" ]; then
    gnu_version="gcc3Mac"
  fi 
fi

if [ "$compiler" = "prompt" ] && [ "$mode" = "interactive" ]; then
  A=none;
  echo " ESP-r can be built with the Sun Fortran 90  or GNU"
  echo " Fortran 77 compilers."
  while [ $A != "1" ] &&
        [ $A != "2" ]
  do
     if [ $A != "none" ]; then
        echo ""
        echo " Please choose a compiler from the list [2]."
        echo ""
     fi
     echo " Compiler: "
     echo "  (1) Sun fortran 90 (cc and f90)"
     echo "  (2) GNU fortran (gcc 3.X and g77)"
     read A
     if [ "$A" = "" ]; then
       A="2"
     fi
  done
  case "$A" in
     1) compiler=sunF90;;
     2) compiler=GNU;;
  esac
else
  echo " The GNU compiler set will be used."
  echo " "
fi

if [ "$mode" = "interactive" ] && [ "$debugging" = "prompt" ]; then
  echo " Do you wish to keep symbols and object files for debugging? [n]"
  read A
  echo " "
  if [ "$A" = "y" ]; then
    debugging="yes"
    clean_up="no"
  else
    debugging="no"
    clean_up="yes"
  fi
elif [ "$debugging" = "prompt" ] || [ "$debugging" = "no" ]; then
  clean_up="yes"
  debugging="no"
  echo "Debugging symbols and object files will be deleted."
  echo " " 
elif [ "$debugging" = "yes" ]; then
  echo " Debugging symbols and object files will be retained."
  echo " " 
fi



#-----------------------------------------------------------
# Prompt user for inclusion of H3Kreports (XML output)
# on supported platforms (presently linux/cygwin/mingw!)
#-----------------------------------------------------------
if [ "$mode" = "interactive" ]; then

   if [ "$platform" = "linux" ]  ||
      [ "$platform" = "cygwin" ] ||
      [ "$platform" = "mingw" ]  ||
      [ "$platform" = "sun" ] ; then
      # XML available on platform
      if [ "${xml_libs_found}" = "no" ]; then

         #LIBXML2 libraries not available.
         echo " The libxml2 library does not appear to be installed"
         echo " on this system. The library could not be found in"
         echo " /usr/include or /usr/local/include. Support for  "
         echo " experimental XML output will be disabled, but the "
         echo " rest of the ESP-r installation will proceed normally. "
         echo " "
      else
         # Libraries were found. Prompt user for inclusion.
         B="none"
         while [ "$B" != "y" ] && [ "$B" != "n" ] && [ "$B" != "Y" ] && [ "$B" != "N" ]
         do
            if [ "$B" != "none" ]; then
               echo ""
               echo "Please answer yes or no (y/n)."
            fi
            echo " Install with experimental XML output support? This may "
            case "${xml_support}" in
              yes) echo " significantly increase simulation run-time. (y/n) [y]";;
              *)   echo " significantly increase simulation run-time. (y/n) [n]";;
            esac
              
            read B
            if [ "$B" = "" ]; then
              case "${xml_support}" in
                yes) B="y";;
                *)   B="n";;
              esac 
            fi
         done
         if [ "$B" = "y" ]; then
            # Enable xml
            xml_support="yes"
            echo " XML output enabled for bps"
         else
            # Disable XML
            xml_support="no"            
            echo " XML output excluded from bps"
         fi
         echo " "
      fi 
   else
      # XML not available on platform.
      echo " Experimental XML output support. is presently not  "
      echo " available on ${platform}. XML support disabled."
      echo " "
      xml_support="no"
   fi
else
  # Silent mode: Disable XML by default
  if [ "$xml_support" = "prompt" ]; then
    xml_support="no"
  fi 
fi


#----------------------------------------------------------------------
# Prompt for graphics libraries
#----------------------------------------------------------------------

if [ "$mode" = "interactive" ]; then

  # Which modes are actually available, given our platform/compiler
  # combination?
  GTK_prompt="1"
  X11_prompt="2"
  noX_prompt="3"
  default="$X11_prompt"
  
  if [ "$compiler" = "sunF90" ];  then
    # Is GTK really incompatable with f90 on sun?
    GTK_prompt="-"
  fi

  if [ "$platform" = "mingw" ]; then
    # MinGW by definition excludes X11.
    X11_prompt="-"
    default="$noX_prompt"
  fi

  A=none;
  while [ "$A" != "$GTK_prompt" ] &&
        [ "$A" != "$X11_prompt" ] &&
        [ "$A" != "$noX_prompt" ]
  do
     if [ "$A" != "none" ]; then
        echo ""
        echo " Please choose a graphics library from the list."
        echo ""
     fi
     echo " Graphics library: [$default] "
     if [ "$GTK_prompt" != "-" ]; then
        echo "  (1) GTK graphics library";
     fi
     if [ "$X11_prompt" != "-" ]; then
        echo "  (2) X11 graphics library";
     fi
     if [ "$noX_prompt" != "-" ]; then
        echo "  (3) no graphics library (text-only application)";
     fi
     read A
     if [ "$A" = "-" ]; then
        A=none;
     fi
     if [ "$A" = "" ]; then
        A="$default"
     fi
  done
  case "$A" in
     "$GTK_prompt") xLibs=GTK;;
     "$X11_prompt") xLibs=X11;;
     "$noX_prompt") xLibs=noX;;
  esac
else

  # Assume X11 is available on all systems, except mingw
  if [ "$platform" = "mingw" ]; then
    xLibs=noX
    echo " A text-only application will be compiled."
    echo " "
  else
    xLibs=X11
    echo " The X11 libraries will be used."
    echo " "
  fi 
fi


#---------------------------------------------------------
# Query about installation of training files and databases
#---------------------------------------------------------
if [ "$mode" = "interactive" ]; then
  echo " (Re)install training and validation models, manual and tutorial (y/n) [y]?"
  read A
  if [ "$A" = "n" ]; then
    install_training="no"
  fi
fi

if [ "$mode" = "interactive" ]; then
  echo " (Re)install system databases (y/n) [y]?"
  read A
  if [ "$A" = "n" ]; then
    install_dbs="no"
  fi
fi

#---------------------------------------------------------
# Prepend approprate grapics library to target list
#---------------------------------------------------------- 

case $xLibs in
  X11) targets=" libX11 $targets";;
  GTK) targets=" libGTK $targets";;
  noX) targets=" libnoX $targets";;
esac


#---------------------------------------------------------
# Assign universal flags and variables.
#---------------------------------------------------------
#Enbable debug mode
if [ "$debugging" = "yes" ]; then
    debug_flag="-g"
else
    debug_flag=" "
fi

#---------------------------------------------------------
# Assign architecture-specific flags
#---------------------------------------------------------

#ESP-r related header files
LOCAL_INCLUDES="-I../include -I../shocc -I/usr/local/include -I../cetc/h3kreports"


#---------- MCTYPE ---------------------------------
# Create short strings for machine types
case $platform in
   sun)      MCTYPE=sun ;;
   linux)    MCTYPE=lin ;;
   cygwin)   MCTYPE=cygw;;
   mac)      MCTYPE=osx ;;
   mingw)    MCTYPE=mingw ;;
# Custom hosts follow:
   nrn7)     MCTYPE=sun;;   
esac


#---------------- XINSTALLDIR ----------------------
# Default location of x libraries

case $xLibs in
  GTK) XINSTALLDIR="`pkg-config gtk+-2.0 --cflags --libs`";;
  X11) X11_found="no"
       case $platform in
         sun)
            XDEFDIR="/usr/openwin"
            # Check if the libraries are in /usr/openwin
            if [ -d /usr/openwin/lib/X11 ]; then
               X11_found="yes"
               XINSTALLDIR="/usr/openwin"
            fi
            ;;
         *)
            # linux/mac/cygwin: we'll need to search for
            # the X11 libraries in a number of possible
            # locations:

            XDEFDIR="/usr/X11R6 or /usr"
            
            # Try /usr/X11R6 - legacy location on monolithic X locations
            if [ -d /usr/X11R6/lib/X11 ] ; then
              X11_found="yes"
              XINSTALLDIR="/usr/X11R6"
            fi

            # Try /usr --- location on new linux distros with 'modular X'
            if [ -d /usr/lib/X11 ] && [ "$X11_found" = "no" ]; then
              X11_found="yes"
              XINSTALLDIR="/usr"
            fi

         ;;
       esac

       # if X11 still hasn't been found, ask user where it's
       # installed.
         
       if [ "$X11_found" = "no" ] && [ "$mode" = "interactive" ]; then
         echo " The X11 libraries could not be found in the defualt"
         echo " location ($XDEFDIR)."

         try_agian="y"
         while [ "$try_agian" == "y" ] || [ "$try_agian" == "Y" ]
         do 
           echo " Do you wish to search for the X11 libraries at"
           echo " an alternate location?"
           read try_again
           if [ "$try_agian" = "" ]; then
             try_again="y"
           fi
           if [ "$try_again" = "y" ] || [ "$try_agian" = "Y" ]; then
             echo " Location of X11 installation? "
             read XINSTALLDIR
             if [ -d $XINSTALLDIR/lib/X11 ]; then
               echo " X11 was found at $XINSTALLDIR."
               X11_found="yes"
               try_agian="no"
             else
               echo " X11 could not be found at $XINSTALLDIR!"
             fi

           fi

         done
       fi

       # If X11 still hasn't been found, issue error and quit.
       if [ "$X11_found" = "no" ]; then
         echo " "
         echo " ERROR:"
         echo " Could not find the X-window libraries!"
         echo " "
         exit
       fi

       # Now check if the appropriate include files are installed
       # on the system. 
       if [ -r $XINSTALLDIR/include/X11/X.h ]; then
         X11INCLUDEDIR=$XINSTALLDIR/include
       else
         echo " "
         echo " ERROR:"
         echo " The X-window libraries were found at $XINSTALLDIR,"
         echo " but the X11 header files (e.g. X.h) could not be"
         echo " found at $XINSTALLDIR/include/X11."
         echo " "
         echo " This may indicate that you're missing the X11 header"
         echo " files necessary to compile the X11 version of ESP-r."
         echo " Check to see if you've installed the X11 development"
         echo " package (usually called xfree86-devel, xorg-X11-devel,"
         echo " or libX11-devel.)"
         exit       
       fi
     ;;
  noX) XINSTALLDIR="";;
esac
    


#--------------- CC, CPL, FC -----------------------
# Assign compilers
case $compiler in
   sunF90)   CC=cc;  CPL=CC;  FC=f90  ;;
   GNU) case $gnu_version in
           gcc3)     CC=gcc;   CPL=g++;    FC=g77       ;;
           gcc32)    CC=gcc32; CPL=g++32;  FC=g77       ;;
           gcc3Mac)  CC=gcc-3.3; CPL=g++;  FC=g77       ;;
           gcc4)     CC=gcc;   CPL=g++;    FC=gfortran  ;;
        esac;;
esac

if [ "$compiler_version" != "none" ]; then
  CC="$CC$compiler_version"
  CPL="$CPL$compiler_version"
  FC="$FC$compiler_version"
fi
  
#--------------- WWLINK -----------------------
# Assign wwlink variable --- is this used anymore?
case $compiler in
   sunF90)   WWLINK="shared_solaris" ;;
   GNU)      WWLINK="unshared"       ;;
esac


#--------------- FFLAGS -----------------------
# Write out platform specific ifdef variables.
# These will be inserted into FFLAGS, below.
case $platform in
   sun)        fDefType="-DSUN";;
   linux)      fDefType="-DLIN";;
   cygwin)     fDefType="-DCYGW";;
   mac)        fDefType="-DOSX -DLIN";;
   mingw)      fDefType="-DMINGW";;
esac

# Append -DX11 flag as necessary
if [ "$xLibs" = "X11" ]; then
  fDefType="$fDefType -DX11"
fi
if [ "$xLibs" = "GTK" ]; then
  fDefType="$fDefType -DGTK"
fi

# Assign fortran compilation flags
case $compiler in
   # Note '-C' flag causes some grief on older sun F90 compilers (~v5.0)
   sunF90) FFLAGS="$LOCAL_INCLUDES $fDefType -DF90 $debug_flag -C " ;;
   GNU)    FFLAGS="$LOCAL_INCLUDES $fDefType $debug_flag -fno-automatic";
           case $gnu_version in
             # set -finit-local-zero fro gcc3
             gcc4) FFLAGS="$FFLAGS -DGCC4"            ;;
             *)    FFLAGS="$FFLAGS -finit-local-zero" ;;
           esac
           ;;
esac

if [ "$platform" = "mingw" ] && [ "$xLibs" = "GTK" ]; then
   FFLAGS="$FFLAGS -mwindows -mms-bitfields"
fi

#-------------- CFLAGS ---------------------
# set up paths to c/c++ include files --- append X11 include
# path for X11 builds
case $xLibs in
  X11)  cINCLUDES="$LOCAL_INCLUDES -I$X11INCLUDEDIR";;
  *)    cINCLUDES="$LOCAL_INCLUDES";;
esac

# Append XML include paths, if needed
case $xml_support in
  yes)  cINCLUDES="$cINCLUDES $LIBXML2_INCLUDE";;
  no)   cINCLUDES="$cINCLUDES";;
esac

# assign c/c++ IDFEF flags. These will be inserted into CFLAGS, below.
cDefType="$fDefType"

# Set xsl ifdef flag depending on whether xslt libraries are available
# and XML support is active, 

if [ "$xml_support" = "yes" ] && [ "$xsl_libs_available" = "yes" ]; then
  cDefType="$cDefType -DXSL"
fi

# set up c compilation flags
case $compiler in
   sunF90)  CFLAGS="$cINCLUDES $cDefType $debug_flag ";;
   GNU)     CFLAGS="$cINCLUDES $cDefType $debug_flag ";;
esac

# Add '-mms-bitfields' and '-mwindows' on Mingw+GTK

if [ "$platform" = "mingw" ] && [ "$xLibs" = "GTK" ]; then
   CFLAGS="$CFLAGS -mwindows -mms-bitfields"
fi
 

#------------- ULIBS -------------------------
# Assign library paths/flags
case $platform in
   sun)      ULIBS="-L${SRCdir}/lib ";;
   linux)    ULIBS="-L${SRCdir}/lib ";;
   cygwin)   ULIBS="-L${SRCdir}/lib ";;
   mac)      ULIBS="-L${SRCdir}/lib ";;
   mingw)    ULIBS="-L${SRCdir}/lib -L/usr/local/lib";;
esac

# Append X11 library paths to ULIBS as required
case $xLibs in
  X11) ULIBS="$ULIBS -lxesru -L${XINSTALLDIR}/lib -lX11";;
  GTK) ULIBS="$ULIBS -lgtkesru -L${XINSTALLDIR}";;
  noX) ULIBS="$ULIBS -lnoxesru";;
esac

# Append XML output libararies to ULIBS as required (libxml2 and libstdc++)
case $xml_support in
  yes) ULIBS="$ULIBS -lxml2 -lstdc++";
       # If libxslt is available, link it too
       case $xsl_libs_available in
         "yes") ULIBS="$ULIBS -lxslt ";;
         "no")  ULIBS="$ULIBS";;
         esac;
       # Flag xml for inclusion in bps
       xml_status="include_XML";;
  no)  ULIBS="$ULIBS";
       # Flag xml for exclusion in bps
       xml_status="exclude_XML";;
esac

#-------------- LDFLAGS ------------------------
# What does this do, and how does it differ from platform-specific
# flags set in 'fDefType'?
case $platform in
   mingw)    LD_FLAGS="-DMINGW";;
   *)        LD_FLAGS="";;
esac

#-------------- EXE ------------------------
# Set exe file extention 
case $platform in
   sun)      EXE="";;
   linux)    EXE="";;
   cygwin)   EXE=".exe";;
   mac)      EXE="";;
   mingw)    EXE=".exe";;
#Custom housts follow
   nrn7)     EXE="" ;;
esac

#===========================================
##### End Computer Architecture
#####
##### Create esp-r directory tree 
#===========================================

#---------------------------------------------------------
# Check if installation directories exist, and create
# if necessary
#---------------------------------------------------------
create_espr_dir="no"
# Does top-level installation directory exist?
if [ ! -d $DESTdir ]; then
  # NO! Is script running interactively, or has user specified a 'force?'
  if [ $mode = "interactive" ] && [ "$preserve_espr_dir" == "yes" ] ; then
    # Does user want to create it?
    echo " The esp-r installation directory does not exist. "
    echo " (${DESTdir})"
    A=none
    while [ "$A" != "y" ] && [ "$A" != "n" ]
    do
      echo " "
      echo " Do you wish to create this directory? (y/n) [y]"
      echo " "
      read A
      if [ "$A" = "" ]; then
        A="y"
      fi
    done
    if [ "$A" = "n" ]; then
      create_espr_dir="no"
    else
      create_espr_dir="yes"
      preserve_espr_dir="no"
    fi
  else
    create_espr_dir="yes"
    preserve_espr_dir="no"
  fi  
     
  if [ "$create_espr_dir" = "yes" ]; then
      
    # Attempt to create directory
    mkdir ${DESTdir}
    # Was directory successfully created?
    if [ ! -d ${DESTdir} ]; then
      # No! User may not have write permissions on installation dir.
      # warn, and exit.
      echo " "
      echo " Installation error: Destination directory (${DESTdir})"
      echo " could not be created. Installation aborted."
      echo " "
      exit
    fi
    # This flag will be used later when the script checks
    # if the directory tree is correct.

  else
  # User doesn't want to create directory, but it doesn't exist.
  # Issue warning and quit.
    echo " "
    echo " Installation error: Destination directory (${DESTdir})"
    echo " does not exist. Installation aborted"
    echo " "
    exit
  fi
fi

# Determine if master path is writable.
if [ ! -w $DESTdir ] || [ ! -d $DESTdir ]; then
  # Warn user and quit.
  echo " "
  echo " Installation error: Cannot write to installation directory:"
  echo " $DESTdir"
  echo " Installation aborted."
  echo " "
  exit
fi

#-----------------------------------------------------------
# Now check if ESP-r directory tree exists. Note: If we
# created the master directory (above), there's no need to prompt
# the user since the directory will obviously be empty. Check
# value of DirCreated variable.
#-----------------------------------------------------------
# Strip trailing space from DESTdir
DESTdir=`echo "$DESTdir" | sed "s/\/$//"`

ESPdir=${DESTdir}/esp-r
ESPbin=${DESTdir}/esp-r/bin
corrupted_tree="no"
if [ "$create_espr_dir" = "no" ]; then
   

     
  if [ ! -d $ESPdir/../bin ]            || 
     [ ! -d $ESPdir/../lib ]            ||
     [ ! -d $ESPdir ]                   ||
     [ ! -d $ESPdir/bin ]               ||
     [ ! -d $ESPdir/climate ]           ||
     [ ! -d $ESPdir/databases ]         ||
     [ ! -d $ESPdir/electric_loads ]    ||
     [ ! -d $ESPdir/lib ]               ||
     [ ! -d $ESPdir/manual ]            ||
     [ ! -d $ESPdir/xsl ]               ||
     [ ! -d $ESPdir/tutorial ]; then

    # ESP-r directory tree does not exist, or has been corrupted.

     corrupted_tree="yes"

     if [ "$create_espr_dir" = "no" ]; then
      echo " "
      echo " The ESP-r directory tree does not exist at ${DESTdir},"
      echo " or may have been corrupted. The following directories are"
      echo " required: "
      echo "    $DESTdir/bin"
      echo "    $DESTdir/bin/Radiance"
      echo "    $DESTdir/lib"
      echo "    $DESTdir/lib/Radiance"
      echo "    $ESPdir"
      echo "    $ESPdir/bin "
      echo "    $ESPdir/climate "
      echo "    $ESPdir/databases "
      echo "    $ESPdir/electric_loads "
      echo "    $ESPdir/lib "
      echo "    $ESPdir/manual "
      echo "    $ESPdir/xsl "
      echo "    $ESPdir/tutorial "
      echo " " 
    fi

    if [ "$mode" = "interactive" ] && [ "$preserve_espr_dir" = "yes" ] ; then

      # IF we've created the destination directory, there's
      # no need to warn the user.

      A=none
      while [ "$A" != "y" ] && [ "$A" != "n" ]
      do
        echo " Do you wish to create the ESP-r directory tree at"
        echo " this location? (y/n) [y]"
        read A
        if [ "$A" = "" ]; then
          A="y"
        fi
      done
      if [ "$A" = "y" ]; then
        preserve_espr_dir="no"
      else
        preserve_espr_dir="yes"
      fi
    fi
  fi
fi

#--------------------------------------------------------------
#  Now build directory tree, if necessary.
#--------------------------------------------------------------
if [ "$corrupted_tree" = "yes" ] || [ "$create_espr_dir" = "yes" ]; then
  if [ "$preserve_espr_dir" = "yes" ]; then
    echo " "
    echo " Installation error: Will not not overwrite ESP-r "
    echo " directory structure at ${DESTdir}. Installation"
    echo " aborted."
    echo " "
    if [ "$mode" = "silent" ]; then
      echo " Use the '--force' option to overwrite the directory"
      echo " structure. Run 'Install --help' for more information."
      echo " "
      exit
    fi
  fi
  
  # Add  bin, bin/Radiance, lib & lib/Radiance directories.
  # NOTE: Installing these files into the DESTdir location
  # is undesrable, and may lead to system instability. At the 
  # very least, we're polluting the user's home directory, and 
  # might potentially cause portions of the system to fail if the 
  # user specifies a /usr or /usr/local installation path!
  # An alternative should be sought as soon as possible!
  echo -n " Creating ESP-r directory tree..."
  
  if [ ! -d $DESTdir/bin ]; then
    mkdir $DESTdir/bin
  fi

  if [ ! -d $DESTdir/bin/Radiance ]; then
    mkdir $DESTdir/bin/Radiance
  fi

  if [ ! -d $DESTdir/lib ]; then
    mkdir $DESTdir/lib
  fi

  if [ ! -d $DESTdir/lib/Radiance ]; then
    mkdir $DESTdir/lib/Radiance
  fi

  rm -fr $ESPdir
  mkdir $ESPdir
  mkdir $ESPdir/bin
  mkdir $ESPdir/climate
  mkdir $ESPdir/databases
  mkdir $ESPdir/electric_loads
  mkdir $ESPdir/lib
  mkdir $ESPdir/manual
  mkdir $ESPdir/xsl
  mkdir $ESPdir/tutorial
  echo "Done."
  echo " "
fi

#--------------------------------------------------------------
# End ESP-r directory management
#--------------------------------------------------------------

####### create an installdir.h file so startup.F knows where to look
  echo "c this is where esp-r is installed" > ${SRCdir}/include/espinstalldir.h
  echo "       character instpath*48" >> ${SRCdir}/include/espinstalldir.h
  echo "       instpath = '${ESPdir}'" >> ${SRCdir}/include/espinstalldir.h


##### Initiate make:
if [ "${make_msg_file}" = "" ]; then
  echo " "
  echo " Intended shell command:"
  echo " make MCTYPE=${MCTYPE} MCC=${CC} MCPL=${CPL} MFC=${FC} DESTdir=${DESTdir} ESPdir=${ESPdir} WWLINK=${WWLINK} EXE="${EXE}" XINSTALLDIR=${XINSTALLDIR} CFLAGS=${CFLAGS} FFLAGS=${FFLAGS} LD_FLAGS=${LD_FLAGS} ULIBS=${ULIBS} xml_status=${xml_status} $targets"
  echo " "
  echo " where the $xlibs libraries are in ${XINSTALLDIR}"
fi
  
  
  
    
if [ "$mode" = "interactive" ]; then
  A=x
  while [ "$A" != y ] && [ "$A" != n ] && [ "$A" != "" ]
  do
    echo " Proceed with installation of esp-r modules (y/n) [y]?"
    read A
  done

  if [ "$A" = "n" ]; then
    echo " Aborting ESP-r installation. "
    echo " "
    exit
  fi 
fi




echo " Compiling ESP-r system.  This may take some time."

targets="${targets} end_of_exes"
# Build each executable, 1 by 1.
while [ "${targets}" != "end_of_exes" ]
do
   # The following chunk of code is an ugly, but sh-compatable
   # string-based shift register.

   # strip any leading spaces
   targets=`echo $targets | sed 's/^ *//g'`

   # Extract leading execuitable from targets
   target=`echo $targets | sed 's/ .*$//g'`

   # Now remove exe from targets

   targets=`echo $targets | sed 's/^[^ ]* //g'`

   # Let user know what's going on
   echo -n "    - building ${target}..."

   # Empty 'make_msg_file' if it's defined
  if [ "$make_msg_file" != "" ]; then
    echo "Compilation of $target on `date`"> $make_msg_file
  fi

   # Delete existing binary
   case $target in
     libX11) result="${SRCdir}/lib/libxesru.a"    ;;
     libGTK) result="${SRCdir}/lib/libgtkesru.a"  ;;
     libnoX) result="${SRCdir}/lib/libnoxesru.a"  ;;
     ecnv)   result="${SRCdir}/esrucnv/ecnv${EXE}"      ;;
     vew)    result="${SRCdir}/esruvew/viewer${EXE}"      ;;
     *)      result="${SRCdir}/esru${target}/$target${EXE}"   ;;
   esac

   if [ -r $result ]; then
     if [ "${make_msg_file}" != "" ]; then
       echo " Deleting $result " >> $make_msg_file
       rm $result >> $make_msg_file 2>&1
     else
       echo " Deleting $result "
       rm $result
     fi
   fi
   
   # execute make with redirection, if make_msg_file specified. Otherwise
   # display messages in buffer.
   if [ "${make_msg_file}" != "" ]; then
      echo " Make command:"             >>$make_msg_file
      echo " -------------"             >>$make_msg_file
      echo "   make MCTYPE=${MCTYPE} MCC=${CC} MCPL=${CPL} MFC=${FC} DESTdir="${DESTdir}" ESPdir="${ESPdir}" WWLINK="${WWLINK}" EXE="${EXE}" XINSTALLDIR="${XINSTALLDIR}" CFLAGS="${CFLAGS}" FFLAGS="${FFLAGS}" LD_FLAGS="${LD_FLAGS}" ULIBS="${ULIBS}" xml_status="${xml_status}" -f Makefile  ${target} >>$make_msg_file 2>&1 " >> $make_msg_file
      echo " "                          >>$make_msg_file
      echo " Make output:"              >>$make_msg_file
      echo " ------------"                    >>$make_msg_file
      make MCTYPE=${MCTYPE} MCC=${CC} MCPL=${CPL} MFC=${FC} DESTdir="${DESTdir}" ESPdir="${ESPdir}" WWLINK="${WWLINK}" EXE="${EXE}" XINSTALLDIR="${XINSTALLDIR}" CFLAGS="${CFLAGS}" FFLAGS="${FFLAGS}" LD_FLAGS="${LD_FLAGS}" ULIBS="${ULIBS}" xml_status="${xml_status}" -f Makefile  ${target} >>$make_msg_file 2>&1
   else
      make MCTYPE=${MCTYPE} MCC=${CC} MCPL=${CPL} MFC=${FC} DESTdir="${DESTdir}" ESPdir="${ESPdir}" WWLINK="${WWLINK}" EXE="${EXE}" XINSTALLDIR="${XINSTALLDIR}" CFLAGS="${CFLAGS}" FFLAGS="${FFLAGS}" LD_FLAGS="${LD_FLAGS}" ULIBS="${ULIBS}" xml_status="${xml_status}" -f Makefile  ${target}
   fi

   # was target built successfully?
   if [  ! -r $result ]; then
      #ignore if a clean command was invoked. 
      if [ "$target" != "clean" ]; then
        # file has not changed --- installation failed.
        # Warn user and quit.
        echo " "
        echo " ERROR: could not build executable ${target}! "

        # If redirection in use, dump messages.
        if [ "${make_msg_file}" != "" ]; then
           echo " Compilation messages follow: "
           echo " ----------------------------------------- "
           cat ${make_msg_file}
           echo " ----------------------------------------- "
           rm -f ${make_msg_file}
        fi

        echo " Install: Fatal error. "
        echo " Executable ${target} could not be built!"
        echo " Installation aborted."
        echo " "
        exit
      fi
   fi
   # delete message file, if necessary
   if [ "${make_msg_file}" != "" ]; then
      rm -f ${make_msg_file}
   fi
   echo " Done."
done

#### End Initiate make
echo " ESP-r binaries compiled successfully"
echo " " 
#### Declare functions to help manage conversion of database, climate files.

#=====================================================================
clm_convert()  # converts climate dbs from iwec.a to binary formats
#=====================================================================
# Arg_1 = target file
# Arg_2 = source file
# ARG_3 = keyword indicating if file name should be decoded.
{
  if [ "$3" = "decode_file" ]; then
    short=`echo $1 | sed 's/^.*\///g'`
    # If first part of file name is less than 3 characters, assume it is 
    # a country.
    country=`echo $short | sed 's/^\([A-Za-z]\{,3\}\)_.*$/\1/;'`
    # Check if country has matched?
    match=`echo $short   | sed 's/^\([A-Za-z]\{,3\}\)_.*$/YES/;'`
    if [ "$match" != "YES" ]; then
      country=""
    fi
    
    # Now strip country from short
    short=`echo $short | sed s/^$country\_//g;`
    # Convert country to uppercase.
    country=`echo $country | sed 'y/abcdefghijklmnopqrstuvwxyz/ABCDEFGHIJKLMNOPQRSTUVWXYZ/;'`
    
    
    # If second part of file name is less than than 3 characters, assume it is a state or
    # province
    state=`echo $short | sed 's/^\([A-Za-z]\{,3\}\)_.*$/\1/g;'`
    match=`echo $short | sed 's/^\([A-Za-z]\{,3\}\)_.*$/YES/g;'`
    if [ "$match" != "YES" ]; then
      state=""
    fi
    # Now strip state from short
    short=`echo $short | sed s/^$state\_//g;`
    # Convert state to upper case
    state=`echo $state | sed 'y/abcdefghijklmnopqrstuvwxyz/ABCDEFGHIJKLMNOPQRSTUVWXYZ/;'`
    
    # Remainer must be city. Remove IWEC and CWEC extentions
    city=`echo $short | sed 's/iwec\|IWEC//g;'`
    city=`echo $city  | sed 's/cwec\|CWEC//g;'`
    city=`echo $city  | sed 's/igdg\|IGDG//g;'`
      
      
    # Strip trailing underscores or '.'s 
    city=`echo $city | sed 's/_*$//g;'`
    city=`echo $city | sed 's/\.*$//g;'`
    
    # Convert remaining underscores to spaces.
    city=`echo $city | sed 's/_/ /g;'`
    city=`echo $city | sed 's/\./ /g;'`
    if [ "$state" != "" ]; then
      state="$state, "
    fi
    echo -n "    - Converting climate file for $city ($state$country)... "
  else 
    echo -n "    - Converting climate file $1... "
  fi
  
  rm -f $1
  $CLM -mode text -file $1 -act asci2bin silent $2  >/dev/null 2>/dev/null
  
  # Test here to see if climate file was created successfully!
  if [ ! -r $1 ]; then
    echo "Climate file could not be converted."
    warnings="$warnings\nClimate file for $city ($2) could not be converted."
  else 
    echo "Done."
  fi
  
}  
#=====================================================================
# End function   clm_convert()
#=====================================================================
                                                                      
#=====================================================================
materials_db_conv() # Convert ascii binary materials database
#=====================================================================
{
DBdir=$1
ASCdb=$2
MATdb=$3
root=`pwd`
cd $DBdir
rm -f $MATdb >/dev/null 2>&1
echo -n "    - Creating binary materials database from $ASCdb... "
$PRJ -mode text >/dev/null 2>/dev/null <<zzz
b
d
f
$ASCdb
$MATdb
-
-
zzz
cd ${root}
# Optionally test here to see if DB file was actually created.
echo "Done. "
}
#=====================================================================
# End function   materials_db_conv()
#=====================================================================

#=====================================================================
plant_convert()  # converts plant dbs from ascii to binary formats
#=====================================================================
# Arg_1 = target file
# Arg_2 = source file
{
echo -n  "    - Creating binary plant component database from $2..."

rm $1 >/dev/null 2>&1
$PDB -mode text  >/dev/null 2>&1 <<zzz
$1
c
y
a
$2
e
-
zzz

echo "Done."

}

#=====================================================================
# End function  plant_convert()
#=====================================================================

#=====================================================================
prof_convert()  # converts profile dbs from ascii to binary formats
#=====================================================================
# Arg_1 = target file
# Arg_2 = source file
{
echo -n "    - Creating event profile dabases from $2... "
rm -f $1
$PRO -mode text  >/dev/null 2>/dev/null <<zzz
$1
y
~
b
$2
$1
y
-
zzz
echo "Done."
}
#=====================================================================
# End function prof_convert()
#=====================================================================

#=====================================================================
rm_svn_folders() 
#=====================================================================
# Arg 1: path to search for .svn folders
{
  find $1 -name "*\.svn" | while read path; do
    rm -fr $path >/dev/null 2>&1 
  done
}
##### Install training, manual & support files.
# Set executables to be the just compiled versions (default to users default
#  if any not found).
BPS=bps
CLM=clm
ISH=ish
PRJ=prj
PRO=pro
PDB=pdb
if [ -f esrubps/bps ] ; then
  BPS=${SRCdir}/esrubps/bps
fi
if [ -f esruclm/clm ] ; then
  CLM=${SRCdir}/esruclm/clm
fi
if [ -f esruish/ish ] ; then
  ISH=${SRCdir}/esruish/ish
fi
if [ -f esruprj/prj ] ; then
  PRJ=${SRCdir}/esruprj/prj
fi
if [ -f esrupro/pro ] ; then
  PRO=${SRCdir}/esrupro/pro
fi
if [ -f esrupdb/pdb ] ; then
  PDB=${SRCdir}/esrupdb/pdb
fi

if [ "$install_training" = "yes" ]; then
  echo -n " Installing default environment file into ${ESPdir}..."
  
  # Create default file for the OS choice.
  if [ ${MCTYPE} = sun ]; then
    echo "*ESP-r Defaults" > ${ESPdir}/default
    echo "*ipth ${ESPdir}" >> ${ESPdir}/default
    echo "*cfg ${ESPdir}/training/basic/cfg/bld_basic.cfg" >> ${ESPdir}/default
    echo "*ctl ${ESPdir}/training/basic/ctl/bld_basic.ctl" >> ${ESPdir}/default
    echo "*mfn ${ESPdir}/training/basic/networks/bld_basic_af1.afn" >> ${ESPdir}/default
    echo "*dfd ${ESPdir}/training/cfd/template.dfd" >> ${ESPdir}/default
    echo "*pnf ${ESPdir}/training/plant/vent_simple/cfg/vent.cfg" >> ${ESPdir}/default
    echo "*res ${ESPdir}/databases/test.res" >> ${ESPdir}/default
    echo "*mfr ${ESPdir}/databases/test.mfr" >> ${ESPdir}/default
    echo "*clm ${ESPdir}/climate/clm67" >> ${ESPdir}/default
    echo "*prs ${ESPdir}/databases/pressc.db1" >> ${ESPdir}/default
    echo "*prm ${ESPdir}/databases/constr.db2" >> ${ESPdir}/default
    echo "*mlc ${ESPdir}/databases/multicon.db2" >> ${ESPdir}/default
    echo "*opt ${ESPdir}/databases/optics.db2" >> ${ESPdir}/default
    echo "*evn ${ESPdir}/databases/profiles.db1" >> ${ESPdir}/default
    echo "*pdb ${ESPdir}/databases/plantc.db1" >> ${ESPdir}/default
    echo "*ecdb ${ESPdir}/databases/elcomp.db1" >> ${ESPdir}/default
    echo "*mcdb ${ESPdir}/databases/mscomp.db1" >> ${ESPdir}/default
    echo "*icdb ${ESPdir}/databases/icons.db1" >> ${ESPdir}/default
    echo "*mldb ${ESPdir}/databases/mould.db1" >> ${ESPdir}/default
    echo "*end" >> ${ESPdir}/default
  elif [ ${MCTYPE} = lin ]; then
    echo "*ESP-r Defaults" > ${ESPdir}/default
    echo "*ipth ${ESPdir}" >> ${ESPdir}/default
    echo "*cfg ${ESPdir}/training/basic/cfg/bld_basic.cfg" >> ${ESPdir}/default
    echo "*ctl ${ESPdir}/training/basic/ctl/bld_basic.ctl" >> ${ESPdir}/default
    echo "*mfn ${ESPdir}/training/basic/networks/bld_basic_af1.afn" >> ${ESPdir}/default
    echo "*dfd ${ESPdir}/training/cfd/template.dfd" >> ${ESPdir}/default
    echo "*pnf ${ESPdir}/training/plant/vent_simple/cfg/vent.cfg" >> ${ESPdir}/default
    echo "*res ${ESPdir}/databases/test.res" >> ${ESPdir}/default
    echo "*mfr ${ESPdir}/databases/test.mfr" >> ${ESPdir}/default
    echo "*clm ${ESPdir}/climate/clm67" >> ${ESPdir}/default
    echo "*prs ${ESPdir}/databases/pressc.db1" >> ${ESPdir}/default
    echo "*prm ${ESPdir}/databases/constr.db2" >> ${ESPdir}/default
    echo "*mlc ${ESPdir}/databases/multicon.db2" >> ${ESPdir}/default
    echo "*opt ${ESPdir}/databases/optics.db2" >> ${ESPdir}/default
    echo "*evn ${ESPdir}/databases/profiles.db1" >> ${ESPdir}/default
    echo "*pdb ${ESPdir}/databases/plantc.db1" >> ${ESPdir}/default
    echo "*ecdb ${ESPdir}/databases/elcomp.db1" >> ${ESPdir}/default
    echo "*mcdb ${ESPdir}/databases/mscomp.db1" >> ${ESPdir}/default
    echo "*icdb ${ESPdir}/databases/icons.db1" >> ${ESPdir}/default
    echo "*mldb ${ESPdir}/databases/mould.db1" >> ${ESPdir}/default
    echo "*end" >> ${ESPdir}/default
  elif [ ${MCTYPE} = cygw ]; then
    echo "*ESP-r Defaults" > ${ESPdir}/default
    echo "*ipth ${ESPdir}" >> ${ESPdir}/default
    echo "*cfg ${ESPdir}/training/basic/cfg/bld_basic.cfg" >> ${ESPdir}/default
    echo "*ctl ${ESPdir}/training/basic/ctl/bld_basic.ctl" >> ${ESPdir}/default
    echo "*mfn ${ESPdir}/training/basic/networks/bld_basic_af1.afn" >> ${ESPdir}/default
    echo "*dfd ${ESPdir}/training/cfd/template.dfd" >> ${ESPdir}/default
    echo "*pnf ${ESPdir}/training/plant/vent_simple/cfg/vent.cfg" >> ${ESPdir}/default
    echo "*res ${ESPdir}/databases/test.res" >> ${ESPdir}/default
    echo "*mfr ${ESPdir}/databases/test.mfr" >> ${ESPdir}/default
    echo "*clm ${ESPdir}/climate/clm67" >> ${ESPdir}/default
    echo "*prs ${ESPdir}/databases/pressc.db1" >> ${ESPdir}/default
    echo "*prm ${ESPdir}/databases/constr.db2" >> ${ESPdir}/default
    echo "*mlc ${ESPdir}/databases/multicon.db2" >> ${ESPdir}/default
    echo "*opt ${ESPdir}/databases/optics.db2" >> ${ESPdir}/default
    echo "*evn ${ESPdir}/databases/profiles.db1" >> ${ESPdir}/default
    echo "*pdb ${ESPdir}/databases/plantc.db1" >> ${ESPdir}/default
    echo "*ecdb ${ESPdir}/databases/elcomp.db1" >> ${ESPdir}/default
    echo "*mcdb ${ESPdir}/databases/mscomp.db1" >> ${ESPdir}/default
    echo "*icdb ${ESPdir}/databases/icons.db1" >> ${ESPdir}/default
    echo "*mldb ${ESPdir}/databases/mould.db1" >> ${ESPdir}/default
    echo "*end" >> ${ESPdir}/default
  elif [ ${MCTYPE} = osx ]; then
    echo "*ESP-r Defaults" > ${ESPdir}/default
    echo "*ipth ${ESPdir}" >> ${ESPdir}/default
    echo "*cfg ${ESPdir}/training/basic/cfg/bld_basic.cfg" >> ${ESPdir}/default
    echo "*ctl ${ESPdir}/training/basic/ctl/bld_basic.ctl" >> ${ESPdir}/default
    echo "*mfn ${ESPdir}/training/basic/networks/bld_basic_af1.afn" >> ${ESPdir}/default
    echo "*dfd ${ESPdir}/training/cfd/template.dfd" >> ${ESPdir}/default
    echo "*pnf ${ESPdir}/training/plant/vent_simple/cfg/vent.cfg" >> ${ESPdir}/default
    echo "*res ${ESPdir}/databases/test.res" >> ${ESPdir}/default
    echo "*mfr ${ESPdir}/databases/test.mfr" >> ${ESPdir}/default
    echo "*clm ${ESPdir}/climate/clm67" >> ${ESPdir}/default
    echo "*prs ${ESPdir}/databases/pressc.db1" >> ${ESPdir}/default
    echo "*prm ${ESPdir}/databases/constr.db2" >> ${ESPdir}/default
    echo "*mlc ${ESPdir}/databases/multicon.db2" >> ${ESPdir}/default
    echo "*opt ${ESPdir}/databases/optics.db2" >> ${ESPdir}/default
    echo "*evn ${ESPdir}/databases/profiles.db1" >> ${ESPdir}/default
    echo "*pdb ${ESPdir}/databases/plantc.db1" >> ${ESPdir}/default
    echo "*ecdb ${ESPdir}/databases/elcomp.db1" >> ${ESPdir}/default
    echo "*mcdb ${ESPdir}/databases/mscomp.db1" >> ${ESPdir}/default
    echo "*icdb ${ESPdir}/databases/icons.db1" >> ${ESPdir}/default
    echo "*mldb ${ESPdir}/databases/mould.db1" >> ${ESPdir}/default
    echo "*end" >> ${ESPdir}/default
  elif [ ${MCTYPE} = mingw ]; then
    echo "*ESP-r Defaults" > ${ESPdir}/default
    echo "*ipth ${ESPdir}" >> ${ESPdir}/default
    echo "*cfg ${ESPdir}/training/basic/cfg/bld_basic.cfg" >> ${ESPdir}/default
    echo "*ctl ${ESPdir}/training/basic/ctl/bld_basic.ctl" >> ${ESPdir}/default
    echo "*mfn ${ESPdir}/training/basic/networks/bld_basic_af1.afn" >> ${ESPdir}/default
    echo "*dfd ${ESPdir}/training/cfd/template.dfd" >> ${ESPdir}/default
    echo "*pnf ${ESPdir}/training/plant/vent_simple/cfg/vent.cfg" >> ${ESPdir}/default
    echo "*res ${ESPdir}/databases/test.res" >> ${ESPdir}/default
    echo "*mfr ${ESPdir}/databases/test.mfr" >> ${ESPdir}/default
    echo "*clm ${ESPdir}/climate/clm67" >> ${ESPdir}/default
    echo "*prs ${ESPdir}/databases/pressc.db1" >> ${ESPdir}/default
    echo "*prm ${ESPdir}/databases/constr.db2" >> ${ESPdir}/default
    echo "*mlc ${ESPdir}/databases/multicon.db2" >> ${ESPdir}/default
    echo "*opt ${ESPdir}/databases/optics.db2" >> ${ESPdir}/default
    echo "*evn ${ESPdir}/databases/profiles.db1" >> ${ESPdir}/default
    echo "*pdb ${ESPdir}/databases/plantc.db1" >> ${ESPdir}/default
    echo "*ecdb ${ESPdir}/databases/elcomp.db1" >> ${ESPdir}/default
    echo "*mcdb ${ESPdir}/databases/mscomp.db1" >> ${ESPdir}/default
    echo "*icdb ${ESPdir}/databases/icons.db1" >> ${ESPdir}/default
    echo "*mldb ${ESPdir}/databases/mould.db1" >> ${ESPdir}/default
    echo "*end" >> ${ESPdir}/default
  fi
  echo " Done".
  echo " " 
  
  echo -n " Installing standard bitmaps into ${DESTdir}/lib... "
  cp ${SRCdir}/bitmaps/*.xbm ${DESTdir}/lib
  echo " Done. "
  echo " "   
  
  echo -n " Removing previous training and validation models... "
  rm -rf ${ESPdir}/training ${ESPdir}/validation
  echo " Done."
  echo " " 
  
  echo " Updating materials and climate databases in training models... "
  cd ${SRCdir}
  materials_db_conv training/cellular_bc/dbs cellular.materials.a cellular.materials
  materials_db_conv training/cellular_contam/dbs cellular.materials.a cellular.materials
  materials_db_conv training/cellular_furn/dbs cellular.materials.a cellular.materials
  materials_db_conv training/cellular_hires/dbs cellular.materials.a cellular.materials
  materials_db_conv training/cellular_shd/dbs cellular.materials.a cellular.materials
  materials_db_conv training/cellular_pv/dbs cellular_pv.materialdb.a cellular_pv.materials
  materials_db_conv training/cellular_hvac/dbs cellular.materials.a cellular.materials
  materials_db_conv training/cellular_natv/dbs cellular.materials.a cellular.materials 
  materials_db_conv training/cellular_flh/dbs cellular.materials.a cellular.materials 
  materials_db_conv training/house/svph/dbs linford.materialdb.a linford.materialdb
  materials_db_conv training/glenview/databases constr.asc constr.db1
  materials_db_conv training/plant/wch/dbs db_prc.a db_prc
  
  
  cd ${SRCdir}/training/cg_ctl/daylit_coef/cfg
  clm_convert dec94.clm dec94_clm.txt

  cd ${SRCdir}
  materials_db_conv training/plant/hvac_vav/dbs materials.db.a materials.db
  materials_db_conv training/constr/tp_sub/dbs tp_sub.material.asci tp_sub.material
  echo " Databases updated."
  echo " " 
  
  echo " Updating materials and climate databases in validation models..."
  
  cd ${SRCdir}/validation/standards/CEN/13791/databases
  clm_convert Cond.clm Cond.clm.a
  clm_convert WM_A.clm WM_A.clm.a
  clm_convert WM_B.clm WM_B.clm.a
  
  cd ${SRCdir}
  materials_db_conv validation/standards/CEN/13791/databases prim.db.a prim.db
  echo " Databases updated."
  echo " " 
  
  echo -n " Copying training and validation models... "
  
  cp -r ${SRCdir}/training ${ESPdir}/training
  rm_svn_folders ${ESPdir}/training
  
  sed -e 's|/usr/esru/esp-r|'"${ESPdir}"'|' ${SRCdir}/training/exemplars > ${ESPdir}/training/exemplars
  
  cp -r ${SRCdir}/validation ${ESPdir}/validation
  rm_svn_folders ${ESPdir}/validation
  sed -e 's|/usr/esru/esp-r|'"${ESPdir}"'|' ${SRCdir}/validation/standards/stds_list > ${ESPdir}/validation/standards/stds_list
     
  echo "Done."
  echo " " 

  echo " Editing training and validation models for current system... "
  
  # Update directory names in training models to reflect DESTdir
  #
  # Scan training and validation folders for configuration files.
  #
  cfgnames=(`find ./training ./validation -name "*.cfg" -print`)
  num_cfg_files=`find ./training ./validation -name "*.cfg" | wc -l`
  
  #
  # For each cfg file check for shading dbs
  #
  filenum=0
  for file in "${cfgnames[@]}"; do
  #  echo FILE: $file
  #                                      
  # Create a list of zone ref numbers and isi files in this cfg file
  # 
    filenum=$((filenum+1))
    echo "    - Processing $filenum of $num_cfg_files models: ${file}... "
    isi=(`egrep '(\*isi\ |\*zon\ )' $file | cut -d# -f1`)
    hits=${#isi[@]}
  #  echo HITS: $hits
    i=0
  #
  # Get the zone number and check if there is a isi file associated 
  # with this zone.  The format of the isi variale is 
  # "*zon  1  *zon  2  *isi  ../zones/xx.shd" and so on where hits 
  # is the number of words in the list isi.
  #
    while [ $((i)) -lt $((hits-2)) ]; do
    if [ ${isi[$((i))]} == "*zon" ]; then
      if [ ${isi[$((i+2))]} == "*isi" ]; then
        echo "        > generating shading file for zone" ${isi[$((i+1))]}
        $ISH -mode text -file ${file:2} -zone ${isi[$((i+1))]} -act update_silent > /dev/null 
        shdfile=${file%/*}/${isi[$((i+3))]}
        mv -f ${shdfile} ${ESPdir}/${shdfile}
      fi
    fi
    i=2+$(($i))
    done
    #              
    # Now update the paths in models to reflect install dir.
    #
    # Note: This approach will not work for models with plant
    #       networks. ESP-r saves the plant database path in
    #       two locations: a) in the .cfg file, and in the
    #       .pln file. prj uses the record in the .cfg file,
    #       while bps references the record in the .pln file.
    #       Thus training models containing plant networks will
    #       bre browsable, but will not run.
    #
    #       This code should either be updated to edit the .pln
    #       file as well, or (preferably) bps should be updated
    #       to reference the plant database record in the cfg
    #       file. 
    #
    sed -e 's|/usr/esru|'"${DESTdir}"'|' ${file} > ${ESPdir}/${file:2}
   
  done
  echo " Editing complete."
  echo " " 
  
  echo -n " Installing manual files..."
  rm -rf ${ESPdir}/manual
  mkdir ${ESPdir}/manual
  cp -r ${SRCdir}/manual/* ${ESPdir}/manual
  rm_svn_folders ${ESPdir}/manual
  echo " Done."
  echo " "
  
  echo -n " Installing tutorial files..."
  rm -rf ${ESPdir}/tutorial
  mkdir ${ESPdir}/tutorial
  cp -r ${SRCdir}/tutorial/* ${ESPdir}/tutorial
  rm_svn_folders ${ESPdir}/tutorial
  echo " Done."
  echo " "
     
     
fi

##### End Install training, manual & tutorial files.

##### Install databases
if [ "$install_dbs" = "yes" ]; then
  echo " Creating binary materials databases..."
  echo -n "    - Removing exising databases... "
  # remove existing binary databases
  rm -f ${DESTdir}/esp-r/databases/*
  rm -f ${DESTdir}/esp-r/climate/clm67
  rm -f ${DESTdir}/esp-r/training/results/test.res
  echo " Done."
  
  # Construction databases. Note constr.db1 and constr.db2 are merely subsets
  # of constr.db3. Perhaps they can be merged into a single file?
  
  materials_db_conv databases constr.db1.a ${DESTdir}/esp-r/databases/constr.db1
  materials_db_conv databases constr.db2.a ${DESTdir}/esp-r/databases/constr.db2
  materials_db_conv databases constr.db3.a ${DESTdir}/esp-r/databases/constr.db3
  materials_db_conv databases north_american.materialdb.a ${DESTdir}/esp-r/databases/north_american.materialdb
  echo " Materials databases created."
  echo " " 
  
  echo " Creating binary event profiles databases... "
  cd ${SRCdir}/databases
  prof_convert ${DESTdir}/esp-r/databases/profiles.db1 profiles.db1.a
  prof_convert ${DESTdir}/esp-r/databases/profiles.db2 profiles.db2.a
   echo " Event profile databases created."
   echo " " 

   echo " Creating binary plant components databases... "
   plant_convert ${DESTdir}/esp-r/databases/plantc.db1 plantc.db1.a
   plant_convert ${DESTdir}/esp-r/databases/plantc.db2 plantc.db2.a
   plant_convert ${DESTdir}/esp-r/databases/plantc.tt plantc.tt.a
   echo " Plant component databases created."
   echo "  "
   
   echo " Creating binary climate databases ..."
   
   cd ${SRCdir}/climate
   cp climatelist ${DESTdir}/esp-r/climate
   sed -e 's|/usr/esru/esp-r|'"${ESPdir}"'|' ${SRCdir}/climate/climatelist > ${ESPdir}/climate/climatelist

   cp README ${DESTdir}/esp-r/climate/Readme
   cp README_IWEC ${DESTdir}/esp-r/climate/Readme_iwec
   
   ls -1 *.a | while read ascii_file; do
     bin_file=`echo $ascii_file | sed 's/\.a$//g;'`
    clm_convert ${DESTdir}/esp-r/climate/$bin_file $ascii_file "decode_file"
   done 
   echo " Climate databases created."
   echo " " 
   
   cd ${SRCdir}/databases
   echo -n " Copying ASCII databases ..."
   cp multicon.db1 multicon.db2 north_american.constrdb optics.db1 optics.db2 mould.db1 pressc.db1 mscomp.db1 *.desc ${DESTdir}/esp-r/databases
   echo "Done."
   echo " " 
   
    #### Sample results: Doesn't seem to work correctly.
    # echo "Creating example binary results database ..."
    # echo " "
    # $BPS -mode text >/dev/null 2>/dev/null <<zzz
    # a
    # d
    # y
    # ${DESTdir}/esp-r/climate/clm67
    # c
    # ${DESTdir}/esp-r/databases/test.res
    # 11 7
    # 17 7
    # y
    # 1
    # *
    # *
    # *
    # *
    # s
    # 
    # example_results
    # y
    # y
    # -
    # -
    # zzz
    #      echo "... done."

fi

##### End Install databases

##### Install and  Clean up

cd ${SRCdir}


###### Strip symbols.
if [ "$clean_up" = "yes" ]; then
  echo -n " Striping debugging symbols... "
  make ESPdir=${ESPdir} EXE=${EXE} strip
  echo "Done."
  echo " " 
fi

###### Install exes
echo -n " Installing executables... "
make ESPdir=${ESPdir} EXE=${EXE} install
echo "Done."
echo " "

# Create ESP-r script
if [ ${MCTYPE} = mingw ]; then
  echo "@rem batch file to start project manager - associate with cfg files" > ${ESPdir}/bin/esp-r.cmd
  echo "start prj -file %1" >> ${ESPdir}/bin/esp-r.cmd
else
  echo "#!/bin/sh" > ${ESPdir}/bin/esp-r
  echo "if [ X$EFONT_0 = X ]; then" >> ${ESPdir}/bin/esp-r
  echo "      EFONT_0=6x12" >> ${ESPdir}/bin/esp-r
  echo "      EFONT_1=6x13" >> ${ESPdir}/bin/esp-r
  echo "      EFONT_2=8x13" >> ${ESPdir}/bin/esp-r
  echo "      EFONT_3=9x15" >> ${ESPdir}/bin/esp-r
  echo "fi" >> ${ESPdir}/bin/esp-r
  echo "prj \$@ &" >> ${ESPdir}/bin/esp-r
  chmod a+x ${ESPdir}/bin/esp-r
fi



echo -n " Creating default esprc file ${ESPdir}/esprc... "
# Create esprc file for the OS choice.
# All of these assignments are very similar, and should be revisited, or
# perhaps replaced with Axel Jacob's new script 
if [ ${MCTYPE} = sun ]; then
  echo "*ESPRC" > ${ESPdir}/esprc
  echo "*gprn,rectangular dump,import" >> ${ESPdir}/esprc
  echo "*tprn,Text dump,/tmp/tx_dump" >> ${ESPdir}/esprc
  echo "*gxwd,screen dump,import -window root" >> ${ESPdir}/esprc
  echo "*cad,CAD package,xzip,ZIP" >> ${ESPdir}/esprc
  echo "*image_display,TIF,xv" >> ${ESPdir}/esprc
  echo "*image_display,XBMP,xv" >> ${ESPdir}/esprc
  echo "*image_display,GIF,xv" >> ${ESPdir}/esprc
  echo "*image_display,XWD,xv" >> ${ESPdir}/esprc
  echo "*tutorial_app,Tutorial,netscape http://www.esru.strath.ac.uk &" >> ${ESPdir}/esprc
  echo "*journal,OFF" >> ${ESPdir}/esprc
  echo "*editor,editor,nedit" >> ${ESPdir}/esprc
  echo "*report_gen,Reporting tool,xfs" >> ${ESPdir}/esprc
  echo "*exemplars,Exemplars,${ESPdir}/training/exemplars" >> ${ESPdir}/esprc
  echo "*validation_stds,Validation standards,${ESPdir}/validation/standards/stds_list" >> ${ESPdir}/esprc
  echo "*db_defaults,Defaults,${ESPdir}/default" >> ${ESPdir}/esprc
  echo "*end" >> ${ESPdir}/esprc
elif [ ${MCTYPE} = lin ]; then
  echo "*ESPRC" > ${ESPdir}/esprc
  echo "*gprn,rectangular dump,import" >> ${ESPdir}/esprc
  echo "*tprn,Text dump,/tmp/tx_dump" >> ${ESPdir}/esprc
  echo "*gxwd,screen dump,import -window root" >> ${ESPdir}/esprc
  echo "*cad,CAD package,xzip,ZIP" >> ${ESPdir}/esprc
  echo "*image_display,TIF,xv" >> ${ESPdir}/esprc
  echo "*image_display,XBMP,xv" >> ${ESPdir}/esprc
  echo "*image_display,GIF,xv" >> ${ESPdir}/esprc
  echo "*image_display,XWD,xv" >> ${ESPdir}/esprc
  echo "*tutorial_app,Tutorial,netscape http://www.esru.strath.ac.uk &" >> ${ESPdir}/esprc
  echo "*journal,OFF" >> ${ESPdir}/esprc
  echo "*editor,editor,nedit" >> ${ESPdir}/esprc
  echo "*report_gen,Reporting tool,xfs" >> ${ESPdir}/esprc
  echo "*exemplars,Exemplars,${ESPdir}/training/exemplars" >> ${ESPdir}/esprc
  echo "*validation_stds,Validation standards,${ESPdir}/validation/standards/stds_list" >> ${ESPdir}/esprc
  echo "*db_defaults,Defaults,${ESPdir}/default" >> ${ESPdir}/esprc
  echo "*end" >> ${ESPdir}/esprc
elif [ ${MCTYPE} = cygw ]; then
  echo "*ESPRC" > ${ESPdir}/esprc
  echo "*gprn,rectangular dump,import" >> ${ESPdir}/esprc
  echo "*tprn,Text dump,/tmp/tx_dump" >> ${ESPdir}/esprc
  echo "*gxwd,screen dump,import -window root" >> ${ESPdir}/esprc
  echo "*cad,CAD package,xzip,ZIP" >> ${ESPdir}/esprc
  echo "*image_display,TIF,xv" >> ${ESPdir}/esprc
  echo "*image_display,XBMP,xv" >> ${ESPdir}/esprc
  echo "*image_display,GIF,xv" >> ${ESPdir}/esprc
  echo "*image_display,XWD,xv" >> ${ESPdir}/esprc
  echo "*tutorial_app,Tutorial,netscape http://www.esru.strath.ac.uk &" >> ${ESPdir}/esprc
  echo "*journal,OFF" >> ${ESPdir}/esprc
  echo "*editor,editor,nedit" >> ${ESPdir}/esprc
  echo "*report_gen,Reporting tool,xfs" >> ${ESPdir}/esprc
  echo "*exemplars,Exemplars,${ESPdir}/training/exemplars" >> ${ESPdir}/esprc
  echo "*validation_stds,Validation standards,${ESPdir}/validation/standards/stds_list" >> ${ESPdir}/esprc
  echo "*db_defaults,Defaults,${ESPdir}/default" >> ${ESPdir}/esprc
  echo "*end" >> ${ESPdir}/esprc
elif [ ${MCTYPE} = osx ]; then
  echo "*ESPRC" > ${ESPdir}/esprc
  echo "*gprn,rectangular dump,import" >> ${ESPdir}/esprc
  echo "*tprn,Text dump,/tmp/tx_dump" >> ${ESPdir}/esprc
  echo "*gxwd,screen dump,import -window root" >> ${ESPdir}/esprc
  echo "*cad,CAD package,xzip,ZIP" >> ${ESPdir}/esprc
  echo "*image_display,TIF,xv" >> ${ESPdir}/esprc
  echo "*image_display,XBMP,xv" >> ${ESPdir}/esprc
  echo "*image_display,GIF,xv" >> ${ESPdir}/esprc
  echo "*image_display,XWD,xv" >> ${ESPdir}/esprc
  echo "*tutorial_app,Tutorial,netscape http://www.esru.strath.ac.uk &" >> ${ESPdir}/esprc
  echo "*journal,OFF" >> ${ESPdir}/esprc
  echo "*editor,editor,nedit" >> ${ESPdir}/esprc
  echo "*report_gen,Reporting tool,xfs" >> ${ESPdir}/esprc
  echo "*exemplars,Exemplars,${ESPdir}/training/exemplars" >> ${ESPdir}/esprc
  echo "*validation_stds,Validation standards,${ESPdir}/validation/standards/stds_list" >> ${ESPdir}/esprc
  echo "*db_defaults,Defaults,${ESPdir}/default" >> ${ESPdir}/esprc
  echo "*end" >> ${ESPdir}/esprc
elif [ ${MCTYPE} = mingw ]; then
  echo "*ESPRC" > ${ESPdir}/esprc
  echo "*gprn,rectangular dump,import" >> ${ESPdir}/esprc
  echo "*tprn,Text dump,/tmp/tx_dump" >> ${ESPdir}/esprc
  echo "*gxwd,screen dump,import -window root" >> ${ESPdir}/esprc
  echo "*cad,CAD package,xzip,ZIP" >> ${ESPdir}/esprc
  echo "*image_display,TIF,iexplore.exe" >> ${ESPdir}/esprc
  echo "*image_display,XBMP,iexplore.exe" >> ${ESPdir}/esprc
  echo "*image_display,GIF,iexplore.exe" >> ${ESPdir}/esprc
  echo "*image_display,XWD,iexplore.exe" >> ${ESPdir}/esprc
  echo "*tutorial_app,Tutorial,iexplore.exe http://www.esru.strath.ac.uk &" >> ${ESPdir}/esprc
  echo "*journal,OFF" >> ${ESPdir}/esprc
  echo "*editor,editor,wordpad.exe" >> ${ESPdir}/esprc
  echo "*report_gen,Reporting tool,xfs" >> ${ESPdir}/esprc
  echo "*exemplars,Exemplars,${ESPdir}/training/exemplars" >> ${ESPdir}/esprc
  echo "*validation_stds,Validation standards,${ESPdir}/validation/standards/stds_list" >> ${ESPdir}/esprc
  echo "*db_defaults,Defaults,${ESPdir}/default" >> ${ESPdir}/esprc
  echo "*end" >> ${ESPdir}/esprc
fi
echo "Done."
echo " " 


##### If xml support requested install the XSLT files.
if [ "$xml_support" = "yes" ]; then
echo -n " Installing xslt files..."
cp ${SRCdir}/cetc/h3kreports/xsl/*.xsl ${DESTdir}/esp-r/xsl
echo "Done" 
echo " "  
fi



#### Delete temporary files 
if [ "$clean_up" = "yes" ]; then
  echo -n " Deleting temproary files... "
  make ESPdir=${ESPdir} EXE=${EXE} clean                >/dev/null 2>&1
  rm -f training/glenview/databases/constr.db1          >/dev/null 2>&1
  rm -f training/cellular_furn/dbs/cellular.materials   >/dev/null 2>&1
  rm -f training/cellular_hires/dbs/cellular.materials  >/dev/null 2>&1
  rm -f training/cellular_contam/dbs/cellular.materials >/dev/null 2>&1
  rm -f training/cellular_hvac/dbs/cellular.materials   >/dev/null 2>&1
  rm -f training/cellular_flh/dbs/cellular.materials    >/dev/null 2>&1
  rm -f training/cellular_natv/dbs/cellular.materials   >/dev/null 2>&1
  rm -f training/cellular_bc/dbs/cellular.materials     >/dev/null 2>&1
  rm -f training/house/svph/dbs/linford.materialdb      >/dev/null 2>&1
  rm -f training/cellular_shd/dbs/cellular.materials    >/dev/null 2>&1
  rm -f training/glenview/databases/constr.db1          >/dev/null 2>&1
  echo "Done."
  echo " " 
fi

echo " Installation complete.  Please consult file ${SRCdir}/Readme."
echo " "
echo " NOTE: Be sure that you have updated your PATH environment"
echo "       to include directives for the location of the ESP-r"
echo "       executables. You should ensure that: "
echo "       "${ESPdir}"/bin"
echo "       is included in the definition."
echo " "

exit

