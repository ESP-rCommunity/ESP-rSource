#!/bin/bash
## SAPP 2009 Project File

# Script to generate non-primitive support files for SAPP models
# This script can be run with the following arguments 

# automatic    = automatically generates all support files ,climate files
#                and scripts to run on super-computer 

# model        = automatically generates all support files and not
#                climate files

# climate      = looks for climate files in standard location and copies
#                ascii version for making up SPSS input files

# hpc          = generates scripts to run on super-computer
# no arguments = prompts user for action 
arg='null'
arg_1='null'
arg_2='null'
Input0='n'
Input1='n'
Input2='n'
Input3='n'
Input4='n'
Input5='n'
Input6='n'
Input7='n'
Input8='n'
Input9='n'
InputA='y' # Multiple linear regression program is always compiled

if [ $# != 0 ]; then
  arg=$1
fi

if [ $arg == 'null' ] ; then
  echo 'Choose how you want to perform these tasks'
  echo 'Automatically [a]'
  echo 'Interactivelly [i]'
  echo 'Abort [any other key]'
  echo 'Note that automatic will perform'
  echo 'both model and climate specific tasks'
  read B
  arg_1='automatic' # init
  if [ $B == 'a' ] ; then
    arg_1='automatic'
  elif [ $B == 'i' ] ; then
    arg_2='interactive'
  else
    exit
  fi
elif [ $arg == 'model' ] ; then
  arg_1='model'
elif [ $arg == 'climate' ] ; then
  arg_1='climate'
elif [ $arg == 'automatic' ] ; then
  arg_1='automatic'
elif [ $arg == 'hpc' ] ; then
  arg_1='hpc'
fi

if [ $arg_1 == 'automatic' ] || [ $arg_1 == 'model' ] \
|| [ $arg_1 == 'climate' ] || [ $arg_1 == 'hpc' ] ; then
  echo "Running prerun_tasks"  
  Input0='y'
  Input1='y'
  Input2='y'
  Input3='y'
  Input4='y'
  Input5='y'
  Input6='y'
  Input7='y'
  Input8='y'
  Input9='y'
fi

##########################
## Model Specific Tasks ##
##########################
# Copy base line model to tmp directory
cp ../base_prototype/zones/* ../tmp/models/zones
cp ../base_prototype/dbs/* ../tmp/models/dbs
cp ../base_prototype/ctl/* ../tmp/models/ctl
cp ../base_prototype/cfg/*.cnn ../tmp/models/cfg

if [ $arg_1 == 'model' ] || [ $arg_1 == 'automatic' ] ; then
  # Setup number of permutations of each design parameter
  # If following parameters are changed in this file also make
  # the same change in cfg_maker
  XX=5 # Exposure
  II=5 # Insulation level
  AA=5 # Air tightness
  CC=2 # Position of thermal capacity
  SS=3 # Solar ingress
  OO=5 # Occupant density
  LL=5 # Living area fraction

  # The following variables are used for changing model parameters and
  # may be modified for changing the grand model data set
  ############# A permutations
  # Air change rates for A permutation number 2 and 3
  # A2 is the integer part and AT2 is the fractional part e.g.
  # if A2=1 ; AT2=0 the real value is 1.0
  A2=0 ; AT2=25 # 0.25
  A3=0 ; AT3=65 # 0.65
  A4=1 ; AT4=00 # 1.00
  A5=1 ; AT5=50 # 1.50

  ############# S permutations
  # Bottom coordinate of rectangular windows 
  Sol2=0 ; SolT2=900 # 0.900
  Sol3=0 ; SolT3=500 # 0.500

  ############# O permutations
  # Sensible and latent gains from occupants 
  # Occ1 to Occ4 represent different occupancy gains
  Occ1S2=160  # to replace 85 in liv and nliv
  Occ2S2=145  # to replace 115 in liv and nliv

  Occ1S3=180 
  Occ2S3=170 

  Occ1S4=200 
  Occ2S4=215 

  Occ1S5=215 
  Occ2S5=250 

  ############# L permutations
  # This changes the coordinates of two points in liv and nliv geo files
  ##### IMPORTANT #####
  # If living area fractions are changed here also change the relevant awk sections in 3.proto_sim and 3.proto_sim_pp
  GeoA2=3 ; GeoB2=79000 ; GeoC2=5 ; GeoD2=69000 # ='3.79000     5.69000' making living area fraction = 0.30
  GeoA3=2 ; GeoB3=84000 ; GeoC3=6 ; GeoD3=64000 # ='2.84000     6.64000' making living area fraction = 0.35
  GeoA4=1 ; GeoB4=89000 ; GeoC4=7 ; GeoD4=59000 # ='1.89000     7.59000' making living area fraction = 0.40
  GeoA5=0 ; GeoB5=10000 ; GeoC5=9 ; GeoD5=38000 # ='0.10000     9.38000' making living area fraction = 0.50

  if [ $arg_2 == 'interactive' ] ; then
    echo "Make geometry S1L1 and shading files? [y/n]"
    read Input0
  fi
  if [ $Input0 == 'y' ] ; then
    echo "Making geometry S1L1 and shading files"
    rm -f *.geo *.shd *.shda
    cp ../tmp/models/zones/liv_shd.file ../tmp/models/zones/livS1.shda
    cp ../tmp/models/zones/nliv_shd.file ../tmp/models/zones/nlivS1.shda
    for x in `seq 1 $XX`
    do
      cp '../tmp/models/zones/livX'$x'_geo.file' '../tmp/models/zones/livX'$x'S1L1.geo'
      cp '../tmp/models/zones/nlivX'$x'_geo.file' '../tmp/models/zones/nlivX'$x'S1L1.geo'
    done
  fi

  if [ $arg_2 == 'interactive' ] ; then
    echo "Make constructions files? [y/n]"
    read Input1
  fi
  if [ $Input1 == 'y' ] ; then
    for i in `seq 1 $II` ; #  I permutations
    do
      for c in `seq 1 $CC` ; # C permutations
      do
        # make sure con file is present
        touch '../tmp/models/zones/livI'$i'C'$c'.con' '../tmp/models/zones/livI'$i'C'$c'.tmc' '../tmp/models/zones/nlivI'$i'C'$c'.con' '../tmp/models/zones/nlivI'$i'C'$c'.tmc'
cd ../tmp/models/cfg
prj -mode text -file 'X1I'$i'A1C'$c'S1O1L1.cfg'  << XXX
n
m
c
b
a
b
-
y
y
y
b
b
-
y
y
y
-
-
-
-
XXX
cd ../../../gen_prototype
      done
    done
  fi

  # the same shading db will be used for all models if they have the same S number
  echo " "
  if [ $arg_2 == 'interactive' ] ; then
    echo "Make shading databases? [y/n]" 
    read Input3
  fi
  if [ $Input3 == 'y' ] ; then
    cd ../tmp/models/cfg
    ish -mode text -file X1I1A1C1S1O1L1.cfg -zone living -act useupdate_silent 
    ish -mode text -file X1I1A1C1S1O1L1.cfg -zone non-living -act useupdate_silent 
    cd ../../../gen_prototype
  fi
  echo "Successfully created geometry S1L1 and shading files"
  echo "Successfully created con and tmc files"
  echo "Successfully created shd databases"

  echo " "
  if [ $arg_2 == 'interactive' ] ; then
    echo "Make A (air tightness) permutations [y/n]"
    read Input4
  fi
  if [ $Input4 == 'y' ] ; then
    rm -f ../zones/*.opr
    cp ../tmp/models/zones/liv.operations ../tmp/models/zones/livA1O1.opr
    cp ../tmp/models/zones/nliv.operations ../tmp/models/zones/nlivA1O1.opr
    for a in `seq 2 $AA`
    do
      string=$[A$a]'.'$[AT$a]
      sed s/'0, 24,    0.100    0.000    0    0.000'/'0, 24,    '$string'0    0.000    0    0.000'/ ../tmp/models/zones/livA1O1.opr > '../tmp/models/zones/livA'$a'O1.opr'
      sed s/'0, 24,    0.100    0.000    0    0.000'/'0, 24,    '$string'0    0.000    0    0.000'/ ../tmp/models/zones/nlivA1O1.opr > '../tmp/models/zones/nlivA'$a'O1.opr'
    done
  fi
  echo "Successfully created geometry S1L1 and shading files"
  echo "Successfully created con and tmc files"
  echo "Successfully created shd databases"
  echo "Successfully created A (air tightness) permutations"

  echo " "
  if [ $arg_2 == 'interactive' ] ; then
    echo "Make S (solar ingress) permutations? [y/n]"
    read Input5
  fi
  if [ $Input5 == 'y' ] ; then
    for x in `seq 1 $XX`
    do
      for s in `seq 2 $SS`
      do
        # Edit geometry files 
        string=$[Sol$s]'.'$[SolT$s]
        sed s/'1.200'/$string/ '../tmp/models/zones/livX'$x'S1L1.geo'  > '../tmp/models/zones/livX'$x'S'$s'L1.geo'
        sed s/'1.200'/$string/ '../tmp/models/zones/nlivX'$x'S1L1.geo'  > '../tmp/models/zones/nlivX'$x'S'$s'L1.geo'

        # Copy shading files
        cp ../tmp/models/zones/livS1.shd '../tmp/models/zones/livS'$s'.shd'
        cp ../tmp/models/zones/nlivS1.shd '../tmp/models/zones/nlivS'$s'.shd'

        # run shading analysis (but only for one set of X permutations)
        if [ $x -eq 1 ] ; then
          cd ../tmp/models/cfg
          ish -mode text -file 'X1I1A1C1S'$s'O1L1.cfg' -zone living -act useupdate_silent 
          ish -mode text -file 'X1I1A1C1S'$s'O1L1.cfg' -zone non-living -act useupdate_silent 
          cd ../../../gen_prototype
        fi
      done
    done
  fi
  echo "Successfully created geometry S1L1 and shading files"
  echo "Successfully created con and tmc files"
  echo "Successfully created shd databases"
  echo "Successfully created A (air tightness) permutations"
  echo "Successfully created S (solar ingress) permutations"
  echo " "
  if [ $arg_2 == 'interactive' ] ; then
    echo "Make O (occupancy) permutations? [y/n]"
    read Input6
  fi
  if [ $Input6 == 'y' ] ; then
    for a in `seq 1 $AA`
    do
      for o in `seq 2 $OO`
      do
        # Make changes in opr files for liv
        stringS=$[Occ1S$o] 
        sed s/'85'/$stringS/ '../tmp/models/zones/livA'$a'O1.opr' > temp.0

        stringS=$[Occ2S$o] 
        sed s/'115'/$stringS/ temp.0 > '../tmp/models/zones/livA'$a'O'$o'.opr'

        # Make changes in opr files for nliv
        stringS=$[Occ1S$o] 
        sed s/'85'/$stringS/ '../tmp/models/zones/nlivA'$a'O1.opr' > temp.0

        stringS=$[Occ2S$o] 
        sed s/'115'/$stringS/ temp.0 > '../tmp/models/zones/nlivA'$a'O'$o'.opr'
      done
    done
  fi
  echo "Successfully created O (occupancy) permutations"
  echo " "
  if [ $arg_2 == 'interactive' ] ; then
    echo "Make L (living area fraction) permutations? [y/n]"
    read Input7
  fi
  if [ $Input7 == 'y' ] ; then
    for x in `seq 1 $XX`
    do
      for s in `seq 1 $SS`
      do
        for l in `seq 2 $LL`
        do
          string1=$[GeoA$l]'.'$[GeoB$l] 
	  string2=$[GeoC$l]'.'$[GeoD$l]
          sed s/'4.74000     4.74000'/$string1'     '$string2/ '../tmp/models/zones/livX'$x'S'$s'L1.geo' > '../tmp/models/zones/livX'$x'S'$s'L'$l'.geo'
          sed s/'4.74000     4.74000'/$string1'     '$string2/ '../tmp/models/zones/nlivX'$x'S'$s'L1.geo' > '../tmp/models/zones/nlivX'$x'S'$s'L'$l'.geo'
        done
      done
    done
  fi

  rm -f temp.*
  echo "Successfully created L (living area fraction) permutations"
fi

############################
## Climate Specific Tasks ##
############################
# Copies climate files from location where ESP-r is installed to ../dbs
# Makes ascii versions of the above copied binary files
# Makes summary climate information file for all the climates
# Finally it deletes the ascii files
if [ $arg_1 == 'climate' ] || [ $arg_1 == 'automatic' ] ; then
  if [ $arg_2 == 'interactive' ] ; then
    echo "Make climate files? [y/n]"
    read Input8
  fi
  if [ $Input8 == 'y' ] ; then

    declare -i len slen      # declare integer length 

    # Generate climate binary files for all *.clm.a files in dbs folder
    for clmfile_a in `ls ../climate/ESP-r_weather/*.clm.a`
    do 
      len=${#clmfile_a}
      slen=len-6
      bin_clm_file='../tmp/models/dbs/'${clmfile_a:25:$slen-25}'.bin'
      ascii_file=$bin_clm_file'.ascii'
clm -mode text << XXX
*
$bin_clm_file
k
b
y
$clmfile_a
y
y
-
XXX

      # Ensure information is comma separated so that awk can process data
clm -file $bin_clm_file -mode text << XXX

^
e
j
a
$ascii_file
y
-
XXX
    done

    # Now generate climate summary file i.e. looks at every file with a
    # clm.a extension and write the following summary data to file 
    # clm.summary.data.a
    # clm.a file name
    # db_T, RDir, RDif, WVel, db_T*db_T, RDir*RDir, RDif*RDif, WVel*WVel, 
    # db_T*RDir, db_T*RDif, db_T*WVel, RDir*RDif, RDir*WVel, RDif*WVel
    rm -f ../results/clm.summary.data.a
    touch ../results/clm.summary.data.a
    for climatefile in `ls ../tmp/models/dbs/*.ascii`
    do
      # remove leading path
      len=${#climatefile}
      clm_file=${climatefile:26:$len-10-26}
      echo $clm_file >> ../results/clm.summary.data.a

      # Generate independant variables and their products etc for
      # regression analysis
      awk '
        BEGIN{
          FS=","

          # Month start and end record numbers
          M_SR[1] =1+13       ; M_ER[1] =M_SR[1] +31*25-1 ; N[1] =31
          M_SR[2] =1+M_ER[1]  ; M_ER[2] =M_SR[2] +28*25-1 ; N[2] =28
          M_SR[3] =1+M_ER[2]  ; M_ER[3] =M_SR[3] +31*25-1 ; N[3] =31
          M_SR[4] =1+M_ER[3]  ; M_ER[4] =M_SR[4] +30*25-1 ; N[4] =30
          M_SR[5] =1+M_ER[4]  ; M_ER[5] =M_SR[5] +31*25-1 ; N[5] =31
          M_SR[6] =1+M_ER[5]  ; M_ER[6] =M_SR[6] +30*25-1 ; N[6] =30
          M_SR[7] =1+M_ER[6]  ; M_ER[7] =M_SR[7] +31*25-1 ; N[7] =31
          M_SR[8] =1+M_ER[7]  ; M_ER[8] =M_SR[8] +31*25-1 ; N[8] =31
          M_SR[9] =1+M_ER[8]  ; M_ER[9] =M_SR[9] +30*25-1 ; N[9] =30
          M_SR[10]=1+M_ER[9]  ; M_ER[10]=M_SR[10]+31*25-1 ; N[10]=31
          M_SR[11]=1+M_ER[10] ; M_ER[11]=M_SR[11]+30*25-1 ; N[11]=30
          M_SR[12]=1+M_ER[11] ; M_ER[12]=M_SR[12]+31*25-1 ; N[12]=31

          # init
          RDif[i]=0
          db_T[i]=0
          RDir[i]=0
          WVel[i]=0
        }
        {
          if (NF == 6 )
          {
            for (i=1;i<=12;i++)
            {
              if (NR>=M_SR[i] && NR<=M_ER[i])
              {
                RDif[i]=RDif[i]+$1
                db_T[i]=db_T[i]+$2/10
                RDir[i]=RDir[i]+$3
                WVel[i]=WVel[i]+$4/10
              }
            }
          }
        }
        END{
          for (i=1;i<=12;i++)
          {
            RDif[i]=RDif[i]/(N[i]*24)
            db_T[i]=db_T[i]/(N[i]*24)
            RDir[i]=RDir[i]/(N[i]*24)
            WVel[i]=WVel[i]/(N[i]*24)
            # print db_T[i]","RDir[i]","RDif[i]","WVel[i]","db_T[i]*db_T[i]","RDir[i]*RDir[i]","RDif[i]*RDif[i]","WVel[i]*WVel[i]","db_T[i]*RDir[i]","db_T[i]*RDif[i]","db_T[i]*WVel[i]","RDir[i]*RDif[i]","RDir[i]*WVel[i]","RDif[i]*WVel[i]

            # Omit wind speed and direction
            print db_T[i]","RDir[i]","RDif[i]","db_T[i]*db_T[i]","RDir[i]*RDir[i]","RDif[i]*RDif[i]","db_T[i]*RDir[i]","db_T[i]*RDif[i]","RDir[i]*RDif[i]
          }
        }
      ' $climatefile >> ../results/clm.summary.data.a
    done
    echo 'Successfully written out clm.summary.data.a'
    rm -rf ../tmp/models/dbs/*.ascii 
  fi
fi

###################################
## Super computer Specific Tasks ##
###################################
# Change file names in hpc-run.sh and check.hpc.sh and rewrite these as
# individual scripts that can be run on the HPC
if [ $arg_1 == 'hpc' ] || [ $arg_1 == 'automatic' ] ; then
  if [ $arg_2 == 'interactive' ] ; then
    echo "Make HPC scripts? [y/n]"
    read Input9
  fi
  if [ $Input9 == 'y' ] ; then
    rm -rf 3.proto_sim_pp
    cp ../src/3.proto_sim_pp .
    chmod a-x 3.proto_sim
    for clmfile_w_path in `ls ../tmp/models/dbs/uk_SAPP*.bin`
    do
      # work out name of climate file (without path)
      len=${#clmfile_w_path}
      clm_file=${clmfile_w_path:18:$len}
      clm_file_name=${clmfile_w_path:18:${len}-4-18}  # without the .bin extension

      # make strings to change 
      new_check_file='3.proto_sim_pp.'$clm_file_name'.sh'
      new_run_file='hpc-run.'$clm_file_name'.sh'
      res_file=$clm_file_name'.res'
      text_file=$clm_file_name'.txt'
      temp_file0=$clm_file_name'.tmp0'
      temp_file1=$clm_file_name'.tmp1'
      rep_file=$clm_file_name'.rep'
      root_name=$clm_file_name

      # replace strings in check.hpc.sh (the script that calls bps)
      sed s/replace-w-clm-file/$clm_file/ 3.proto_sim_pp > temp.2
      sed s/results.file/$res_file/ temp.2 > temp.3
      sed s/SAPPmodels.txt/$text_file/ temp.3 > temp.4
      sed s/temp.0/$temp_file0/ temp.4 > temp.5
      sed s/temp.1/$temp_file1/ temp.5 > temp.6
      sed s/SAPPmodels.rep.txt/$rep_file/ temp.6 > temp.7
      sed s/replace-w-root-name/$root_name/ temp.7 > $new_check_file

      # create script to run on the hpc
      echo '#'                                                                       > $new_run_file
      echo '# ************* SGE qsub options ****************'                      >> $new_run_file
      echo '#Export env variables and keep current working directory'               >> $new_run_file
      echo '#$ -V -cwd'                                                             >> $new_run_file
      echo '#Select serial queue'                                                   >> $new_run_file
      echo '#$ -q serial.q'                                                         >> $new_run_file
      echo '#Combine STDOUT/STDERR'                                                 >> $new_run_file
      echo '#$ -j y'                                                                >> $new_run_file
      echo '#Specify output file'                                                   >> $new_run_file
      echo '# # -o out.$JOB_ID (replace # with #dollarsign to uncomment this line)' >> $new_run_file
      echo '# Add runtime indication'                                               >> $new_run_file
      echo '#$ -ac runtime="3m"'                                                    >> $new_run_file
      echo '# ************** END SGE qsub options ************'                     >> $new_run_file
      echo './'$new_check_file                                                      >> $new_run_file

      # remove temp files
      rm -f temp.* *.tmp* 
    done
    chmod 744 *.sh
  fi
fi

#############################################
## Make multiple linear regression program ##
#############################################
if [ $InputA == 'y' ] ; then
  g77 ../src/4.MLR_eqn_gen.F -o 4.MLR_eqn_gen
fi








