===========================================================

                         ESP-r

   A multi-domain building performance simulation program

Contents
--------

   1. Acknowledgments
   2. License
   3. Obtaining ESP-r
   4. System requirements
   5. Optional features
   6. Installation
   7. Post-installation configuration
   8. Documentation
   9. Validation
  10. Release testing 
  11. Support

===========================================================
1. ACKNOWLEDGMENTS

ESP-r is developed and distributed by the Energy Systems Research Unit
(ESRU) of the University of Strathclyde and Natural Resources Canada
(NRCan), in collaboration with researchers and practitioners around
the world.


Send inquiries to:

   Energy Systems Research Unit (ESRU)
   University of Strathclyde,
   James Weir Building
   75 Montrose Street
   Glasgow UK
   G1 1XJ

   http://www.esru.strath.ac.uk/
   esru@strath.ac.uk

ESP-r is also supported through a community mailing list.  To subscribe
to the list, visit:


   http://lists.strath.ac.uk/mailman/listinfo/esp-r

===========================================================
2. LICENSE

ESP-r is free software.  You can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free
Software Foundation, either version two of the License, or (at your
option) any later version.

ESP-r is distributed in the hope that it will be useful but WITHOUT
ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
for more details.

You should have received a copy of the GNU General Public License along
with ESP-r. If not, write to the Free Software Foundation, Inc., 59
Temple Place, Suite 330, Boston, MA 02111-1307 USA.


===========================================================
3. OBTAINING ESP-r.

ESP-r is distributed in two forms:
   i) precompiled binaries, and
  ii) version-controlled source code.

Using the precompiled binaries is the easiest way to get ESP-r up and
running, but you'll need the source code if you wish to modify ESP-r
and contribute your changes to the community.


Precompiled binaries
---------------------
Precompiled binaries for Linux, Cygwin, Mac OSX and Microsoft Windows
are available at:

   ftp://ftp.strath.ac.uk/Esru_public/


Version-controlled source code
------------------------------
The ESP-r source code is stored on a publicly-accessible Subversion
repository, called 'ESP-r Central'.

You can learn more about accessing the ESP-r subversion repository here:

   http://www.esru.strath.ac.uk/Programs/ESP-r_central.htm

Source code for the current release can be downloaded using the subversion
command:

   svn checkout https://espr.svn.cvsdude.com/esp-r/trunk/

Source code for the latest 'development' version of ESP-r can be
downloaded using the subversion command

   svn checkout https://espr.svn.cvsdude.com/esp-r/branches/development_branch

Should you wish to contribute improvements to the archive, you'll also
need a developer's account. Contact Alex Ferguson (aferguso@nrcan.gc.ca)
or Bart Lomanowski (blomanow@nrcan.gc.ca) to arrange one.


===========================================================
4. SYSTEM REQUIREMENTS

ESP-r has been installed Solaris, Linux, Cygwin, MinGW and MAC
OS X systems, using a variety of compiler and graphics library
combinations. Some of these configurations have been thoroughly tested
and are regarded as 'stable', while others remain in beta testing.

While ESP-r has been built on all of the supported platforms and
configurations, it is most routinely used on Linux.  Installation on
common Linux distributions (including Ubuntu, Mandrake, Redhat/Fedora and
Gentoo) using the gcc 3.4 and gcc 4.1 compiler suites has proven robust,
and you can use it with confidence on these systems.

ESP-r is used less often on Solaris, Cygwin, MinGW and OS X systems. These
systems are not be available to some ESP-r developers, and some (such
as MinGW) provide no standard environment on which ESP-r developers
can rely to ensure the software functions correctly.  Moreover, some
compilers suites, including gcc 4.2 and Intel 10.0 have proven erratic
with the ESP-r source base. While every effort is made to assure the
quality of ESP-r on these platforms, it may not perform as expected
with these systems and compilers. Should you wish to use ESP-r on a
non-Linux platform or with the gcc 4.2+ / Intel compiler suites, please
review Section 10: "RELEASE TESTING", below. There, you will find an
up-to-date description of the status of ESP-r on each platform.


Architectures
-------------
ESP-r is presently only supported on 32 bit systems.
Installations on MinGW and OS X are regarded as 'beta'.

 -----------------------------------------------------------
                      Solaris  Linux   Cygwin  MinGW    OS X
 ...........................................................
 32-bit                  S       S       S       B       B
 64-bit                  B       B       X       X       X
 -----------------------------------------------------------
 S = Stable
 B = Beta testing
 X = Not supported
 - = Not applicable

Compilers
---------
Compilation of ESP-r is presently only supported with
the following compiler sets:
  - GCC 3.4 (gcc, g++ and g77)
  - GCC 4.1 (gcc, g++ and gfortran)
  - Sun cc / f90

Of these, The GCC 4.1 compiler has proven the most robust. For this
reason, it is the recommended compiler for building ESP-r.

ESP-r also builds with the GNU GCC 4.2+ and Intel 10.0 compiler suites
on Linux, but these combinations behave unexpectedly in some situations
Until these issues are resolved, use of GCC 4.2+ and Intel builds is
recommended only for testing purposes.

 ---------------------------------------------------------
                    Solaris  Linux   Cygwin  MinGW    OS X
 .........................................................
 Sun cc  / f90         S       -        -      -       -
 GCC 3.4.X / g77       S       D        S      B       B
 GCC 4.1.2 / gFrotran  X       S        S      X       X
 GCC 4.2.X / gFortran  X       B        B      X       X
 Intel 10.0 / ifort    X       B        X      X       X
 ---------------------------------------------------------
 S = Stable
 B = Beta testing
 D = Depreciated (support will be discontinued in the future)
 X = Not supported
 - = Not applicable

Graphics libraries
------------------
Traditionally, ESP-r incorporated an X11-based graphical interface and
could also be built as a text-only shell application. Work is presently
underway to modernize the ESP-r interface using the GTK interface,
and GTK versions of ESP-r can be installed on all platforms provided
the GTK libraries are available.

 -----------------------------------------------------------
                      Solaris  Linux   Cygwin  MinGW    OS X
 ...........................................................
 X11                     S        S       S      -       S
 GTK                     B        B       B      B       B
 no graphics             S        S       S      B       S
 -----------------------------------------------------------
 S = Stable
 B = Beta testing
 X = Not supported
 - = Not applicable

===========================================================
5. OPTIONAL FEATURES

XML & CSV output
----------------
By default, the ESP-r simulation engine (bps) writes out binary results
libraries that must be post-processed using a separate tool (res). bps
can also optionally export the results directly into ASCII XML and
comma-separated-value formats, provided the GNU libxml2 library is
available on the system.

If the GNU libxslt library is also available, bps can be configured to
translate the XML result file into any user- specified ASCII format.


===========================================================
6. INSTALLATION

Installation of ESP-r is managed through the 'Install'
script, which is located in the 'src' directory. ESP-r
can be installed into any user-writable directory.

The Install script provides interactive prompts to guide
you through the ESP-r installation, and also understands
a number of command line arguments. For more information,
run:

  $ ./Install --help


System-wide installations:
--------------------------

  1. Create a '/usr/esru' folder.

  2. As superuser, run the command:

          $ ./Install -d /usr/esru


Local installations
-------------------

  1. Run the command:

          $ ./Install -d <path/to/esp-r>

     Where <path/to/esp-r> describes the desired
     installation directory. For instance,
     './Install -d ~/my_esp-r' will install ESP-r
     in a directory called my_esp-r, in the user's
     home folder.

After installing ESP-r, be sure to update your PATH
environment variable as described below.

===========================================================
7. POST INSTALLATION CONFIGURATION

On most Linux and Cygwin systems, the only post-installation
configuration required is updating the path environment
variable to include the location of ESP-r binaries. 


Updating your PATH
------------------
You'll need to update your PATH environment variable to
include the location of your ESP-r binaries. The steps
required to configure your path depend on the shell in
use on your system. Enter the command:

  $ echo $SHELL

Configuration of the PATH environment variable using the
bash and csh shells are described below. Information on
setting environment variables for other shell types (e.g.,
sh, zsh, ksh) is available on the Internet.

  BASH:

      Append the following line to your .bashrc file in
      your home directory (or in the system's .bashrc file)

      export PATH="<path/to/esp-r>/esp-r/bin/:$PATH"

      (Where <path/to/esp-r> describes the location
      in which you installed ESP-r)

  CSH:

      Append the following line to your .cshrc file in
      your home directory (or in the system's .cshrc file):

      set path = ( <path/to/esp-r>/esp-r/bin/ $path )

      (Where <path/to/esp-r> describes the location
      in which you installed ESP-r)


Setting EFONTS environment variable
-----------------------------------
On most Linux and Cygwin systems, acceptable fonts are
located automatically at runtime. However, if you find
ESP-r crashes after invocation, you may need to set the
EFONTS environment variable. Include the following lines
in your .bashrc /.cshrc file

   setenv EFONT_0 6x12
   setenv EFONT_1 6x13
   setenv EFONT_2 8x13
   setenv EFONT_3 9x15

Default settings
----------------
The file <path/to/esp-r>/esp-r/default defines the default
settings for example problems, climate, control, etc. These
can be changed if the default settings offered in the
standard distribution are not appropriate for your site.

Colour Map
----------
To run ESP-r on some Sun workstations it may be necessary
to firstly define the default colour map.  This can be
done by issuing the command "xstdcmap -default" or placing
it in your .xinitrc or .openwin-init file.  With Solaris 7
you will also need to add "xstdcmap -delete all" to your
.xinitrc file.  If you are running OpenWindows and colour
problems persist, try commenting out the line

      cmap_alloc -allscreens

in the file /usr/openwin/lib/openwin-sys.


===========================================================
8. DOCUMENTATION

An extensive collection of books, academic theses,
peer-reviewed papers, reports and manuals describing the
theoretical basis and application of ESP-r are available.
A complete list of ESP-r documentation can be found on the
ESRU website:

   http://www.esru.strath.ac.uk/publications.htm

Theoretical basis
-----------------
  
  - "Energy Simulation in Building Design" by Joe Clark
    (Butterworth Heinemann 2001) provides a broad
    description of ESP-r methodologies.

Application of ESP-r
--------------------

  - "The ESP-r Cookbook"  describes the application of
    ESP-r in building simulation:
       
       ftp://ftp.strath.ac.uk/Esru_public/documents/esp-r_cookbook.pdf

  - "Data model summary ESP-r Version 9 Series" describes
    the  format of ESP-r's input files:

       ftp://ftp.strath.ac.uk/Esru_public/documents/ESP-r_data_doc.pdf

Developing with ESP-r
---------------------

  - "Structure of the ESP-r Source Code Archive"
    outlines the branch structure in use on ESP-r
    central, and procedures for merging code:

       ftp://ftp.strath.ac.uk/Esru_public/documents/repository.pdf

  - "An overview of Subversion for ESP-r Central
    Users" summarizes the use of subversion to
    access and maintain branches on ESP-r Central:
       
       ftp://ftp.strath.ac.uk/Esru_public/documents/subversion.pdf

  - "ESP-r Coding Guide" provides guidelines for
    modifying ESP-r source code:

       ftp://ftp.strath.ac.uk/Esru_public/documents/coding_guide.pdf

  - "ESP-r Developers' Quality Assurance Checklist"
    prescribes testing procedures for contributers:

       ftp://ftp.strath.ac.uk/Esru_public/documents/QA_checklist.pdf

===========================================================
9. VALIDATION

ESP-r has been extensively validated both through comparison
to other simulation programs, and comparison to experimental
data. An overview of ESP-r validation studies is available
at the following URL:

    http://www.esru.strath.ac.uk/Documents/validation.pdf

In addition, ESP-r includes an option to automatically
perform the IEA BESTEST/ASHRAE 140 and CEN validation tests,
and report these results. You can exercise these tests
by clicking on the 'validation' option in prj.

===========================================================
10. QUALITY ASSURANCE AND RELEASE TESTING

Development of ESP-r continues, and its predictions are
subject to change as new features are added and existing
facilities improved. To guarantee the reliability of ESP-r
results, a quality assurance procedure is performed prior
to each release.

The quality assurance procedure is designed to assure
that no differences in ESP-r functionality or simulation
results are introduced between releases. If modifications
to ESP-r have caused differences in simulation results,
the release testing assures that the differences are 
attributable to the changes introduced by the developer, 
and not the result of an unintended bug.

The quality assurance procedure contains two principle
components:

  a) Regression testing, which compares the predictions
     from two successive versions of ESP-r and determines
     if differences exist in the results.

  b) Cross-platform testing, which compares the predictions
     from the most recent version of ESP-r running on
     different platforms and compilers, and determines
     if differences exist in the results.

Since ESP-r is most commonly used on Linux systems and
has proven robust on this platform, regression testing is
performed on linux systems.  When possible, cross-platform
testing is performed using each of the other supported
platforms (Solaris, Cygwin, MinGW and OS X). However,
limited access to these platforms and the greater variety
of configurations exhibited by these systems limits the
amount of testing that can be performed, and ESP-r may
not install or function correctly on some machines.

The following table summarizes the most recent test results
on each of ESP-r's supported platforms:

                 Testing for ESP-r Release 11.8
      (2009-11-20, svn revision r4842 on pre-release_patches branch)
 -----------------------------------------------------------------------
 Platform  Compiler    Notes
 .......................................................................
 Linux     GCC 4.1.2   A complete regression test was performed against
                       the last release (2009-05-25, r4324). This 
                       comparison highlighted numerical differences
                       introduced by bug fixes in the code (r4682),
                       new window shading control (r4722), new obstruction
                       rotations and six-sided obstructions (r4710) and a 
                       new global control (r3607) where
                       anticipated numerical differences were observed.
                       One bug fix (r4841) yielded significant
                       reductions in runtime. No unintended results were
                       observed.
                       
Complete discussion of these results is provided in the file: 
'/tester/testing_results/Testing_results_ESPr_11_8.txt'.

The Linux / GCC 4.1.2 reference platform testing archive is provided
in the file:
'/tester/testing_results/ref_platform_linux_gcc_4_1_2_results_archive_11_8.tar.gz'.
                       
                 Testing for ESP-r Release 11.7
      (2009-05-25, svn revision r4286 on pre-release_patches branch)
 -----------------------------------------------------------------------
 Platform  Compiler    Notes
 .......................................................................
 Linux     GCC 3.4.6   Comparisons suggest GCC 4.1.2 is more stable
                       and robust than GCC 3.4.x. For this reaseon,
                       although GCC 3.4.6 continues to be supported, 
                       regression testing is now performed using GCC
                       4.1.2. 

           GCC 4.1.2   A complete regression test was performed against
                       the last release (2008-11-21, r3640). This 
                       comparison highlighted numerical differences
                       introduced by bug fixes in the code (r4129) and
                       new window shading models (r4092) where
                       anticipated numerical differences were observed.
                       One bug fix (r4233) yielded significant
                       reductions in runtime. No unintended results were
                       observed.
                       
                       A comprehensive comparison between GCC 4.1.2, GCC
                       3.4.6, Intel and sun cc builds suggests that the
                       GCC 4.1.2 is the most stable and robust compiler
                       for building ESP-r. For this reason, GCC 4.1.2
                       is now the recommended compiler for building
                       ESP-r.

           GCC 4.2.3   The GCC 4.2.3 compiler suite  provides exact
                       agreement with GCC 4.1.2 in all but a handful
                       of test cases, where numerical exceptions cause
                       floating point errors. For this reason, use of
                       GCC 4.2 for research purposes is discouraged.

           Intel 10.0  With optimization deactivated, the Intel
                       compiler consistently produced results close to
                       the gFortran and Sun f90 builds. But When the
                       default optimization is activated (using the -O2)
                       option, agreement between the Intel and GCC 4.1.2
                       compiler deteriorates considerably. Nearly all of
                       the models exhibit small, non-trace differences,
                       and in every case these differences were slightly,
                       or significantly larger than those observed with
                       optimization deactivated.
 ......................................................................
 Cygwin    GCC 4.1.2   A comprehensive comparison to results from a
                       Linux/GCC 4.1.2 build exhibited very good
                       agreement.
 ......................................................................
 Solaris   Sun CC      A comprehensive comparison between results from
                       the sun compiler suite and GCC 4.1.2 exhibited 
                       good agreement. 
 .......................................................................
 OS X     GCC 3.4.6    A comprehensive comparison betwen results from
                       an OS X build revealed unexplained non-trivial
                       differences from GCC 3.4.6 and 4.1.2 Linux builds.
                       For this reason, OS X builds should be used with
                       caution.
 .......................................................................
 MinGW    GCC 3.4.5    The release compiles correctly on MinGW, but the
                       testing tools do not correctly run in a DOS
                       environment. For this reason, a comprehensive
                       cross platform test has not been undertaken. 
 -----------------------------------------------------------------------

Numerical differences between the reference version of ESP-r (Linux,
GCC 4.1.2 and X11) each platform and compiler combination
and the reference version ares summarized below. Complete discussion of
these results is provided in the file 
'/tester/testing_results/Testing_results_ESPr_11_7.txt'.

   Comparison of results from GCC4.1.2-compiled versions
   (X11, Linux) with builds from other platform/compilers.
 -----------------------------------------------------------------
 Architecture  Platform    Compiler      Maximum difference (%) 
 ................................................................. 
    IA-32      CYGWIN      GCC 4.1.2            0.63 
               LINUX       GCC 4.1.2            (REF)
               SOLARIS     Sun CC/f90           5.28 (note 2)
               LINUX       Intel -O0            0.75  
    PowerPC    OSX         GCC 3.4              3.41 
    Sparc      SOLARIS     Sun CC/f90           2.61 
 .................................................................
 NOTES:
   1. Some test cases produced numerical exceptions and
      floating point errors.
   2. Two test cases caused a numerical exception.
   3. Testing on MinGW was not carried out due to an issue
      with DOS path management in ESP-r.
 -----------------------------------------------------------------

===========================================================
11. SUPPORT

The quickest route to a remedy for an ESP-r installation or
modelling problem is to ask for help on the ESP-r mailing
list. To subscribe to the list, visit:

  http://lists.strath.ac.uk/mailman/listinfo/esp-r

Good Luck!
